<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>最短路 on 清烛的博客</title>
        <link>https://oi.imyangty.com/tags/shortest-path/</link>
        <description>Recent content in 最短路 on 清烛的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Wed, 17 Aug 2022 22:52:06 +0800</lastBuildDate><atom:link href="https://oi.imyangty.com/tags/shortest-path/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>CF715B Complete The Graph</title>
        <link>https://oi.imyangty.com/sol-cf715b/</link>
        <pubDate>Wed, 17 Aug 2022 22:52:06 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-cf715b/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg57.webp" alt="Featured image of post CF715B Complete The Graph" /&gt;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;给 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 点 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 边，&lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 修改 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边中边为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的边， 使满足 &lt;span class=&#34;math inline&#34;&gt;\(s\to t\)&lt;/span&gt; 的最短路长度是 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;，且输出答案的时候边为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的边的权值必须在 &lt;span class=&#34;math inline&#34;&gt;\([1,10^{18}]\)&lt;/span&gt; 内。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(2\le n\le 1000\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le m\le 10000\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le L\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;首先视 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 权边为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，跑一遍 &lt;span class=&#34;math inline&#34;&gt;\(s\to t\)&lt;/span&gt; 最短路，若此时最短路 &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;L\)&lt;/span&gt; 则一定无解。否则我们尝试进行如下构造。&lt;/p&gt;
&lt;p&gt;再跑一遍最短路，设为 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_1(u)\)&lt;/span&gt;。假设当前在 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt;，且为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 边，由于我们跑 Dijkstra 是已经确定 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_1(u)\)&lt;/span&gt; 的，则令边权为 &lt;span class=&#34;math inline&#34;&gt;\(\max(1, L - \mathrm{dis}_0(t) - \mathrm{dis}_1(u) +\mathrm{dis}_0(v))\)&lt;/span&gt;，如果最后跑出来了 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 则有解，否则无解。&lt;/p&gt;
&lt;p&gt;正确新：考虑我们这样定边权会使得最后 &lt;span class=&#34;math inline&#34;&gt;\(s\to t\)&lt;/span&gt; 的任意含 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 权边的路径长度都 &lt;span class=&#34;math inline&#34;&gt;\(\ge L\)&lt;/span&gt;，最后一次这样赋边权的时候就相当于直接硬点了一条最短路。&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; ll = &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;1005&lt;/span&gt;, maxm = &lt;span class=&#34;dv&#34;&gt;10005&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; G[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m, S, T, L, vis[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;ll dis[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;][maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Edge {&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, v; ll w;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} e[maxm];&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; Dijkstra0(ll (&amp;amp;dis)[maxn]) {&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    priority_queue&amp;lt;pair&amp;lt;ll, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;, vector&amp;lt;pair&amp;lt;ll, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;ll, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(dis, &lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(vis, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; vis);&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dis[S] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, q.push({&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, S});&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = q.top().second; q.pop();&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (vis[u]) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        vis[u] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;p : G[u]) {&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v = p.first; ll w = e[p.second].w;&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!w) w = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (dis[u] + w &amp;lt; dis[v]) {&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                dis[v] = dis[u] + w;&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                q.push({dis[v], v});&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; Dijkstra1(ll (&amp;amp;dis)[maxn], ll (&amp;amp;d)[maxn]) {&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    priority_queue&amp;lt;pair&amp;lt;ll, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;, vector&amp;lt;pair&amp;lt;ll, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;ll, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(dis, &lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(vis, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; vis);&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dis[S] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, q.push({&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, S});&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb1-43&#34;&gt;&lt;a href=&#34;#cb1-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = q.top().second; q.pop();&lt;/span&gt;
&lt;span id=&#34;cb1-44&#34;&gt;&lt;a href=&#34;#cb1-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (vis[u]) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-45&#34;&gt;&lt;a href=&#34;#cb1-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        vis[u] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-46&#34;&gt;&lt;a href=&#34;#cb1-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;p : G[u]) {&lt;/span&gt;
&lt;span id=&#34;cb1-47&#34;&gt;&lt;a href=&#34;#cb1-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v = p.first; ll &amp;amp;w = e[p.second].w;&lt;/span&gt;
&lt;span id=&#34;cb1-48&#34;&gt;&lt;a href=&#34;#cb1-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!w) w = max(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;ll&lt;/span&gt;, L - d[T] - dis[u] + d[v]);&lt;/span&gt;
&lt;span id=&#34;cb1-49&#34;&gt;&lt;a href=&#34;#cb1-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (dis[u] + w &amp;lt; dis[v]) {&lt;/span&gt;
&lt;span id=&#34;cb1-50&#34;&gt;&lt;a href=&#34;#cb1-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                dis[v] = dis[u] + w;&lt;/span&gt;
&lt;span id=&#34;cb1-51&#34;&gt;&lt;a href=&#34;#cb1-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                q.push({dis[v], v});&lt;/span&gt;
&lt;span id=&#34;cb1-52&#34;&gt;&lt;a href=&#34;#cb1-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-53&#34;&gt;&lt;a href=&#34;#cb1-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-54&#34;&gt;&lt;a href=&#34;#cb1-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-55&#34;&gt;&lt;a href=&#34;#cb1-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-56&#34;&gt;&lt;a href=&#34;#cb1-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-57&#34;&gt;&lt;a href=&#34;#cb1-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-58&#34;&gt;&lt;a href=&#34;#cb1-58&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb1-59&#34;&gt;&lt;a href=&#34;#cb1-59&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; L &amp;gt;&amp;gt; S &amp;gt;&amp;gt; T;&lt;/span&gt;
&lt;span id=&#34;cb1-60&#34;&gt;&lt;a href=&#34;#cb1-60&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb1-61&#34;&gt;&lt;a href=&#34;#cb1-61&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        cin &amp;gt;&amp;gt; e[i].u &amp;gt;&amp;gt; e[i].v &amp;gt;&amp;gt; e[i].w;&lt;/span&gt;
&lt;span id=&#34;cb1-62&#34;&gt;&lt;a href=&#34;#cb1-62&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        G[e[i].u].emplace_back(e[i].v, i);&lt;/span&gt;
&lt;span id=&#34;cb1-63&#34;&gt;&lt;a href=&#34;#cb1-63&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        G[e[i].v].emplace_back(e[i].u, i);&lt;/span&gt;
&lt;span id=&#34;cb1-64&#34;&gt;&lt;a href=&#34;#cb1-64&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-65&#34;&gt;&lt;a href=&#34;#cb1-65&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    Dijkstra0(dis[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;
&lt;span id=&#34;cb1-66&#34;&gt;&lt;a href=&#34;#cb1-66&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (dis[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][T] &amp;gt; L) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-67&#34;&gt;&lt;a href=&#34;#cb1-67&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    Dijkstra1(dis[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], dis[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;
&lt;span id=&#34;cb1-68&#34;&gt;&lt;a href=&#34;#cb1-68&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (dis[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][T] != L) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-69&#34;&gt;&lt;a href=&#34;#cb1-69&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-70&#34;&gt;&lt;a href=&#34;#cb1-70&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%lld\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, e[i].u, e[i].v, e[i].w);&lt;/span&gt;
&lt;span id=&#34;cb1-71&#34;&gt;&lt;a href=&#34;#cb1-71&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-72&#34;&gt;&lt;a href=&#34;#cb1-72&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>图论复习 1（图论基础知识）</title>
        <link>https://oi.imyangty.com/summary-graph1/</link>
        <pubDate>Fri, 18 Feb 2022 11:03:52 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/summary-graph1/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg9.webp" alt="Featured image of post 图论复习 1（图论基础知识）" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;省选 + NOI 复习。&lt;/p&gt;
&lt;p&gt;全凭个人喜好来搞。&lt;/p&gt;
&lt;p&gt;不会写的很严谨，实战导向型。&lt;/p&gt;
&lt;p&gt;本文内容概览：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小生成树（不含矩阵树，LCT 维护，Kruskal 重构树）&lt;/li&gt;
&lt;li&gt;最短路与差分约束&lt;/li&gt;
&lt;li&gt;连通性相关（BCC，SCC，&lt;em&gt;不含圆方树&lt;/em&gt;）与 2 - SAT&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最小生成树&#34;&gt;最小生成树&lt;/h2&gt;
&lt;p&gt;全是基于贪心的算法。&lt;/p&gt;
&lt;h3 id=&#34;求解算法&#34;&gt;求解算法&lt;/h3&gt;
&lt;p&gt;Prim 算法是一种最小生成树算法，思想比较类似于 Dijkstra，实战中用的较少。&lt;/p&gt;
&lt;p&gt;从一个点开始，每次将离当前点集中距离最小的点加入生成树（很类似 Dijkstra 算法）。&lt;/p&gt;
&lt;p&gt;这个算法的时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，一般用于稠密图上的最小生成树，跑的会比 Kruskal 快。但是稀疏图上一般使用 Kruskal。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Kruskal 算法是另一种最小生成树算法，实战中较为常用（实际上就没写过几次另外两个）。&lt;/p&gt;
&lt;p&gt;将所有的边按照权值从小到大排序，每次贪心地选最小的边，若两端点已经连通则舍去，未连通则将其连上并将该边加入最小生成树。&lt;/p&gt;
&lt;p&gt;需要前置知识并查集来维护连通性，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log n)\)&lt;/span&gt;。在稀疏图上跑的很快。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Boruvka 算法是第三种最小生成树算法，较为少见，但是一些题目中用该算法的思想来思考会有奇效。&lt;/p&gt;
&lt;p&gt;主要思想是合并连通块（即多路增广的 Prim）。我们每次都遍历所有的边，对每个连通块都找到一个不在最小生成树中的，连向其他连通块的最短边（代码中的 &lt;code&gt;best[]&lt;/code&gt; 数组），&lt;strong&gt;需要按照编号严格排序，避免两个连通块互连成环&lt;/strong&gt;。然后将这些连通块两两合并。&lt;/p&gt;
&lt;p&gt;每次合并后，连通块的个数都减少一半，所以时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log n)\)&lt;/span&gt;。实战中并不常用，而是借用其&lt;strong&gt;合并连通块&lt;/strong&gt;的思想来解决问题。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u[maxm], v[maxm], w[maxm];&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; fa[maxn], best[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; used[maxm];&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; find(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u) {&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; u == fa[u] ? u : fa[u] = find(fa[u]);&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; better(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j) {&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!j) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (w[i] != w[j]) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; w[i] &amp;lt; w[j];&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; i &amp;lt; j;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    n = read(), m = read();&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m)&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        u[i] = read(), v[i] = read(), w[i] = read();&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) fa[i] = i;&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; merged = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; update = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (update) {&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        update = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        memset(best, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; best);&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (used[i]) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; p = find(u[i]), q = find(v[i]);&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (p == q) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (better(i, best[p])) best[p] = i;&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (better(i, best[q])) best[q] = i;&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n)&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (best[i] &amp;amp;&amp;amp; !used[best[i]]) {&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                update = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                ++merged, ans += w[best[i]];&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                used[best[i]] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                fa[find(u[best[i]])] = find(v[best[i]]);&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (merged == n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, ans);&lt;/span&gt;
&lt;span id=&#34;cb1-43&#34;&gt;&lt;a href=&#34;#cb1-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;orz&amp;quot;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-44&#34;&gt;&lt;a href=&#34;#cb1-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-45&#34;&gt;&lt;a href=&#34;#cb1-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;应用&#34;&gt;应用&lt;/h3&gt;
&lt;p&gt;生成树的一些高阶应用如 LCT 维护最小生成树、生成树计数（Matrix-Tree 定理）和 Kruskal 重构树不会放在本 blog 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 1：&lt;a href=&#34;https://www.luogu.com.cn/problem/P4180&#34;&gt;P4180 [BJWC2010]严格次小生成树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如题，注意严格次小生成树的边权和要严格大于最小生成树的边权和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们注意到，肯定只换掉原来最小生成树的一条边是最优的，因为换更多的一定不会更优。&lt;/p&gt;
&lt;p&gt;然后，我们可以枚举所有的边 &lt;span class=&#34;math inline&#34;&gt;\((u, v)\)&lt;/span&gt;，然后换掉的边一定就是树链 &lt;span class=&#34;math inline&#34;&gt;\((u, v)\)&lt;/span&gt; 上的边。由一个很简单的贪心可知，换掉树链上的最大边是最优的（因为根据 Kruskal，要加的边肯定不小于树边），&lt;em&gt;但是若树链上的最大边与待加边相等则不满足严格次小&lt;/em&gt;，所以就需要拿树链上的&lt;em&gt;严格次大边&lt;/em&gt;来替换。&lt;/p&gt;
&lt;p&gt;所以一个树剖 + 最大值/严格次大值查询（可以 ST 表也可以线段树）就完事了，&lt;span class=&#34;math inline&#34;&gt;\(O(m\log^2n)\)&lt;/span&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 2：&lt;a href=&#34;https://www.luogu.com.cn/problem/CF888G&#34;&gt;CF888G Xor-MST&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个带权点，定义 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的连边权值为 &lt;span class=&#34;math inline&#34;&gt;\(a_i\oplus a_j\)&lt;/span&gt;，求这张完全图的最小生成树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用类似 Boruvka 算法的思想，考虑 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 次合并连通块。&lt;/p&gt;
&lt;p&gt;考虑将所有的数字按照最高位划分为两个集合，由异或的性质知道这两个集合中间只连一条边肯定最优，所以暴力拿 0-1 Trie 来找这两个集合间的最小连边。然后递归处理这两个集合，详见 &lt;a href=&#34;https://oi.imyangty.com/sol-cf888g&#34;&gt;我的题解&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;最短路&#34;&gt;最短路&lt;/h2&gt;
&lt;h3 id=&#34;floyd&#34;&gt;Floyd&lt;/h3&gt;
&lt;p&gt;一种全源最短路（求两两点对之间的最短路）算法，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;具体地，考虑一个 dp：设 &lt;span class=&#34;math inline&#34;&gt;\(f_{k, i, j}\)&lt;/span&gt; 表示只允许经过编号为 &lt;span class=&#34;math inline&#34;&gt;\([1, k]\)&lt;/span&gt; 的点，&lt;span class=&#34;math inline&#34;&gt;\((i, j)\)&lt;/span&gt; 间的最短路。然后答案显然为 &lt;span class=&#34;math inline&#34;&gt;\(f_{n, i, j}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;初始化：&lt;span class=&#34;math inline&#34;&gt;\(f_{0, i, j} = \begin{cases} w(i, j)&amp;amp;\text{there is an edge between } i \text{ and } j\\+\infty&amp;amp;\text{otherwise}\end{cases}\)&lt;/span&gt;。转移的时候我们从小到大枚举 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，然后有 &lt;span class=&#34;math inline&#34;&gt;\(f_{k, i, j} = \min(f_{k - 1, i, j}, f_{k-1, i, k} + f_{k-1, k, j})\)&lt;/span&gt;，具体意义为将 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 作为新的转移点来更新 &lt;span class=&#34;math inline&#34;&gt;\((i,j)\)&lt;/span&gt; 的最短路。&lt;/p&gt;
&lt;p&gt;空间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，第一维可以滚动掉。&lt;/p&gt;
&lt;p&gt;其中，由于 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j} = \min_k \{f_{i,k} + f_{k,j}\}\)&lt;/span&gt; 的形式是 &lt;span class=&#34;math inline&#34;&gt;\(\min,+\)&lt;/span&gt; 型矩阵乘法，其满足结合律，所以有些题目中可以结合上矩阵快速幂。&lt;/p&gt;
&lt;p&gt;另外，将所有边权视作 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，就等价于求图的&lt;strong&gt;传递闭包&lt;/strong&gt;，用 &lt;code&gt;bitset&lt;/code&gt; 优化可以做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3/w)\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Floyd 支持负权图，但是需要保证最短路存在（没有负环）。判断负环的方法即看迭代了 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 轮后最短路是否已经被确定，若还有能更新的值说明存在负环。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;bellman-ford-和-spfa&#34;&gt;Bellman-Ford 和 SPFA&lt;/h3&gt;
&lt;p&gt;Bellman-Ford 算法是一种单源最短路（求给定源点到剩下所有点的最短路）算法。它的想法是，每轮都枚举所有边进行松弛操作，最多进行 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 轮，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;。&lt;strong&gt;Bellman-Ford 算法支持求负权图的最短路或者判断负环&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其中，&lt;strong&gt;松弛操作&lt;/strong&gt;即指 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_v = \min(\mathrm{dis}_v, \mathrm{dis}_u + w(u,v))\)&lt;/span&gt;。我们这样做的目的是尝试用 &lt;span class=&#34;math inline&#34;&gt;\(S\to u\to v\)&lt;/span&gt; 这条路径来更新 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_v\)&lt;/span&gt;。每轮松弛操作会使得最短路条数 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;，最短路存在时长度最大为 &lt;span class=&#34;math inline&#34;&gt;\(n - 1\)&lt;/span&gt;，所以松弛最多进行 &lt;span class=&#34;math inline&#34;&gt;\(n - 1\)&lt;/span&gt; 次。&lt;/p&gt;
&lt;p&gt;当然，如果进入了一个负环，最短路就不存在了，所以第 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 轮循环时若存在能松弛的边，说明&lt;strong&gt;从 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 出发能到达负环&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 出发找不到负环不代表图中没有负环，真要找负环的话请建超级源点并向所有点连 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 权边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;队列优化：SPFA&lt;/strong&gt;： Shortest Path Faster Algorithm，其想法是基于&lt;strong&gt;只有上一次被成功松弛的点所连接的边才有机会引起下一次松弛操作&lt;/strong&gt;，所以每次松弛成功后将被松弛的点加入队列（如果没被加入队列的话）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; SPFA(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s) {&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(dis, &lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    queue&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dis[s] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, inq[s] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    q.push(s);&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = q.front();&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        inq[u] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, q.pop();&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;e : G[u]) {&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; &amp;amp;v = e.to;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (dis[u] + e.w &amp;lt; dis[v]) {&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                dis[v] = dis[u] + e.w;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!inq[v]) inq[v] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, q.push(v);&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SPFA 在随机数据下表现极其优秀，但是基本都会被出题人卡成最坏复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;。图中没有负权边时，请使用 Dijkstra，否则题目中要么会隐式给出点的势能（见 Johnson 算法）要么不会卡 SPFA（比如大多数费用流题目）。&lt;/p&gt;
&lt;p&gt;SPFA 同样可以判断负环，但是&lt;strong&gt;不能用松弛操作次数来判断&lt;/strong&gt;，见&lt;a href=&#34;https://www.luogu.com.cn/problem/solution/P3385&#34;&gt;洛谷负环模板题解&lt;/a&gt;，hack 的原理就是对 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 号节点进行 &lt;span class=&#34;math inline&#34;&gt;\(n - 1\)&lt;/span&gt; 轮松弛，这样能产生 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 级别的松弛次数，但是可以&lt;strong&gt;使用入队次数判断&lt;/strong&gt;，因为一轮松弛中一个节点只会入队一次。当然&lt;strong&gt;使用最短路边数判断&lt;/strong&gt;是最稳妥也是最快速的。&lt;/p&gt;
&lt;h3 id=&#34;dijkstra&#34;&gt;Dijkstra&lt;/h3&gt;
&lt;p&gt;Dijkstra 算法是一种常见的非负权图单源最短路算法，是一种基于贪心的算法。实战中常用优先队列优化，其复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log m)\)&lt;/span&gt;，由于 SPFA 复杂度上界为 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;，建议实战中使用 Dijkstra 算法。&lt;/p&gt;
&lt;p&gt;其流程是，将所有点划分为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 两个点集，分别表示其最短路长度有没有被确定。初始化 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_s = 0\)&lt;/span&gt;，其他 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_i = +\infty\)&lt;/span&gt;，然后重复如下流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 集合中选取一个最短路最短的点移到 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 集合中。&lt;/li&gt;
&lt;li&gt;对刚才那个点的所有出边进行松弛操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 集合为空时，算法结束。选取最短路最短的点的过程可以使用数据结构优化，实战中使用优先队列，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log m)\)&lt;/span&gt;。稠密图上暴力算法有更优秀的表现，&lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;edge&amp;gt; G[maxn];&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; dis[maxn], vis[maxn];&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;priority_queue&amp;lt;pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;, vector&amp;lt;pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; &amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; dijkstra(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s) {&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(dis, &lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dis[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, q.push({&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, s});&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = q.top().second; q.pop();&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (vis[u]) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        vis[u] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;e : G[u]) {&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; &amp;amp;v = e.to;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (dis[v] &amp;gt; dis[u] + e.w) {&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                dis[v] = dis[u] + e.w;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                q.push({dis[v], v});&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到，该算法的正确性基于所有边权非负，即 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_v\ge \mathrm{dis}_u\)&lt;/span&gt;，所以无法处理负权边的图。&lt;/p&gt;
&lt;h3 id=&#34;johnson-全源最短路&#34;&gt;Johnson 全源最短路&lt;/h3&gt;
&lt;p&gt;可以求出带负权边（不能有负环）的图的全源最短路。其能做到 &lt;span class=&#34;math inline&#34;&gt;\(O(nm + nf(n,m))\)&lt;/span&gt; 的时间复杂度，其中 &lt;span class=&#34;math inline&#34;&gt;\(f(n, m)\)&lt;/span&gt; 为 Dijkstra 算法的复杂度。实战中的 Johnson 算法复杂度一般为 &lt;span class=&#34;math inline&#34;&gt;\(O(nm\log m)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们的思路是，想求出全源最短路，可以枚举起点跑 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次 Bellman-Ford 算法，时间复杂度是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2m)\)&lt;/span&gt; 的，而如若我们能跑 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次堆优化 Dijkstra，那么就能跑出 &lt;span class=&#34;math inline&#34;&gt;\(O(nm\log m)\)&lt;/span&gt; 的优秀时间复杂度。&lt;/p&gt;
&lt;p&gt;由于原图有负权边，所以需要对边进行处理，注意到同时加上一个正数的做法显然错误。Johnson 使用给点求&lt;strong&gt;势能&lt;/strong&gt;的方法来标注边权：建超级源点 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，向所有点连 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 权边，求出 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 到所有点的最短路（即势能）&lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt;，然后将边 &lt;span class=&#34;math inline&#34;&gt;\((u, v, w)\)&lt;/span&gt; 的边权设为 &lt;span class=&#34;math inline&#34;&gt;\(w + h_u - h_v\)&lt;/span&gt;，接下来每条边权值非负，Dijkstra 解决。&lt;/p&gt;
&lt;p&gt;注意到，物理中的势能满足如下性质：&lt;strong&gt;两点间的势能差只与相对位置有关&lt;/strong&gt;，我们可以发现从 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 走到 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的路径，化简后可以得到 &lt;span class=&#34;math inline&#34;&gt;\(w(s, p_1) + \cdots+ w(p_k, t) + h_s - h_t\)&lt;/span&gt;，无论走哪条路径，&lt;span class=&#34;math inline&#34;&gt;\(h_s - h_t\)&lt;/span&gt; 都是不变的。前面的 &lt;span class=&#34;math inline&#34;&gt;\(w\)&lt;/span&gt; 加起来是路径长，后面是两点间势能差，所以原图中最短路能够对应新图中的最短路。&lt;/p&gt;
&lt;p&gt;在跑第一轮 Bellman-Ford 的时候，根据三角形不等式，&lt;span class=&#34;math inline&#34;&gt;\(h_v\le h_u + w(u, v)\)&lt;/span&gt;，所以 &lt;span class=&#34;math inline&#34;&gt;\(w(u, v) + h_u - h_v\ge 0\)&lt;/span&gt;​，新图边权非负，该算法正确性得到了证明。&lt;/p&gt;
&lt;h3 id=&#34;最短路树&#34;&gt;最短路树&lt;/h3&gt;
&lt;h3 id=&#34;应用-1&#34;&gt;应用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 1：&lt;a href=&#34;https://www.luogu.com.cn/problem/P1119&#34;&gt;P1119 灾后重建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边的长度。给出第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个点可用的时间 &lt;span class=&#34;math inline&#34;&gt;\(t_i\)&lt;/span&gt;，之后有 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 个询问 &lt;span class=&#34;math inline&#34;&gt;\((x, y, t)\)&lt;/span&gt;，即询问时间 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 时 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 的最短路，要求只能经过 &lt;span class=&#34;math inline&#34;&gt;\(t_i &amp;lt; t\)&lt;/span&gt; 的点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(n\le 200\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一道考察了 Floyd 本质的好题。离线所有询问并按时间顺序排序，将所有点按时间顺序排序。数据范围暗示我们考虑 Floyd。发现 Floyd 的本质就是枚举转移点，那么我们不妨就按照恢复时间的顺序来枚举这个转移点，并在对应的时间回答询问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 2：&lt;a href=&#34;https://www.luogu.com.cn/problem/P1144&#34;&gt;P1144 最短路计数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对每个 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 求 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 到其最短路的条数。&lt;span class=&#34;math inline&#34;&gt;\(n = 10^6, m = 2\times 10^6\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以直接在做 Dijkstra 的时候 DP，对于一次松弛操作，若三角形不等式取到等号，则对最短路条数进行累加，否则直接覆盖掉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 3：&lt;a href=&#34;https://www.luogu.com.cn/problem/P1629&#34;&gt;P1629 邮递员送信&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有一个邮递员要送东西，邮局在节点 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。他总共要送 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 样东西，其目的地分别是节点 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 到节点 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。由于这个城市的交通比较繁忙，因此所有的道路都是单行的，共有 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条道路。这个邮递员每次只能带一样东西，并且&lt;strong&gt;运送每件物品过后必须返回邮局&lt;/strong&gt;。求送完这 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 样东西并且&lt;strong&gt;最终回到邮局&lt;/strong&gt;最少需要的时间。保证图强连通，&lt;span class=&#34;math inline&#34;&gt;\(n=10^3\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(m=10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一个很重要的思想叫做&lt;strong&gt;建反图&lt;/strong&gt;，上题中我们要求所有的点到 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的距离，那么建出反图之后就又变回了 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到所有点的距离。因此跑正反两次 Dijkstra 就解决了上题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 4：&lt;a href=&#34;https://www.luogu.com.cn/problem/P5304&#34;&gt;P5304 [GXOI/GZOI2019]旅行者&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 组数据，给定一张带权有向图，求给定的大小为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的点集中，两两之间最短路。&lt;span class=&#34;math inline&#34;&gt;\(k\le n=10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(m=5\times 10^5\)&lt;/span&gt;，5s。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;技巧：&lt;strong&gt;二进制分组&lt;/strong&gt;，发现点集中的每个点对至少会有一个二进制位不一样，因此考虑枚举不同的这一位，将点集按这一位是 0 还是 1 划分为两组，然后建超级源汇点跑最短路。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(Tm\log m\log k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;当然本题还有更优秀的 &lt;span class=&#34;math inline&#34;&gt;\(O(Tm\log m)\)&lt;/span&gt; 做法，考虑做正反两次 Dijkstra，求出 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 到任意特殊点的最短距离和 &lt;span class=&#34;math inline&#34;&gt;\(g_u\)&lt;/span&gt; 表示任意特殊点到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的最短距离，并记录下对应的特殊点，然后枚举所有的中转点/中转边即可计算答案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 5：&lt;a href=&#34;https://www.luogu.com.cn/problem/P4568&#34;&gt;P4568 [JLOI2011]飞行路线&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 点 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 边有向带权图，要从 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，可以指定最多 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 条边的边权为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，求最短路。&lt;span class=&#34;math inline&#34;&gt;\(2\le n\le 10^4\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le m\le 5\times 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(0\le k\le 10\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;技巧：&lt;strong&gt;分层图&lt;/strong&gt;，考虑到 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 很小，因此暴力将整张图变成 &lt;span class=&#34;math inline&#34;&gt;\(k + 1\)&lt;/span&gt; 层，对每层内的点连边以及从上层点向下一层点连 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 权边，这样每次从上层到下层都表示指定一条边的边权为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。然后直接从最上层的起点跑最短路即可，答案一定在最下层的终点。&lt;/p&gt;
&lt;p&gt;当然若是像 &lt;a href=&#34;https://www.luogu.com.cn/problem/P6190&#34;&gt;P6190 [NOI Online #1 入门组] 魔法&lt;/a&gt; 这样的点数很小而“看上去的层数”极大的题，请考虑使用 Floyd + 矩阵快速幂。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 6：&lt;a href=&#34;https://atcoder.jp/contests/abc237/tasks/abc237_e&#34;&gt;ABC237E - Skiing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;滑雪场有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个空地，空地之间有 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条赛道。每个空地有海拔 &lt;span class=&#34;math inline&#34;&gt;\(h_i\)&lt;/span&gt;，高桥君从点 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 开始滑雪。假设滑的赛道为 &lt;span class=&#34;math inline&#34;&gt;\(x\to y\)&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(h_x &amp;gt; h_y\)&lt;/span&gt;，愉悦指数增加 &lt;span class=&#34;math inline&#34;&gt;\(h_x - h_y\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(h_x\le h_y\)&lt;/span&gt;，愉悦指数减少 &lt;span class=&#34;math inline&#34;&gt;\(2(h_y - h_x)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求能获得的最大愉悦指数。&lt;span class=&#34;math inline&#34;&gt;\(2\le n\le 2\times 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n-1\le m\le \min(2\times 10^5, n(n-1)/2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;建出图来发现是个带负权边的最长路，&lt;del&gt;虽然说出题人不讲武德放 SPFA 过了&lt;/del&gt;，但是考虑复杂度正确的方法。&lt;/p&gt;
&lt;p&gt;发现如果将所有的边权取负值，则 &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; 天然满足势能的性质，所以修改边权之后跑 Dijkstra 即可。&lt;/p&gt;
&lt;h2 id=&#34;差分约束&#34;&gt;差分约束&lt;/h2&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;差分约束系统&lt;/strong&gt;是一个特殊的 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 元一次不等式组，其包含 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个变量 &lt;span class=&#34;math inline&#34;&gt;\(x_1,\cdots,x_n\)&lt;/span&gt; 以及 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个形如 &lt;span class=&#34;math inline&#34;&gt;\(x_i - x_j\le c_k\)&lt;/span&gt; 的约束条件，其中 &lt;span class=&#34;math inline&#34;&gt;\(c_k\in\mathbb R\)&lt;/span&gt;。现在要求求出一组解或者判断无解。&lt;/p&gt;
&lt;p&gt;我们发现，每个约束条件可以变为 &lt;span class=&#34;math inline&#34;&gt;\(x_i\le x_j + c_k\)&lt;/span&gt;，这个形式类似于单源最短路中的三角形不等式 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}_v\le \mathrm{dis}_u+w(u,v)\)&lt;/span&gt;。因此对于上面的约束条件，不妨连边 &lt;span class=&#34;math inline&#34;&gt;\((j,i,c_k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后从超级源点 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 向每个点连 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 权边，跑单源最短路。若遇到了负环，则无解，否则 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{dis}\)&lt;/span&gt; 数组就是合法的一组解。&lt;/p&gt;
&lt;p&gt;由于 &lt;span class=&#34;math inline&#34;&gt;\(c_k\)&lt;/span&gt; 常常可以为负，所以解决这个问题的上界为 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;性质及应用&#34;&gt;性质及应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于不等号为大于等于号的情况，可以考虑不等式两边同乘 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(x_i = x_j\)&lt;/span&gt; 的限制可以转化为 &lt;span class=&#34;math inline&#34;&gt;\(x_i - x_j\le 0\land x_j - x_i\le 0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;对于一组解 &lt;span class=&#34;math inline&#34;&gt;\(\boldsymbol x = (a_1, a_2,\cdots, a_n)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(\boldsymbol x&amp;#39; = (a_1 + d,\cdots, a_n + d)\)&lt;/span&gt; 也肯定是一组解，其中 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 为任意常数。因为不等式两边同时加/减并不影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 1：&lt;a href=&#34;https://www.luogu.com.cn/problem/P1993&#34;&gt;P1993 小 K 的农场&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;求解差分约束系统，每条约束形如 &lt;span class=&#34;math inline&#34;&gt;\(x_i - x_j\le c\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x_i - x_j\ge c\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x_i = x_j\)&lt;/span&gt;。判断有解性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以进行如下转化：&lt;span class=&#34;math inline&#34;&gt;\(x_i-x_j\ge c\iff x_j - x_i\le -c\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x_i = x_j\iff x_i - x_j\le 0\land x_i - x_j\ge 0\)&lt;/span&gt;。于是所有的约束条件都能归约到最基本的上面，跑个 SPFA 判负环即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 2：&lt;a href=&#34;https://www.luogu.com.cn/problem/P4926&#34;&gt;P4926 倍杀测量者&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个约束系统，求一个最大正实数 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 使得下面约束系统无解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_a&amp;gt; (k_i-T)x_b\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_a(k_i+T)&amp;gt;x_b\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x_a=c_i\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 肯定满足单调性，可以二分。若 &lt;span class=&#34;math inline&#34;&gt;\(T = 0\)&lt;/span&gt; 时该系统仍然有解则输出 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;然后考虑这种不等式怎么进行求解，发现我们对不等号两边&lt;strong&gt;取对数&lt;/strong&gt;之后有 &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
x_a&amp;gt;(k_i-T)x_b&amp;amp;\iff \log x_a\ge \log(k_i - T) + \log x_b\\
x_a(k_i-T)x_b&amp;amp;\iff \log x_a\ge \log x_b -  \log(k_i - T)\\
x_a=c_i&amp;amp;\iff\log x_a - \log x_S\ge \log c_i\land \log x_S - \log x_a\ge -\log c_i
\end{aligned}
\]&lt;/span&gt; 然后就变成了一个正常的差分约束系统，直接跑 SPFA 最长路即可，有正环则说明&lt;del&gt;有人女装&lt;/del&gt;系统无解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 3：&lt;a href=&#34;https://www.luogu.com.cn/problem/P2474&#34;&gt;P2474 [SCOI2008]天平&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个砝码，重量 &lt;span class=&#34;math inline&#34;&gt;\(\in\{1,2,3\}\)&lt;/span&gt;。清楚部分砝码间的重量大小关系。现已知砝码 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 放在天平左边，现在要挑出一对砝码 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; 放在天平右边。问分别有多少种选法能使得左边重/一样重/右边重。要求 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意到这些砝码可能是没有办法求出一个确切的重量值的，所以只能考虑其相对关系。先考虑 &lt;span class=&#34;math inline&#34;&gt;\(A+B&amp;gt;C+D\)&lt;/span&gt; 的情况，其可以转化为 &lt;span class=&#34;math inline&#34;&gt;\(A-C&amp;gt;D-B\lor A-D&amp;gt;C-B\)&lt;/span&gt;。判断其成立就考虑 &lt;span class=&#34;math inline&#34;&gt;\(\min\{A-C\}&amp;gt;\max\{B-D\}\)&lt;/span&gt; 之类的即可。用 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 维护一下 &lt;span class=&#34;math inline&#34;&gt;\(\max\{i-j\}\)&lt;/span&gt;，用 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 维护一下 &lt;span class=&#34;math inline&#34;&gt;\(\min\{i - j\}\)&lt;/span&gt;。剩余情况同理。&lt;/p&gt;
&lt;p&gt;初始化：对于 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;gt;j\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j} = 2\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(g_{i,j} = 1\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(i &amp;lt; j\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j} = -1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(g_{i,j} = -2\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(i=j\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j} = g_{i,j}=0\)&lt;/span&gt;，对于问号，&lt;span class=&#34;math inline&#34;&gt;\(f_{i,j} = 2\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(g_{i,j} = -2\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;求 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(g_{i,j}\)&lt;/span&gt; 可以使用 Floyd。注意 &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,j} = \min_k\{f_{i,k} + f_{k,j} \}\\
g_{i,j} = \max_k\{g_{i,k} + g_{k,j}\}
\end{aligned}
\]&lt;/span&gt; 理解：其实写出 &lt;span class=&#34;math inline&#34;&gt;\(x_i - x_j\le c\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(x_i - x_j\ge c\)&lt;/span&gt; 后发现就是最短路和最长路的模型。&lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; 暴力枚举即可。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n^3)\)&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 4：&lt;a href=&#34;https://www.luogu.com.cn/problem/P5590&#34;&gt;P5590 赛车游戏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 点 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 边有向图，要求给所有边赋权 &lt;span class=&#34;math inline&#34;&gt;\([1, 9]\)&lt;/span&gt; 间的整数使得 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的所有路径等长。要求 &lt;span class=&#34;math inline&#34;&gt;\(O(nm)\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;结论题&lt;/strong&gt;。&lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的所有路径要等长那就只能等于最短路。所以&lt;strong&gt;一定有 &lt;span class=&#34;math inline&#34;&gt;\(d_v = d_u + w\)&lt;/span&gt;&lt;/strong&gt;。这个东西我们可以建出形如 &lt;span class=&#34;math inline&#34;&gt;\(1\le d_v - d_u\le 9\)&lt;/span&gt; 的不等式组。所以可以差分约束一波。注意去掉多余的边（不在 &lt;span class=&#34;math inline&#34;&gt;\(1\to n\)&lt;/span&gt; 路径上的）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 5：咕咕。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;图的连通性相关&#34;&gt;图的连通性相关&lt;/h2&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;
&lt;p&gt;对于有向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强连通：对于一张有向图，若每个点互相可达，则称为强连通。&lt;/li&gt;
&lt;li&gt;强连通分量：极大的强连通子图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于无向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点割集：若删掉该集合的点后图不连通，则称为点割集。&lt;strong&gt;大小为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的点割集就是割点&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点联通度：若 &lt;span class=&#34;math inline&#34;&gt;\(k + 1\le |V|\)&lt;/span&gt; 且不存在大小为 &lt;span class=&#34;math inline&#34;&gt;\(k - 1\)&lt;/span&gt; 的点割集，则称该图 &lt;span class=&#34;math inline&#34;&gt;\(k-\)&lt;/span&gt; 点联通。最大的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，即最小点割集合的大小。&lt;/li&gt;
&lt;li&gt;边割集/边联通度：类似。割边又被称为桥。&lt;/li&gt;
&lt;li&gt;点双连通：没有割点的连通图是点双连通的。&lt;/li&gt;
&lt;li&gt;边双连通：没有桥的连通图是边双连通的。&lt;/li&gt;
&lt;li&gt;点双连通分量：极大的点双连通子图（简称点双）。&lt;/li&gt;
&lt;li&gt;边双连通分量：极大的边双连通子图（简称边双）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;强连通分量scc&#34;&gt;强连通分量（SCC）&lt;/h3&gt;
&lt;p&gt;使用 Tarjan 算法做到 &lt;span class=&#34;math inline&#34;&gt;\(O(n+m)\)&lt;/span&gt; 求解强连通分量。&lt;/p&gt;
&lt;h4 id=&#34;dfs-生成树&#34;&gt;dfs 生成树&lt;/h4&gt;
&lt;p&gt;首先要了解这样一个东西：有向图的 dfs 生成树。&lt;/p&gt;
&lt;p&gt;生成树是什么意思呢？大概就是随便从一个点开始遍历，然后将遍历的过程形成一个树形结构。&lt;/p&gt;
&lt;p&gt;于是原图的边可以分为如下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树边：就是在 dfs 生成树的边，当一个点搜素找到一个没有访问的点时生成。（黑色）&lt;/li&gt;
&lt;li&gt;返祖边：指向祖先节点的边。（红色）&lt;/li&gt;
&lt;li&gt;横叉边：搜索时遇到的&lt;strong&gt;访问过的但是不是自己祖先&lt;/strong&gt;的点。（蓝色）&lt;/li&gt;
&lt;li&gt;前向边：搜索时遇到子树节点时的边。（绿色）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src=&#34;https://yangty-pic.oss-cn-beijing.aliyuncs.com/tarjan1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;tarjan1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;有如下引理：假设 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 是某个 SCC 在 dfs 生成树中第一个遇到的点，则 SCC 剩余的点肯定在子树内，&lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 称为 SCC 的根。证明可用反证法，不再展开。&lt;/p&gt;
&lt;h4 id=&#34;tarjan-算法&#34;&gt;Tarjan 算法&lt;/h4&gt;
&lt;p&gt;构造 dfs 生成树的同时维护一个栈，表示&lt;strong&gt;访问过的还未加入 SCC 的点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于每个点，维护两个值：&lt;span class=&#34;math inline&#34;&gt;\(\operatorname{dfn}(u)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{low}(u)\)&lt;/span&gt;，分别代表时间戳和 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 或其子树内节点能回溯到的&lt;strong&gt;最早的还在栈中的节点的 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{dfn}\)&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;于是有&lt;/p&gt;
&lt;pre class=&#34;plain&#34;&gt;&lt;code&gt;low[u] = min {
    dfn[u],
    low[v], (u, v) 为树边，v 为 u 儿子
    dfn[v], (u, v) 为指向栈中节点的非横叉边
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;虽说有些时候直接 &lt;code&gt;low[u] = min(low[u], low[v])&lt;/code&gt; 也不会出事，但这样是不正确的写法。&lt;/p&gt;
&lt;p&gt;发现一个 SCC 中只存在一个 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 使得 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{dfn}(u) = \operatorname{low}(u)\)&lt;/span&gt;，回溯的过程中判定，栈中 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 往后的节点构成 SCC。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; dfn[maxn], low[maxn], ins[maxn], stk[maxn], top;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; dfnClock, scc[maxn], sccCnt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; tarjan(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u) {&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dfn[u] = low[u] = ++dfnClock;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    stk[++top] = u, ins[u] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    GO(u, head) {&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!e[i].w) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!dfn[v])&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            tarjan(v), low[u] = min(low[u], low[v]);&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (ins[v])&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            low[u] = min(low[u], dfn[v]);&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (low[u] == dfn[u]) {&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ++sccCnt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now = stk[top--];&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            ins[now] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            scc[now] = sccCnt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (now == u) &lt;span class=&#34;cf&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;应用-2&#34;&gt;应用&lt;/h4&gt;
&lt;p&gt;可以将一些互相可达的点缩在一起，一张图缩完后会变成一张 DAG，方便进行 dp。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题：&lt;a href=&#34;https://www.luogu.com.cn/problem/P3387&#34;&gt;P3387 【模板】缩点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。&lt;span class=&#34;math inline&#34;&gt;\(1\le n \le 10^4\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le m \le 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(0\le a_i\le 10^3\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于点的贡献只会被计算一次，不难想到将互相可达的点缩在一起，顺路累加其全部贡献。而这些互相可达的点就是一个强连通分量，将原图缩点之后的结构一定是个 DAG（因为有环就会产生 SCC），在 DAG 上 dp 即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题：&lt;a href=&#34;https://www.luogu.com.cn/problem/P2341&#34;&gt;P2341 [USACO03FALL / HAOI2006] 受欢迎的牛 G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每头奶牛都梦想成为牛棚里的明星。被所有奶牛喜欢的奶牛就是一头明星奶牛。所有奶牛都是自恋狂，每头奶牛总是喜欢自己的。奶牛之间的“喜欢”是可以传递的——如果 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 喜欢 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 喜欢 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;，那么 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 也喜欢 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;。牛栏里共有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 头奶牛，给定一些奶牛之间的爱慕关系，请你算出有多少头奶牛可以当明星。&lt;span class=&#34;math inline&#34;&gt;\(1\le N\le10^4\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le M\le5\times 10^4\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然先缩点，然后爱慕关系就变成了一张 DAG。出度为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的 SCC 多于 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 个时不满足“被所有奶牛喜欢”的限制，于是没有，否则该 SCC 内的所有奶牛都是明星。&lt;/p&gt;
&lt;h3 id=&#34;双连通分量bcc&#34;&gt;双连通分量（BCC）&lt;/h3&gt;
&lt;p&gt;对于无向图而言的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点双连通&lt;strong&gt;不具有&lt;/strong&gt;传递性，即 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 点双连通、&lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 点双连通并不能推出 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 点双连通（考虑 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 为割点的情况）&lt;/li&gt;
&lt;li&gt;相反地，边双连通&lt;strong&gt;具有&lt;/strong&gt;传递性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;双连通分量依旧可以使用 Tarjan 算法求解，但是要注意到&lt;strong&gt;无向图中是不存在横叉边&lt;/strong&gt;的（考虑若存在，则其一定先被反向遍历）。&lt;/p&gt;
&lt;h4 id=&#34;边双连通分量e-bcc&#34;&gt;边双连通分量（e-BCC）&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\operatorname{dfn}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{low}\)&lt;/span&gt; 的定义与上面的类似。&lt;/p&gt;
&lt;p&gt;则对于 dfs 树上的一条边 &lt;span class=&#34;math inline&#34;&gt;\((u, v)\)&lt;/span&gt;，其会是割边当且仅当 &lt;span class=&#34;math display&#34;&gt;\[
\operatorname{dfn}(u) &amp;lt; \operatorname{low}(v)
\]&lt;/span&gt; 意义为，从子树 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 出发， 在不经过 &lt;span class=&#34;math inline&#34;&gt;\((u, v)\)&lt;/span&gt; 的前提下无法走到比 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 更早访问的节点。这条边 &lt;span class=&#34;math inline&#34;&gt;\((u, v)\)&lt;/span&gt; 显然就应该是桥。&lt;/p&gt;
&lt;p&gt;缩点也不说了，好缩的。割边会缩成若干个 e-BCC，&lt;strong&gt;最后的结果是一棵树/森林&lt;/strong&gt;（因为不能有环），&lt;strong&gt;一个点仅会属于一个 e-BCC，桥不属于任何 e-BCC&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; tarjan(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; last) {&lt;span class=&#34;co&#34;&gt;//last 为上一条边的编号，判父亲用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dfn[u] = low[u] = ++dfnClock;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = head[u]; i; i = nxt[i]) {&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v = to[i];&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!dfn[v]) {&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            tarjan(v, i);&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (low[v] &amp;gt; dfn[u])&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                bridge[i] = bridge[i ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;span class=&#34;co&#34;&gt;//这里是标记桥&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            low[u] = min(low[u], low[v]);&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i != (last ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;span class=&#34;co&#34;&gt;//注意判一下是不是 dfs 树上的父亲&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            low[u] = min(low[u], dfn[v]);&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经典题：问最多添加多少条边可以使得图边双连通。答案为缩完点之后的叶子个数除以二向上取整。构造的话考虑每次连两个叶子起来就可以形成一个环，环上的都会被消掉。&lt;/p&gt;
&lt;h4 id=&#34;点双连通分量v-bcc&#34;&gt;点双连通分量（v-BCC）&lt;/h4&gt;
&lt;p&gt;定义依旧类似。判断一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 是否为割点的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 为 dfs 树的根节点，则其只要有多于一个子树，其就是割点。（考虑去掉根之后两个子树不连通）&lt;/li&gt;
&lt;li&gt;否则，考虑 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 的子节点，则 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 为割点当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{dfn}(u)\le \operatorname{low}(v)\)&lt;/span&gt;。即，&lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 子树内的点只能最多回到 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，不能再往上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求割点的代码：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; tarjan(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u) {&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dfn[u] = low[u] = ++cnt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; v : G[u]) {&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!dfn[v]) {&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            tarjan(v);&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            low[u] = min(low[u], low[v]);&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (low[v] &amp;gt;= dfn[u] &amp;amp;&amp;amp; u != root) {&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                ans += (!cut[u]);&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                cut[u] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            child += (u == root);&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        low[u] = min(low[u], dfn[v]);&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (u == root &amp;amp;&amp;amp; child &amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans++, cut[u] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个东西的缩点参见圆方树，这里不展开了。&lt;/p&gt;
&lt;h4 id=&#34;应用-3&#34;&gt;应用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;例题：&lt;a href=&#34;https://www.luogu.com.cn/problem/P3388&#34;&gt;P3388 【模板】割点（割顶）&lt;/a&gt; 求图的割点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据上文判断方法。&lt;/p&gt;
&lt;h2 id=&#34;k-短路&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 短路&lt;/h2&gt;
&lt;p&gt;问题描述：给定一张有向图，求从 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的路径中第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 短的那条的长度。&lt;/p&gt;
&lt;h3 id=&#34;a-star-算法&#34;&gt;A-star 算法&lt;/h3&gt;
&lt;p&gt;A* 算法是一种启发式搜索，其定义了当前态 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的估价函数 &lt;span class=&#34;math inline&#34;&gt;\(f(x) = g(x) + h(x)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(g(x)\)&lt;/span&gt; 是从初态到当前态的距离函数，&lt;span class=&#34;math inline&#34;&gt;\(h(x)\)&lt;/span&gt; 是从当前态到终点的估计距离函数。&lt;/p&gt;
&lt;p&gt;我们的操作流程是，每次取出最优的 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt;（用优先队列实现），然后扩展其所有的子状态。&lt;/p&gt;
&lt;p&gt;在 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 短路问题中，令 &lt;span class=&#34;math inline&#34;&gt;\(h(x)\)&lt;/span&gt; 为当前点到终点的最短路，这个可以通过建反图然后从 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 做 Dijkstra 实现。&lt;/p&gt;
&lt;p&gt;然后一个状态显然需要定义为 &lt;span class=&#34;math inline&#34;&gt;\((x, g(x))\)&lt;/span&gt;，维护当前点和已经走过的路。&lt;/p&gt;
&lt;p&gt;开始时，将 &lt;span class=&#34;math inline&#34;&gt;\((s, 0)\)&lt;/span&gt; 加入优先队列，然后每次取出 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 最小的状态，然后对其进行扩展。当经过 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次时，其必为最短路。&lt;/p&gt;
&lt;p&gt;该做法的时间复杂度为最坏 &lt;span class=&#34;math inline&#34;&gt;\(O(nk\log n)\)&lt;/span&gt;，当图为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 元环的时候达到上界。&lt;/p&gt;
&lt;h3 id=&#34;可持久化可并堆做法&#34;&gt;可持久化可并堆做法&lt;/h3&gt;
&lt;p&gt;可以做到 &lt;span class=&#34;math inline&#34;&gt;\(O((n+m)\log m + k\log k)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先在反图上从 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 点开始跑单源最短路，建立出任意一棵最短路树 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;性质 1：对于一条 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的路径边集 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;，去掉 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 中和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的交集，记为 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt;。那么 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt; 中任意相邻的两条边 &lt;span class=&#34;math inline&#34;&gt;\(e\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 一定满足 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 的起点在 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 中为 &lt;span class=&#34;math inline&#34;&gt;\(e\)&lt;/span&gt; 的终点的祖先或者为相同点。因为 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 中 &lt;span class=&#34;math inline&#34;&gt;\(e\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 之间由树边相连或者直接相连。&lt;/p&gt;
&lt;p&gt;性质 2：对于不在 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 中的边 &lt;span class=&#34;math inline&#34;&gt;\(e = (u,v,w)\)&lt;/span&gt;，定义 &lt;span class=&#34;math inline&#34;&gt;\(\Delta_e = \mathrm{dis}_v + w - \mathrm{dis}_u\)&lt;/span&gt;，即选这条边的路径与最短路的差。设 &lt;span class=&#34;math inline&#34;&gt;\(L_P\)&lt;/span&gt; 为路径长度，则有 &lt;span class=&#34;math display&#34;&gt;\[
L_P = \mathrm{dis}_s + \sum_{e\in P&amp;#39;}\Delta e
\]&lt;/span&gt; 性质 3：对于一个合法的 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt;，其能唯一对应一个 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 上两点间的路径是唯一的。&lt;/p&gt;
&lt;p&gt;性质 1 告诉了我们生成所有合法 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt; 的方法。&lt;/p&gt;
&lt;p&gt;性质 2 告诉了我们已知 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt; 后求出 &lt;span class=&#34;math inline&#34;&gt;\(L_P\)&lt;/span&gt; 的方法。&lt;/p&gt;
&lt;p&gt;性质 3 告诉了我们 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt; 是唯一对应的。&lt;/p&gt;
&lt;p&gt;所以我们要求的就是 &lt;span class=&#34;math inline&#34;&gt;\(L_P\)&lt;/span&gt; 的值第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 小的集合 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt;。考虑使用一个小根堆来维护所有的边集 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt;，具体地，考虑维护边集 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt; 的最后一个条边的编号以及其 &lt;span class=&#34;math inline&#34;&gt;\(\sum\Delta e\)&lt;/span&gt;，以 &lt;span class=&#34;math inline&#34;&gt;\(\sum\Delta e\)&lt;/span&gt; 为关键字。&lt;/p&gt;
&lt;p&gt;初始时 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt; 为空集，即表示我们取的是最短路。&lt;/p&gt;
&lt;p&gt;每次取出最小 &lt;span class=&#34;math inline&#34;&gt;\(\sum\Delta e\)&lt;/span&gt; 的边集 &lt;span class=&#34;math inline&#34;&gt;\(P&amp;#39;\)&lt;/span&gt;，设最后一条边的起点为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，则我们可以这样进行扩展：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;替换以 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 为起点的这条边为一条刚好大于等于他的非树边。&lt;/li&gt;
&lt;li&gt;尾部接上一条起点为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的边的终点在 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 中的祖先（或者自己）连出去的所有非树边中的最小边。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;维护祖先出去的所有非树边的最小边可以考虑使用可并堆，然后由于需要保存所有节点的信息，故考虑可持久化，然后本题完结。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>解题报告 P1850 换教室</title>
        <link>https://oi.imyangty.com/sol-luogu-p1850/</link>
        <pubDate>Tue, 24 Nov 2020 22:32:55 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-luogu-p1850/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg36.webp" alt="Featured image of post 解题报告 P1850 换教室" /&gt;&lt;h2 id=&#34;题意&#34;&gt;题意&lt;/h2&gt;
&lt;p&gt;对于 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个时间段中的每一个时间段 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，都有两门内容相同的课程分别在 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; 教室上课，一开始被默认分到 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 上课，对于每个时间段 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 可以提交一个申请将教室从 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 换到 &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt;，申请通过的概率为 &lt;span class=&#34;math inline&#34;&gt;\(k_i\)&lt;/span&gt;，一共可以提交 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个申请。整个学校是一张无向图，求上课需要在教室间穿梭的期望最短路。&lt;/p&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;p&gt;期望 dp，考虑设计状态。注意到我们可以考虑当前上到了第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 门课，提交了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 份申请。然而发现对于某个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，是否提交换教室的申请具有后效性，因此定义 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j,k}\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(k\in\lbrace0,1\rbrace\)&lt;/span&gt;）来表示当前在第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个时间段提交了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 份申请，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个时间段的教室有没有提交申请的期望最短路值。 考虑转移：如果这节课不提交申请，那么问题就变得简单：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i,j,0}=\min(f_{i-1,j,0}+dis_{c_{i-1},c_i},f_{i-1,j,1}+dis_{d_{i-1},c_i}\cdot k_{i-1}+dis_{c_{i-1},c_i}\cdot(1-k_{i-1}))
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个方程的意思就是考虑从前一个教室转移过来的情况，由于前一个换教室的申请有 &lt;span class=&#34;math inline&#34;&gt;\(k_{i-1}\)&lt;/span&gt; 的概率通过，但是也有 &lt;span class=&#34;math inline&#34;&gt;\(1-k_{i-1}\)&lt;/span&gt; 的概率不通过，所以为 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1,j,1}+dis_{d_{i-1},c_i}\cdot k_{i-1}+dis_{c_{i-1},c_i}\cdot(1-k_{i-1})\)&lt;/span&gt; 对于提交申请，就需要分六种情况讨论，如果从 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1,j-1,1}\)&lt;/span&gt; 转移来，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这节课和上节课都通过了：期望加上 &lt;span class=&#34;math inline&#34;&gt;\(dis_{d_{i-1},d_i}\cdot k_i\cdot k_{i-1}\)&lt;/span&gt;（乘法原理）&lt;/li&gt;
&lt;li&gt;这节课通过了，上节课没通过：&lt;span class=&#34;math inline&#34;&gt;\(dis_{c_{i-1},d_i}\cdot k_i\cdot (1-k_{i-1})\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;这节课没通过，上节课通过了：&lt;span class=&#34;math inline&#34;&gt;\(dis_{d_{i-1},c_{i}}\cdot (1-k_i)\cdot k_i\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;这节课和上节课都没通过：&lt;span class=&#34;math inline&#34;&gt;\(dis_{c_{i-1},c_{i}}\cdot(1-k_i)\cdot(1-k_{i-1})\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果从 &lt;span class=&#34;math inline&#34;&gt;\(f_{i-1,j-1,0}\)&lt;/span&gt; 转移来，则只需考虑这节课的申请通不通过，就是&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{i-1,j-1,0}+dis_{c_{i-1},d_i}\cdot k_i+dis_{c_{i-1},c_i}\cdot (1-k_i)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所以总的方程式就为：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;;i&amp;lt;=n;++i)&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        f[i][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]=f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]];&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;j&amp;lt;=m;++j)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        {&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            f[i][j][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]=min(f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]],&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                            f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]+dis[d[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]));&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(j)&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                f[i][j][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]=min(f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i])+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][d[i]]*k[i],&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]+&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;])*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i])+&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][d[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;])*k[i]+&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[d[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i])+&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[d[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][d[i]]*k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]*k[i]);&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;坑点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图里面有重边和自环，要特判&lt;/li&gt;
&lt;li&gt;由于同一个教室里面不需要走路，所以 &lt;span class=&#34;math inline&#34;&gt;\(dis_{i,i}\)&lt;/span&gt; 的初值要设为 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt; 类型进行 &lt;code&gt;memset&lt;/code&gt; 初始化时要用 127&lt;/li&gt;
&lt;li&gt;统计答案时，由于申请可以一条都不提交，所以答案为 &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle\min_{i\in[0,m],k\in\lbrace 0,1\rbrace}\lbrace f_{n,i,k} \rbrace\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxv=&lt;span class=&#34;dv&#34;&gt;305&lt;/span&gt;,maxn=&lt;span class=&#34;dv&#34;&gt;2005&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n,m,v,e;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; c[maxn],d[maxn];&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt; k[maxn],f[maxn][maxn][&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; dis[maxv][maxv];&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;kw&#34;&gt;typename&lt;/span&gt; T&amp;gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; T min(T a,T b){&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a&amp;lt;b?a:b;}&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    scanf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m,&amp;amp;v,&amp;amp;e);&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;++i)&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        scanf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,c+i);&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;++i)&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        scanf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,d+i);&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;++i)&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        scanf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%lf&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,k+i);&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(dis,&lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;,&lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt;(e--)&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a,b,w;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        scanf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,&amp;amp;a,&amp;amp;b,&amp;amp;w);&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        dis[a][b]=dis[b][a]=min(dis[a][b],w);&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;i&amp;lt;=v;++i)&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        dis[i][i]=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; r=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;r&amp;lt;=v;r++)&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; p=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;p&amp;lt;=v;p++)&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; q=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;q&amp;lt;=v;q++)&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                dis[p][q]=min(dis[p][q],dis[p][r]+dis[r][q]);&lt;/span&gt;
&lt;span id=&#34;cb2-34&#34;&gt;&lt;a href=&#34;#cb2-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(f,&lt;span class=&#34;dv&#34;&gt;127&lt;/span&gt;,&lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; f);&lt;/span&gt;
&lt;span id=&#34;cb2-35&#34;&gt;&lt;a href=&#34;#cb2-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]=f[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-36&#34;&gt;&lt;a href=&#34;#cb2-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;;i&amp;lt;=n;++i)&lt;/span&gt;
&lt;span id=&#34;cb2-37&#34;&gt;&lt;a href=&#34;#cb2-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb2-38&#34;&gt;&lt;a href=&#34;#cb2-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        f[i][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]=f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]];&lt;/span&gt;
&lt;span id=&#34;cb2-39&#34;&gt;&lt;a href=&#34;#cb2-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;j&amp;lt;=m;++j)&lt;/span&gt;
&lt;span id=&#34;cb2-40&#34;&gt;&lt;a href=&#34;#cb2-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        {&lt;/span&gt;
&lt;span id=&#34;cb2-41&#34;&gt;&lt;a href=&#34;#cb2-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            f[i][j][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]=min(f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]],&lt;/span&gt;
&lt;span id=&#34;cb2-42&#34;&gt;&lt;a href=&#34;#cb2-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                            f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]+dis[d[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]));&lt;/span&gt;
&lt;span id=&#34;cb2-43&#34;&gt;&lt;a href=&#34;#cb2-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(j)&lt;/span&gt;
&lt;span id=&#34;cb2-44&#34;&gt;&lt;a href=&#34;#cb2-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                f[i][j][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]=min(f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i])+dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][d[i]]*k[i],&lt;/span&gt;
&lt;span id=&#34;cb2-45&#34;&gt;&lt;a href=&#34;#cb2-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                f[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]+&lt;/span&gt;
&lt;span id=&#34;cb2-46&#34;&gt;&lt;a href=&#34;#cb2-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;])*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i])+&lt;/span&gt;
&lt;span id=&#34;cb2-47&#34;&gt;&lt;a href=&#34;#cb2-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[c[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][d[i]]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;])*k[i]+&lt;/span&gt;
&lt;span id=&#34;cb2-48&#34;&gt;&lt;a href=&#34;#cb2-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[d[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][c[i]]*k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]*(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;-k[i])+&lt;/span&gt;
&lt;span id=&#34;cb2-49&#34;&gt;&lt;a href=&#34;#cb2-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                                dis[d[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]][d[i]]*k[i-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]*k[i]);&lt;/span&gt;
&lt;span id=&#34;cb2-50&#34;&gt;&lt;a href=&#34;#cb2-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb2-51&#34;&gt;&lt;a href=&#34;#cb2-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb2-52&#34;&gt;&lt;a href=&#34;#cb2-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt; ans=&lt;span class=&#34;fl&#34;&gt;1e18&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-53&#34;&gt;&lt;a href=&#34;#cb2-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;i&amp;lt;=m;i++)&lt;/span&gt;
&lt;span id=&#34;cb2-54&#34;&gt;&lt;a href=&#34;#cb2-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans=min(ans,min(f[n][i][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;],f[n][i][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]));&lt;/span&gt;
&lt;span id=&#34;cb2-55&#34;&gt;&lt;a href=&#34;#cb2-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%.2lf\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,ans);&lt;/span&gt;
&lt;span id=&#34;cb2-56&#34;&gt;&lt;a href=&#34;#cb2-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-57&#34;&gt;&lt;a href=&#34;#cb2-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>解题报告 P1613 跑路</title>
        <link>https://oi.imyangty.com/sol-luogu-p1613/</link>
        <pubDate>Tue, 15 Sep 2020 21:31:34 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-luogu-p1613/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg34.webp" alt="Featured image of post 解题报告 P1613 跑路" /&gt;&lt;h2 id=&#34;题目内容&#34;&gt;题目内容&lt;/h2&gt;
&lt;p&gt;有向图，边权为 1，可以在 1 秒内跳 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; km，求从 1 到 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的最短时间&lt;/p&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;倍增优化 dp。 数据范围很小，可以先预处理出 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 之间是否存在长度为 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 的路径，然后直接更新两点间路径长度，跑一遍 Floyd 即可。 预处理的具体方法是枚举中转点 &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;，如果 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; 之间和 &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 之间都有长度为 &lt;span class=&#34;math inline&#34;&gt;\(2^{k-1}\)&lt;/span&gt; 的路径的话，&lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 之间就必然有长度为 &lt;span class=&#34;math inline&#34;&gt;\(2^k\)&lt;/span&gt; 的路径&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; ll;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; ll read()&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll s = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        s = &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; * s + c - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; s;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; ll min(ll a,ll b)&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a&amp;lt;b?a:b;&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn=&lt;span class=&#34;dv&#34;&gt;53&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;ll dis[maxn][maxn],n,m;&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; G[maxn][maxn][&lt;span class=&#34;dv&#34;&gt;64&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(dis,&lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;,&lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    n=read(),m=read();&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt;(m--)&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x=read(),y=read();&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        G[x][y][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]=&lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        dis[x][y]=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;k&amp;lt;=&lt;span class=&#34;dv&#34;&gt;64&lt;/span&gt;;k++)&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;x&amp;lt;=n;x++)&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; y=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;y&amp;lt;=n;y++)&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; z=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;z&amp;lt;=n;z++)&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(G[x][z][k-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] &amp;amp;&amp;amp; G[z][y][k-&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        G[x][y][k]=&lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;,dis[x][y]=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;span class=&#34;co&#34;&gt;//预处理两点之间是否有 2^k 路径&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-43&#34;&gt;&lt;a href=&#34;#cb1-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;x&amp;lt;=n;x++)&lt;/span&gt;
&lt;span id=&#34;cb1-44&#34;&gt;&lt;a href=&#34;#cb1-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; y=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;y&amp;lt;=n;y++)&lt;/span&gt;
&lt;span id=&#34;cb1-45&#34;&gt;&lt;a href=&#34;#cb1-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; z=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;z&amp;lt;=n;z++)&lt;/span&gt;
&lt;span id=&#34;cb1-46&#34;&gt;&lt;a href=&#34;#cb1-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                dis[x][y]=min(dis[x][y],dis[x][z]+dis[z][y]);&lt;/span&gt;
&lt;span id=&#34;cb1-47&#34;&gt;&lt;a href=&#34;#cb1-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%lld\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,dis[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][n]);&lt;/span&gt;
&lt;span id=&#34;cb1-48&#34;&gt;&lt;a href=&#34;#cb1-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-49&#34;&gt;&lt;a href=&#34;#cb1-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>解题报告 P1266 速度限制</title>
        <link>https://oi.imyangty.com/sol-luogu-p1266/</link>
        <pubDate>Thu, 10 Sep 2020 22:01:37 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-luogu-p1266/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg30.webp" alt="Featured image of post 解题报告 P1266 速度限制" /&gt;&lt;h2 id=&#34;题目内容&#34;&gt;题目内容&lt;/h2&gt;
&lt;p&gt;给出一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点的有向图（无重边），每个边有一长度和通过限速，如果进入某边时没有限速则延续之前的速度。求从0到 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; 耗时最短的路径&lt;/p&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;既然此时到达某个节点的速度开始具有后效性，那么不妨将速度记入状态中。在 Dijkstra 中直接令 &lt;span class=&#34;math inline&#34;&gt;\(d_{i,j}\)&lt;/span&gt; 表示以速度 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 进入节点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 时的最小时间花费。则进行转移时可同时进行转移。 注意的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis&lt;/code&gt; 数组也要开成 &lt;code&gt;vis[i][j]&lt;/code&gt;，因为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 具有后效性，要一并记录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt; 类型的数组可以使用 &lt;code&gt;memset(d,127,sizeof d)&lt;/code&gt; 来进行极大值的初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;priority_queue&lt;/code&gt; 使用自定义类型时需提前定义小于号（默认为大根堆，为实现小根堆需要将小于号反着写）&lt;/li&gt;
&lt;li&gt;类似于一些 dp 的输出方案，需要在 Dijkstra 转移时记录下上一状态，输出时直接递归输出即可&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; edge&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; from,to,v,l;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt; t;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    edge(){}&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    edge(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; b,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; c,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; d)&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        from=a;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        to=b;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        v=c;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        l=d;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        t=(v==&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;?-&lt;span class=&#34;fl&#34;&gt;1e8&lt;/span&gt;:(&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)l/(&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)v);&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;};&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; node&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt; d;&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now;&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v;&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    node(){}&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    node(&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt; dd,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; nnow,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; vv)&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        d=dd;&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        now=nnow;&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        v=vv;&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;};&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; node &amp;amp;a,&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; node &amp;amp;b)&lt;span class=&#34;co&#34;&gt;//重载一个假的小于号来实现小根堆&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a.d&amp;gt;b.d;&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;//城市编号从0开始 &lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn=&lt;span class=&#34;dv&#34;&gt;150&lt;/span&gt;+&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;bu&#34;&gt;std::&lt;/span&gt;vector&amp;lt;edge&amp;gt; G[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-43&#34;&gt;&lt;a href=&#34;#cb1-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n,m,t,from[maxn][&lt;span class=&#34;dv&#34;&gt;505&lt;/span&gt;],fromv[maxn][&lt;span class=&#34;dv&#34;&gt;505&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb1-44&#34;&gt;&lt;a href=&#34;#cb1-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt; d[maxn][&lt;span class=&#34;dv&#34;&gt;505&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb1-45&#34;&gt;&lt;a href=&#34;#cb1-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; vis[maxn][&lt;span class=&#34;dv&#34;&gt;505&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb1-46&#34;&gt;&lt;a href=&#34;#cb1-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-47&#34;&gt;&lt;a href=&#34;#cb1-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; add(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; from,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; to,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; l)&lt;/span&gt;
&lt;span id=&#34;cb1-48&#34;&gt;&lt;a href=&#34;#cb1-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{...}&lt;/span&gt;
&lt;span id=&#34;cb1-49&#34;&gt;&lt;a href=&#34;#cb1-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-50&#34;&gt;&lt;a href=&#34;#cb1-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; dijkstra()&lt;/span&gt;
&lt;span id=&#34;cb1-51&#34;&gt;&lt;a href=&#34;#cb1-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-52&#34;&gt;&lt;a href=&#34;#cb1-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;bu&#34;&gt;std::&lt;/span&gt;priority_queue&amp;lt;node&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb1-53&#34;&gt;&lt;a href=&#34;#cb1-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(d,&lt;span class=&#34;dv&#34;&gt;127&lt;/span&gt;,&lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt;(d));&lt;/span&gt;
&lt;span id=&#34;cb1-54&#34;&gt;&lt;a href=&#34;#cb1-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    d[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;70&lt;/span&gt;]=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-55&#34;&gt;&lt;a href=&#34;#cb1-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    q.push(node(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;70&lt;/span&gt;));&lt;/span&gt;
&lt;span id=&#34;cb1-56&#34;&gt;&lt;a href=&#34;#cb1-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty())&lt;/span&gt;
&lt;span id=&#34;cb1-57&#34;&gt;&lt;a href=&#34;#cb1-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb1-58&#34;&gt;&lt;a href=&#34;#cb1-58&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now=q.top().now,v=q.top().v;&lt;/span&gt;
&lt;span id=&#34;cb1-59&#34;&gt;&lt;a href=&#34;#cb1-59&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        q.pop();&lt;/span&gt;
&lt;span id=&#34;cb1-60&#34;&gt;&lt;a href=&#34;#cb1-60&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(!vis[now][v])&lt;/span&gt;
&lt;span id=&#34;cb1-61&#34;&gt;&lt;a href=&#34;#cb1-61&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        {&lt;/span&gt;
&lt;span id=&#34;cb1-62&#34;&gt;&lt;a href=&#34;#cb1-62&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            vis[now][v]=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-63&#34;&gt;&lt;a href=&#34;#cb1-63&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;e:G[now])&lt;/span&gt;
&lt;span id=&#34;cb1-64&#34;&gt;&lt;a href=&#34;#cb1-64&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            {&lt;/span&gt;
&lt;span id=&#34;cb1-65&#34;&gt;&lt;a href=&#34;#cb1-65&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(e.v)&lt;/span&gt;
&lt;span id=&#34;cb1-66&#34;&gt;&lt;a href=&#34;#cb1-66&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                {&lt;/span&gt;
&lt;span id=&#34;cb1-67&#34;&gt;&lt;a href=&#34;#cb1-67&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(d[e.to][e.v]&amp;gt;d[now][v]+e.t)&lt;/span&gt;
&lt;span id=&#34;cb1-68&#34;&gt;&lt;a href=&#34;#cb1-68&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    {&lt;/span&gt;
&lt;span id=&#34;cb1-69&#34;&gt;&lt;a href=&#34;#cb1-69&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        d[e.to][e.v]=d[now][v]+e.t;&lt;/span&gt;
&lt;span id=&#34;cb1-70&#34;&gt;&lt;a href=&#34;#cb1-70&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        q.push(node(d[e.to][e.v],e.to,e.v));&lt;/span&gt;
&lt;span id=&#34;cb1-71&#34;&gt;&lt;a href=&#34;#cb1-71&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        from[e.to][e.v]=now;&lt;/span&gt;
&lt;span id=&#34;cb1-72&#34;&gt;&lt;a href=&#34;#cb1-72&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        fromv[e.to][e.v]=v;&lt;/span&gt;
&lt;span id=&#34;cb1-73&#34;&gt;&lt;a href=&#34;#cb1-73&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    }&lt;/span&gt;
&lt;span id=&#34;cb1-74&#34;&gt;&lt;a href=&#34;#cb1-74&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb1-75&#34;&gt;&lt;a href=&#34;#cb1-75&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-76&#34;&gt;&lt;a href=&#34;#cb1-76&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                {&lt;/span&gt;
&lt;span id=&#34;cb1-77&#34;&gt;&lt;a href=&#34;#cb1-77&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(d[e.to][v]&amp;gt;d[now][v]+(&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)e.l/(&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)v)&lt;/span&gt;
&lt;span id=&#34;cb1-78&#34;&gt;&lt;a href=&#34;#cb1-78&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    {&lt;/span&gt;
&lt;span id=&#34;cb1-79&#34;&gt;&lt;a href=&#34;#cb1-79&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        d[e.to][v]=d[now][v]+(&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)e.l/(&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)v;&lt;/span&gt;
&lt;span id=&#34;cb1-80&#34;&gt;&lt;a href=&#34;#cb1-80&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        q.push(node(d[e.to][v],e.to,v));&lt;/span&gt;
&lt;span id=&#34;cb1-81&#34;&gt;&lt;a href=&#34;#cb1-81&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        from[e.to][v]=now;&lt;/span&gt;
&lt;span id=&#34;cb1-82&#34;&gt;&lt;a href=&#34;#cb1-82&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        fromv[e.to][v]=v;&lt;/span&gt;
&lt;span id=&#34;cb1-83&#34;&gt;&lt;a href=&#34;#cb1-83&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    }&lt;/span&gt;
&lt;span id=&#34;cb1-84&#34;&gt;&lt;a href=&#34;#cb1-84&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb1-85&#34;&gt;&lt;a href=&#34;#cb1-85&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-86&#34;&gt;&lt;a href=&#34;#cb1-86&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-87&#34;&gt;&lt;a href=&#34;#cb1-87&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-88&#34;&gt;&lt;a href=&#34;#cb1-88&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-89&#34;&gt;&lt;a href=&#34;#cb1-89&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-90&#34;&gt;&lt;a href=&#34;#cb1-90&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-91&#34;&gt;&lt;a href=&#34;#cb1-91&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; Find_way(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&#34;cb1-92&#34;&gt;&lt;a href=&#34;#cb1-92&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-93&#34;&gt;&lt;a href=&#34;#cb1-93&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(now!=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-94&#34;&gt;&lt;a href=&#34;#cb1-94&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        Find_way(from[now][v],fromv[now][v]);&lt;/span&gt;
&lt;span id=&#34;cb1-95&#34;&gt;&lt;a href=&#34;#cb1-95&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &amp;quot;&lt;/span&gt;,now);&lt;/span&gt;
&lt;span id=&#34;cb1-96&#34;&gt;&lt;a href=&#34;#cb1-96&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-97&#34;&gt;&lt;a href=&#34;#cb1-97&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-98&#34;&gt;&lt;a href=&#34;#cb1-98&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb1-99&#34;&gt;&lt;a href=&#34;#cb1-99&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb1-100&#34;&gt;&lt;a href=&#34;#cb1-100&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ...&lt;span class=&#34;co&#34;&gt;//输入&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-101&#34;&gt;&lt;a href=&#34;#cb1-101&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dijkstra();&lt;/span&gt;
&lt;span id=&#34;cb1-102&#34;&gt;&lt;a href=&#34;#cb1-102&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; ansv;&lt;/span&gt;
&lt;span id=&#34;cb1-103&#34;&gt;&lt;a href=&#34;#cb1-103&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt; mint=&lt;span class=&#34;fl&#34;&gt;1e9&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-104&#34;&gt;&lt;a href=&#34;#cb1-104&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span class=&#34;dv&#34;&gt;500&lt;/span&gt;;i++)&lt;/span&gt;
&lt;span id=&#34;cb1-105&#34;&gt;&lt;a href=&#34;#cb1-105&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(mint&amp;gt;d[t][i])&lt;/span&gt;
&lt;span id=&#34;cb1-106&#34;&gt;&lt;a href=&#34;#cb1-106&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            ansv=i,mint=d[t][i];&lt;span class=&#34;co&#34;&gt;//寻找如何往回寻路&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-107&#34;&gt;&lt;a href=&#34;#cb1-107&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    Find_way(t,ansv);&lt;/span&gt;
&lt;span id=&#34;cb1-108&#34;&gt;&lt;a href=&#34;#cb1-108&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-109&#34;&gt;&lt;a href=&#34;#cb1-109&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>解题报告 P1119 灾后重建</title>
        <link>https://oi.imyangty.com/sol-luogu-p1119/</link>
        <pubDate>Sun, 05 Apr 2020 17:14:56 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-luogu-p1119/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg29.webp" alt="Featured image of post 解题报告 P1119 灾后重建" /&gt;&lt;h2 id=&#34;题目内容&#34;&gt;题目内容&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luogu.com.cn/problem/P1119&#34; title=&#34;P1119&#34;&gt;P1119&lt;/a&gt; 大意：给定编号从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(n-1\)&lt;/span&gt; 的村庄，每个村庄都被一定程度上损毁，而公路正常，在 &lt;span class=&#34;math inline&#34;&gt;\(t\_i\)&lt;/span&gt; 时间前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 号村庄不能通过，询问在 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 时间时 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 号和 &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; 号村庄能不能通车，如果能，最短路径是多少。&lt;/p&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;这题思路真的很妙，让我们对 Floyd 的本质有了更深的理解，至少本蒟蒻是这样觉得的。 回归 Floyd 算法的本质：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;k&amp;lt;=n;k++)&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;j&amp;lt;=n;j++)&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            f[i][j]=min(f[i][j],f[i][k]+f[k][j])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际上，Floyd 是通过&lt;strong&gt;枚举中转点&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 来求得每个点之间的最短路，本质上是一种 dp。 然后，注意到本题中，每个村庄的恢复时间是递增的，且给出的询问的时间也是递增的。而题目让我们求任意两点的最短路，那么也可以抽象成 Floyd。具体的方法就是，由于时间是递增的，所以每到一个村庄恢复的时间点我们就可以让这个村庄成为那个可以用来中转的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 来更新这一时间的所有最短路。 在这题中，就是使用时间戳，保证回答被询问的时间前信息被更新过即可。&lt;strong&gt;注意村庄编号从 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开始&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; read()&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        s = &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; * s + c - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; s;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; min(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a,&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a&amp;lt;b?a:b;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn=&lt;span class=&#34;dv&#34;&gt;205&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n,m,t[maxn],f[maxn][maxn],q;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; floyd(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k)&lt;span class=&#34;co&#34;&gt;//更新信息的，通过给定可以中转的中转点来进行更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;j&amp;lt;n;j++)&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            f[i][j]=min(f[i][j],f[i][k]+f[k][j]);&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb2-34&#34;&gt;&lt;a href=&#34;#cb2-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    n=read(),m=read();&lt;/span&gt;
&lt;span id=&#34;cb2-35&#34;&gt;&lt;a href=&#34;#cb2-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(f,&lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;,&lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt;(f));&lt;span class=&#34;co&#34;&gt;//初始赋极大值 0x3f 不至于加起来爆int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-36&#34;&gt;&lt;a href=&#34;#cb2-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;
&lt;span id=&#34;cb2-37&#34;&gt;&lt;a href=&#34;#cb2-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        t[i]=read(),f[i][i]=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-38&#34;&gt;&lt;a href=&#34;#cb2-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt;(m--)&lt;/span&gt;
&lt;span id=&#34;cb2-39&#34;&gt;&lt;a href=&#34;#cb2-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb2-40&#34;&gt;&lt;a href=&#34;#cb2-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x=read(),y=read(),w=read();&lt;/span&gt;
&lt;span id=&#34;cb2-41&#34;&gt;&lt;a href=&#34;#cb2-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        f[x][y]=f[y][x]=w;&lt;span class=&#34;co&#34;&gt;//双向边&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-42&#34;&gt;&lt;a href=&#34;#cb2-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb2-43&#34;&gt;&lt;a href=&#34;#cb2-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    q=read();&lt;/span&gt;
&lt;span id=&#34;cb2-44&#34;&gt;&lt;a href=&#34;#cb2-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now=&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-45&#34;&gt;&lt;a href=&#34;#cb2-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt;(q--)&lt;/span&gt;
&lt;span id=&#34;cb2-46&#34;&gt;&lt;a href=&#34;#cb2-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb2-47&#34;&gt;&lt;a href=&#34;#cb2-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x=read(),y=read(),s=read();&lt;/span&gt;
&lt;span id=&#34;cb2-48&#34;&gt;&lt;a href=&#34;#cb2-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt;(t[now]&amp;lt;=s &amp;amp;&amp;amp; now&amp;lt;n)&lt;span class=&#34;co&#34;&gt;//将这一时间前的所有时间信息更新&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-49&#34;&gt;&lt;a href=&#34;#cb2-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            floyd(now++);&lt;/span&gt;
&lt;span id=&#34;cb2-50&#34;&gt;&lt;a href=&#34;#cb2-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt;(t[x]&amp;gt;s  t[y]&amp;gt;s  f[x][y]&amp;gt;=&lt;span class=&#34;bn&#34;&gt;0x3f3f3f3f&lt;/span&gt;)&lt;span class=&#34;co&#34;&gt;//如果这一时间时村庄未修复，或者无路线&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-51&#34;&gt;&lt;a href=&#34;#cb2-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;-1&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;);&lt;span class=&#34;co&#34;&gt;//输出 -1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-52&#34;&gt;&lt;a href=&#34;#cb2-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-53&#34;&gt;&lt;a href=&#34;#cb2-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;,f[x][y]);&lt;span class=&#34;co&#34;&gt;//否则输出最短路即可&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-54&#34;&gt;&lt;a href=&#34;#cb2-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb2-55&#34;&gt;&lt;a href=&#34;#cb2-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-56&#34;&gt;&lt;a href=&#34;#cb2-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
