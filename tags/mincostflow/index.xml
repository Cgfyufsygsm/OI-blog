<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>费用流 on 清烛的博客</title>
        <link>https://oi.imyangty.com/tags/mincostflow/</link>
        <description>Recent content in 费用流 on 清烛的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Thu, 21 Jul 2022 16:16:01 +0800</lastBuildDate><atom:link href="https://oi.imyangty.com/tags/mincostflow/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AtCoder 比赛日记</title>
        <link>https://oi.imyangty.com/summary-atcoder/</link>
        <pubDate>Fri, 23 Apr 2021 12:38:59 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/summary-atcoder/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg70.webp" alt="Featured image of post AtCoder 比赛日记" /&gt;&lt;h2 id=&#34;abc&#34;&gt;ABC&lt;/h2&gt;
&lt;h3 id=&#34;补题表&#34;&gt;补题表&lt;/h3&gt;
&lt;p&gt;近期目标：ABC 稳定 30min 过 4 题，争取赛时过 G，尽量补全套 ABC。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Round&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Rank&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Perf&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Sol&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;E&lt;/th&gt;
&lt;th&gt;F&lt;/th&gt;
&lt;th&gt;G&lt;/th&gt;
&lt;th&gt;H&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC202&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc202/standings?watching=YangTY&#34;&gt;1095&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1437&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC207&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc207/standings?watching=YangTY&#34;&gt;956&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1484&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC210&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc210/standings?watching=YangTY&#34;&gt;485&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1823&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC212&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc212/standings?watching=YangTY&#34;&gt;856&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1536&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC213&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc213/standings?watching=YangTY&#34;&gt;1031&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1485&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC214&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc214/standings?watching=YangTY&#34;&gt;742&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1647&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC217&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc217/standings?watching=Cgfyufsygsm&#34;&gt;1320&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1383&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC219&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc219/standings?watching=YangTY&#34;&gt;1153&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1375&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC222&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc222/standings?watching=YangTY&#34;&gt;425&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1880&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC223&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc223/standings?watching=Cgfyufsygsm&#34;&gt;1573&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1074&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC224&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc224/standings?watching=YangTY&#34;&gt;426&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1828&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC231&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc231/standings?watching=Cgfyufsygsm&#34;&gt;571&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1665&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC232&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc232/standings?watching=YangTY&#34;&gt;762&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1518&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC233&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc233/standings?watching=YangTY&#34;&gt;659&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1660&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC234&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc234/standings?watching=YangTY&#34;&gt;1553&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1224&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC235&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc235/standings?watching=YangTY&#34;&gt;913&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1525&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC237&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc237/standings?watching=YangTY&#34;&gt;534&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1790&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC244&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc244/standings?watching=YangTY&#34;&gt;333&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1788&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;6&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ABC246&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc246/standings?watching=YangTY&#34;&gt;703&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1656&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;5&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ABC247&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc247/standings?watching=YangTY&#34;&gt;640&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1703&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;6&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一些新见到的-trick&#34;&gt;一些新见到的 trick&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ABC212E：补集思想优化 dp。&lt;/li&gt;
&lt;li&gt;ABC212H：FWT 的线性性。&lt;/li&gt;
&lt;li&gt;ABC219E：网格很小所以直接将护城河的状态和格子双射。&lt;/li&gt;
&lt;li&gt;ABC231G：期望线性性推大式子。&lt;/li&gt;
&lt;li&gt;ABC232G：对于模 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 类问题建环。&lt;/li&gt;
&lt;li&gt;ABC233Ex：曼哈顿转切比雪夫然后主席树二维数点。&lt;/li&gt;
&lt;li&gt;ABC235G：逆向考虑问题→二项式反演→&lt;strong&gt;棋盘路径计数的递推&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;ABC237E：点高度直接满足势能性质→直接 Dijkstra。&lt;/li&gt;
&lt;li&gt;ABC237Ex：串的包含关系转为偏序关系👉求最大反链。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abc212&#34;&gt;ABC212&lt;/h3&gt;
&lt;p&gt;A + B + C + D + E。A - D 略。&lt;/p&gt;
&lt;h4 id=&#34;abc212e---safety-journey&#34;&gt;ABC212E - Safety Journey&lt;/h4&gt;
&lt;p&gt;补集思想优化 DP ： &lt;span class=&#34;math display&#34;&gt;\[
f_{i, j} = \sum_{j&amp;#39;\text{ is connected with j}}f_{i - 1, j&amp;#39;}
\]&lt;/span&gt; 可以转化为 &lt;span class=&#34;math display&#34;&gt;\[
f_{i, j} = \sum_{j&amp;#39; = 1}^n f_{i - 1, j&amp;#39;} - \sum_{j&amp;#39;\text{ isn&amp;#39;t connected with j}}f_{i - 1, j&amp;#39;}
\]&lt;/span&gt; 没连边的数量是总共 &lt;span class=&#34;math inline&#34;&gt;\(O(m)\)&lt;/span&gt; 的，总复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O((n + m)k)\)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;abc212f---greedy-takahashi&#34;&gt;ABC212F - Greedy Takahashi&lt;/h4&gt;
&lt;p&gt;建模成森林然后直接树上倍增求解。码力要求较高。&lt;/p&gt;
&lt;h4 id=&#34;abc212g---power-pair&#34;&gt;ABC212G - Power Pair&lt;/h4&gt;
&lt;p&gt;给定质数 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;，问数对 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 的个数模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\le x, y\le p - 1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\exists n, x^n\equiv y\pmod p\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(2\le p\le 10^{12}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;回顾原根的概念。&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 为模 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 的原根当且仅当最小的使得 &lt;span class=&#34;math inline&#34;&gt;\(r^e\equiv 1\pmod p\)&lt;/span&gt; 的正整数为 &lt;span class=&#34;math inline&#34;&gt;\(e = p - 1\)&lt;/span&gt;。本题需要用到的性质：&lt;span class=&#34;math inline&#34;&gt;\(r^i\bmod p, i\in[0, p - 1]\)&lt;/span&gt; 的值两两不同，且对于一个质数，一定有原根存在。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(x\equiv r^a\pmod p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(y\equiv r^b\pmod p\)&lt;/span&gt;，不难发现 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 总能有一个 &lt;span class=&#34;math inline&#34;&gt;\((a, b)\)&lt;/span&gt; 与之对应。于是就有 &lt;span class=&#34;math inline&#34;&gt;\(an\equiv b\pmod{p - 1}\)&lt;/span&gt;。现在就是需要找满足上式的 &lt;span class=&#34;math inline&#34;&gt;\((a, b)\)&lt;/span&gt; 的数量。&lt;/p&gt;
&lt;p&gt;枚举 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;，则上式有解的条件是 &lt;span class=&#34;math inline&#34;&gt;\(\gcd(a, p - 1)\mid b\)&lt;/span&gt;（裴蜀定理）。那对于所有的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 就可以写成： &lt;span class=&#34;math display&#34;&gt;\[
\sum_{a = 1}^{p - 1}\frac{p - 1}{\gcd(a, p - 1)}
\]&lt;/span&gt; 然后 &lt;span class=&#34;math inline&#34;&gt;\(O(p)\)&lt;/span&gt; 是过不去的，要考虑优化。优化它的方法明显是寻找 &lt;span class=&#34;math inline&#34;&gt;\(\gcd(a, p - 1)\)&lt;/span&gt; 相同的 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的个数。根据 &lt;span class=&#34;math inline&#34;&gt;\(p - 1\)&lt;/span&gt; 的因数个数 为 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt p)\)&lt;/span&gt; 的，故这些 &lt;span class=&#34;math inline&#34;&gt;\(\gcd\)&lt;/span&gt; 也只有 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt p)\)&lt;/span&gt; 个。我们枚举 &lt;span class=&#34;math inline&#34;&gt;\(\gcd(a, p - 1) = g\)&lt;/span&gt;，有 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{g\mid p - 1}\frac{p - 1}{g}\times\phi\left(\frac{p - 1}{g}\right)
\]&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(\phi(n)\)&lt;/span&gt; 可以暴力计算。&lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt p\log p)\)&lt;/span&gt;，因为 $$ 的上界很松，轻松通过。&lt;/p&gt;
&lt;h4 id=&#34;abc212h---nim-counting&#34;&gt;ABC212H - Nim Counting&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((A_1, \cdots, A_k)\)&lt;/span&gt;。可以如下安排石子：每堆石子数量必须是 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 之一，且石子堆数量小等于 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;。问安排石子使得先手 Nim 必胜的方案数。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le n\le 2\times 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le k, A_i\le 2^{17}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 两两不同。&lt;/p&gt;
&lt;p&gt;不难发现问题转化为求 &lt;span class=&#34;math inline&#34;&gt;\(\bigoplus_{i = 1}^m B_i\not=0\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(B_i\)&lt;/span&gt; 的方案数，其中 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 为石子个数。&lt;/p&gt;
&lt;p&gt;先考虑固定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;。则构造序列 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; 使得 &lt;span class=&#34;math inline&#34;&gt;\(C_i = [\exist j, A_j = i]\)&lt;/span&gt;，定义卷积 &lt;span class=&#34;math inline&#34;&gt;\(*\)&lt;/span&gt; 为异或卷积，则 &lt;span class=&#34;math inline&#34;&gt;\(C * C * \cdots * C\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt;）的第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 项系数即为异或和为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的方案数。这个过程是可以 FWT 做的，具体地，给 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{FWT}(C)_i\)&lt;/span&gt; 的每一项做一下快速幂再 IFWT 回去，把除了第 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 项之外的求个和，就得到了石子堆数为 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的答案。&lt;/p&gt;
&lt;p&gt;然后，不固定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 怎么做呢？因为 FWT 是线性变换，而我们需要求的是 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{IFWT}(\operatorname{FWT}(C)_i + \operatorname{FWT}(C)_i^2 + \operatorname{FWT}(C)_i^3 + \cdots \operatorname{FWT}(C)_i^n)\)&lt;/span&gt;，所以定义 &lt;span class=&#34;math inline&#34;&gt;\(C&amp;#39;_i = \operatorname{FWT}(C)_i\)&lt;/span&gt;，然后求出 &lt;span class=&#34;math inline&#34;&gt;\(D_i = C_i&amp;#39; + C_i&amp;#39;^2 + \cdots + C_i&amp;#39;^n\)&lt;/span&gt; 再求 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{IFWT}(D)\)&lt;/span&gt; 把除了第 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 项外的系数累加即可。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint calc(modint x, modint n) {&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x == &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; n;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x == &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; x * (qPow(x, n) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) * qPow(x - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, mod - &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n), read(k);&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; tmp;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, k) read(tmp), maxa = tmp &amp;gt; maxa ? tmp : maxa, f[tmp] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ++maxa;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; lim;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (lim = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;; lim &amp;lt;= maxa; lim &amp;lt;&amp;lt;= &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    XOR(f, lim, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, lim - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) f[i] = calc(f[i], n);&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    XOR(f, lim, inv2);&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    modint ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, lim - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) ans += f[i];&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans);&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;abc213&#34;&gt;ABC213&lt;/h3&gt;
&lt;p&gt;A + B + C + D + F&lt;/p&gt;
&lt;h4 id=&#34;abc213e---stronger-takahashi&#34;&gt;ABC213E - Stronger Takahashi&lt;/h4&gt;
&lt;p&gt;0-1 bfs，因为边权只为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc213f---common-prefixes&#34;&gt;ABC213F - Common Prefixes&lt;/h4&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{LCP}(S_i, S_j)\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 开头子串和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 开头子串的最长公共前缀。对每个 &lt;span class=&#34;math inline&#34;&gt;\(k\in[1, n]\)&lt;/span&gt; 求 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i = 1}^n\operatorname{LCP}(S_k, S_i)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SA 板子。&lt;/p&gt;
&lt;h4 id=&#34;abc213g---connectivity-2&#34;&gt;ABC213G - Connectivity 2&lt;/h4&gt;
&lt;p&gt;对于每个 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，求 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 联通的子图个数。&lt;span class=&#34;math inline&#34;&gt;\(2\le n\le 17\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 很小。&lt;/p&gt;
&lt;p&gt;状压 dp。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(g(S)\)&lt;/span&gt; 表示点集 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中有连边的数量。这可以 &lt;span class=&#34;math inline&#34;&gt;\(O(2^nm)\)&lt;/span&gt; 的时间内完成。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f(S)\)&lt;/span&gt; 为保证 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内点联通的连边方案数，则我们可以考虑容斥，随便选一个点 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，然后考虑这个点所在的连通分量 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(T\subset S\)&lt;/span&gt;。则有如下转移 &lt;span class=&#34;math display&#34;&gt;\[
f(S) = g(S) - \sum_{x\in T, T\subset S} f(T)
\]&lt;/span&gt; 然后对于答案，&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 号点的答案即为： &lt;span class=&#34;math display&#34;&gt;\[
\sum_{1\in S, k\in S} f(S)
\]&lt;/span&gt; 这题就做完了。&lt;/p&gt;
&lt;h4 id=&#34;abc213h---stroll&#34;&gt;ABC213H - Stroll&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点，&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 对点 &lt;span class=&#34;math inline&#34;&gt;\((a_i, b_i)\)&lt;/span&gt; 间有连边，长度为 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; 的有 &lt;span class=&#34;math inline&#34;&gt;\(p_{i, d}\)&lt;/span&gt; 条。问从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 点出发，在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 点结束的长度为 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的路径方案数。&lt;/p&gt;
&lt;p&gt;先把最朴素的 DP 方程写出来：设 &lt;span class=&#34;math inline&#34;&gt;\(f_{u, s}\)&lt;/span&gt; 为结束点为 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，长度为 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 的路径条数。&lt;/p&gt;
&lt;p&gt;则最朴素的方程：对于每条边进行转移 &lt;span class=&#34;math display&#34;&gt;\[
f_{u_i, s} := f_{u_i, s} + \sum_{t = 0}^sf_{v_i, t}p_{i, t}
\]&lt;/span&gt; 写成生成函数的形式就是 &lt;span class=&#34;math display&#34;&gt;\[
F_{u_i}(x) := F_{u_i}(x) + F_{v_i}(x)P_i(x)
\]&lt;/span&gt; 这个东西看似可以 NTT 优化，但是你会发现存在反复横跳的情况。所以直接去做肯定是不行的。&lt;/p&gt;
&lt;p&gt;考虑在长度的维度分治。考虑当前分治区间为 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt;，然后首先处理一下 &lt;span class=&#34;math inline&#34;&gt;\([l, mid]\)&lt;/span&gt; 内部，把这些算完，然后处理 &lt;span class=&#34;math inline&#34;&gt;\([l, mid]\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\([mid + 1, r]\)&lt;/span&gt; 的贡献。即 &lt;span class=&#34;math display&#34;&gt;\[
f_{u_i, s} := f_{u_i, s} + \sum_{t = l}^{mid}f_{v_i, t}p_{i, s - t}\quad s\in[mid + 1, r]
\]&lt;/span&gt; 类似分治 NTT 处理即可。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;Poly f[&lt;span class=&#34;dv&#34;&gt;11&lt;/span&gt;], p[&lt;span class=&#34;dv&#34;&gt;11&lt;/span&gt;], t1, t2;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m, T, u[&lt;span class=&#34;dv&#34;&gt;11&lt;/span&gt;], v[&lt;span class=&#34;dv&#34;&gt;11&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; solve(Poly &amp;amp;f, Poly &amp;amp;g, Poly &amp;amp;ret, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; l, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; r) {&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; mid = (l + r) &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    t1 = {f.begin() + l, f.begin() + mid + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    t2 = {g.begin() + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, g.begin() + r - l + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    t1 = t1 * t2;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, mid + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, r) ret[i] = (ret[i] + t1[i - l - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]) % mod;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; solve(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; l, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; r) {&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; mid = (l + r) &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (l == r) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    solve(l, mid);&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        solve(f[u[i]], p[i], f[v[i]], l, r);&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        solve(f[v[i]], p[i], f[u[i]], l, r);&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    solve(mid + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, r);&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n), read(m), read(T);&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    lim = T + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        read(u[i]), read(v[i]);&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        p[i].resize(T + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, T) read(p[i][j]);&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) f[i].resize(T + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb2-34&#34;&gt;&lt;a href=&#34;#cb2-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-35&#34;&gt;&lt;a href=&#34;#cb2-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    solve(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, T);&lt;/span&gt;
&lt;span id=&#34;cb2-36&#34;&gt;&lt;a href=&#34;#cb2-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(f[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][T]);&lt;/span&gt;
&lt;span id=&#34;cb2-37&#34;&gt;&lt;a href=&#34;#cb2-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb2-38&#34;&gt;&lt;a href=&#34;#cb2-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;abc217&#34;&gt;ABC217&lt;/h3&gt;
&lt;p&gt;A + B + C + D + E&lt;/p&gt;
&lt;h4 id=&#34;abc217f---make-pair&#34;&gt;ABC217F - Make Pair&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 个学生，其中只有 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 对关系好。每次选择相邻两个关系好的进行配对并从序列中删除，问把所有学生配对的方案。&lt;/p&gt;
&lt;p&gt;一眼就是区间 dp。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{l, r}\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 里面的人配对的方案数。&lt;/p&gt;
&lt;p&gt;然后至于转移，考虑 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 与谁配对，设其为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;。则首先， &lt;span class=&#34;math inline&#34;&gt;\([l, x]\)&lt;/span&gt; 的长度一定是偶数，并且 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的关系好。然后我们需要的就是 &lt;span class=&#34;math inline&#34;&gt;\(f_{l + 1, x - 1}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(f_{x + 1, r}\)&lt;/span&gt;。注意到移除 &lt;span class=&#34;math inline&#34;&gt;\([l + 1, x - 1]\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\([x + 1, r]\)&lt;/span&gt; 是两个独立的过程，并且 &lt;span class=&#34;math inline&#34;&gt;\([l + 1, x - 1]\)&lt;/span&gt; 必须在配对 &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 之前完成。&lt;/p&gt;
&lt;p&gt;现在的问题就是，合并 &lt;span class=&#34;math inline&#34;&gt;\([l, x]\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\([x + 1, r]\)&lt;/span&gt; 是两个独立的过程，所以考虑一共进行了 &lt;span class=&#34;math inline&#34;&gt;\((r - l + 1) / 2\)&lt;/span&gt; 次合并，而我们需要确定有哪几次是 &lt;span class=&#34;math inline&#34;&gt;\([x + 1, r]\)&lt;/span&gt; 里面的在做，不难发现就是 &lt;span class=&#34;math display&#34;&gt;\[
\binom{(r - l + 1) / 2}{(r - x) / 2}
\]&lt;/span&gt; 转移的时候乘上这个系数即可。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc217/submissions/25628059&#34;&gt;代码&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc217g---groups&#34;&gt;ABC217G - Groups&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个数，要求划分成 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个非空组，若 &lt;span class=&#34;math inline&#34;&gt;\(i\equiv j\pmod m\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 不能在一组。对于 &lt;span class=&#34;math inline&#34;&gt;\(k = 1,\cdots, n\)&lt;/span&gt; 输出方案数模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 的结果。&lt;/p&gt;
&lt;p&gt;原来的组是非空且无标号的，方案数设为 &lt;span class=&#34;math inline&#34;&gt;\(f(k)\)&lt;/span&gt;，先考虑可以为空并且有标号的情况，设为 &lt;span class=&#34;math inline&#34;&gt;\(g(k)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(S_r\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\([1, n]\)&lt;/span&gt; 中模 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的余数为 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 的数字构成的集合，则对于每个 &lt;span class=&#34;math inline&#34;&gt;\(S_r\)&lt;/span&gt;，我们都要将其划分在 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个不同的组里面去，每个组里面最多 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 个数。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(P(n, m) = \displaystyle\frac{n!}{(n - m)!}\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 选 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 的排列数： &lt;span class=&#34;math display&#34;&gt;\[
g(k) = \prod_{i = 0}^{m - 1 }P(k, |S_i|)
\]&lt;/span&gt; 这是不要求放满的。而如果知道恰好放满的，除以 &lt;span class=&#34;math inline&#34;&gt;\(k!\)&lt;/span&gt; 就是不带标号的了。&lt;/p&gt;
&lt;p&gt;恰好放满可以用容斥。去掉的是 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{p = 0}^{k - 1}\binom kpf(p)p!
\]&lt;/span&gt; 即为有序非空组数不到 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的，所以 &lt;span class=&#34;math display&#34;&gt;\[
f(k) = \frac{\prod_{i = 0}^{m - 1}P(k, |S_i|) - \sum_{p = 0}^{k - 1}\binom k p f(p)p!}{k!}
\]&lt;/span&gt; 递推可做，前面那一段可以快速预处理然后用快速幂 &lt;span class=&#34;math inline&#34;&gt;\(O(\log n)\)&lt;/span&gt; 来算。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc217/submissions/25641347/&#34;&gt;代码&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;abc219&#34;&gt;ABC219&lt;/h3&gt;
&lt;p&gt;状态差。A + B + C + D。&lt;/p&gt;
&lt;h4 id=&#34;abc219e---moat&#34;&gt;ABC219E - Moat&lt;/h4&gt;
&lt;p&gt;一个 &lt;span class=&#34;math inline&#34;&gt;\(4\times 4\)&lt;/span&gt; 的网格，要求在网格边上修一个护城河，使得护城河是一个合法多边形并且包含了所有的村庄。&lt;/p&gt;
&lt;p&gt;比较神奇的思路，鉴于网格只有 &lt;span class=&#34;math inline&#34;&gt;\(16\)&lt;/span&gt; 个，而且一个护城河必定和一种状态（一个格子有没有被包含）一一对应，所以可以直接枚举这 &lt;span class=&#34;math inline&#34;&gt;\(O(2^{16})\)&lt;/span&gt; 个状态然后判断网格是否合法。&lt;/p&gt;
&lt;p&gt;判断网格是否合法这个，首先需要判断每个村庄是不是被包含，其次需要避免中间被挖空的情况，然后要避免 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的格子被割裂开的情况，综上即整张图（把边界外的考虑进去）只能有两个连通块，dfs 染色即可。&lt;/p&gt;
&lt;h3 id=&#34;abc222&#34;&gt;ABC222&lt;/h3&gt;
&lt;p&gt;A + B + C + D + G，rk 425。&lt;/p&gt;
&lt;h4 id=&#34;abc222e---red-and-blue-tree&#34;&gt;ABC222E - Red and Blue Tree&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条树上路径，每次会覆盖若干边。&lt;/p&gt;
&lt;p&gt;如果我设第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 条边的被覆盖次数为 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 的话，那么我们每次都会给途径的 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 增加 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;要求覆盖完之后访问红边的次数-访问蓝边的次数=&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，问染色方案数。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 很小，所以可以暴力给边染色。&lt;/p&gt;
&lt;p&gt;染完之后不难发现 &lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 是确定的。所以直接背包一下就可以了。&lt;/p&gt;
&lt;h4 id=&#34;abc222f---expensive-expense&#34;&gt;ABC222F - Expensive Expense&lt;/h4&gt;
&lt;p&gt;树，定义 &lt;span class=&#34;math inline&#34;&gt;\(E_{i, j}\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 路径上边权和加上 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的点权，对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 找到最大的 &lt;span class=&#34;math inline&#34;&gt;\(E_{i, j}\)&lt;/span&gt;，点数在 &lt;span class=&#34;math inline&#34;&gt;\(2\times 10^5\)&lt;/span&gt; 级别。&lt;/p&gt;
&lt;p&gt;简单换根 dp。&lt;/p&gt;
&lt;h3 id=&#34;abc231&#34;&gt;ABC231&lt;/h3&gt;
&lt;p&gt;A + B + C + D + F，rk571&lt;/p&gt;
&lt;h4 id=&#34;abc231e---minimal-payments&#34;&gt;ABC231E - Minimal payments&lt;/h4&gt;
&lt;p&gt;由于 &lt;span class=&#34;math inline&#34;&gt;\(A_{i - 1}\mid A_i\)&lt;/span&gt;，所以对于一个 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 可以只考虑两种方案：用这个 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 尽可能凑，或者用更大的面值付然后要找零。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; ll = &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;ll a[&lt;span class=&#34;dv&#34;&gt;65&lt;/span&gt;], x, ans;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;unordered_map&amp;lt;ll, unordered_map&amp;lt;ll, ll&amp;gt; &amp;gt; f;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;ll dfs(ll x, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now) {&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (now == &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; x;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (f[x][now] &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; f[x][now];&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll r = x % a[now], q = x / a[now], p = a[now] - r;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (r == &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; q;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll w1 = q + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;ll&lt;/span&gt; + dfs(p, now - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll w2 = q + dfs(r, now - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; f[x][now] = min(w1, w2);&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, x);&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) read(a[i]);&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ans = x;&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(dfs(x, n));&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc231g---balls-in-boxes&#34;&gt;ABC231G - Balls in Boxes&lt;/h4&gt;
&lt;p&gt;期望牛逼题。大体思路就是拆开期望的式子，利用线性性进行化简。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个盒子，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个盒子一开始有 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 个球，&lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 次操作，每次操作随机选一个盒子加一个球，最后每个盒子有 &lt;span class=&#34;math inline&#34;&gt;\(B_i\)&lt;/span&gt; 个球，问 &lt;span class=&#34;math inline&#34;&gt;\(S = \prod B_i\)&lt;/span&gt; 的期望，对 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 取模。&lt;/p&gt;
&lt;p&gt;答案为 &lt;span class=&#34;math inline&#34;&gt;\(E[S]\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt; 为表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个盒子被选中次数的随机变量，则我们要的最终答案就是 &lt;span class=&#34;math inline&#34;&gt;\(E[\prod_i(A_i + X_i)]\)&lt;/span&gt;。考虑 &lt;span class=&#34;math inline&#34;&gt;\(N = 2\)&lt;/span&gt; 的情况，即为 &lt;span class=&#34;math inline&#34;&gt;\(E[(A_1 + X_1)(A_2 + X_2)] = E[A_1A_2] + E[A_1X_2] + E[A_2X_1] + E[X_1X_2]\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;推而广之，对于 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个不一样的下标 &lt;span class=&#34;math inline&#34;&gt;\(i_1,\cdots, i_n\)&lt;/span&gt;，容易知道 &lt;span class=&#34;math inline&#34;&gt;\(E[\prod_{j = 1}^n X_{i_j}] = E[\prod_{i = 1}^nX_i]\)&lt;/span&gt;。所以提出这个公因式，有 &lt;span class=&#34;math display&#34;&gt;\[
E\left[\prod_{i =1}^N(A_i + X_i)\right] = \sum_{n = 0}^NS_{N, n}(A_1,\cdots, A_N)E\left[\prod_{i =1}^{N - n}X_i\right]
\]&lt;/span&gt; 其中 &lt;span class=&#34;math inline&#34;&gt;\(S_{N, n}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个变量的 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次对称多项式。&lt;/p&gt;
&lt;p&gt;现在只需要对于每个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 算出 &lt;span class=&#34;math inline&#34;&gt;\(S_{N, n}(A_1,\cdots, A_N)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(E[\prod_{i = 1}^nX_i]\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;前者，&lt;span class=&#34;math inline&#34;&gt;\(S_{N, n}(A_1,\cdots, A_N) = [x^n]\prod_{i =1}^N(A_ix + 1)\)&lt;/span&gt;。这个东西一个分治 NTT 碾过去应该是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2n)\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;然后是后者。我们考虑随机变量 &lt;span class=&#34;math inline&#34;&gt;\(X_{i, j}\)&lt;/span&gt; 表示第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个盒子在第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 次操作是否会被选中（0/1）。则 &lt;span class=&#34;math inline&#34;&gt;\(X_i = \sum_{j = 1}^KX_{i, j}\)&lt;/span&gt;。枚举一下下标，发现 &lt;span class=&#34;math display&#34;&gt;\[
E\left[\prod_{i = 1}^n X_i \right] = \sum_{j_1, j_2,\cdots, j_n}E\left[\prod_{i = 1}^nX_{i, j_i}\right]
\]&lt;/span&gt; 然后当 &lt;span class=&#34;math inline&#34;&gt;\(i_1\not= i_2\)&lt;/span&gt; 的时候，显然 &lt;span class=&#34;math inline&#34;&gt;\(X_{i_1, j}X_{i_2, j} = 0\)&lt;/span&gt;。故 &lt;span class=&#34;math display&#34;&gt;\[
E\left[\prod_{i = 1}^nX_{i, j_i}\right] =
\begin{cases}
\left(\frac 1N\right)^n \quad&amp;amp; \text{if }j_i\text{ are pairwise different}\\
0\quad&amp;amp; \text{otherwise}
\end{cases}
\]&lt;/span&gt; 于是 &lt;span class=&#34;math display&#34;&gt;\[
E\left[\prod_{i = 1}^n X_i \right] = \left(\prod_{i = 1}^n(K + 1 - i)\right)\left(\frac1N\right)^n
\]&lt;/span&gt; 这个可以 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 算，于是 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2n)\)&lt;/span&gt; 解决了。&lt;/p&gt;
&lt;h3 id=&#34;abc232&#34;&gt;ABC232&lt;/h3&gt;
&lt;p&gt;A，B 略。&lt;/p&gt;
&lt;p&gt;C 建出一张图的邻接矩阵然后用 &lt;code&gt;next_permutation&lt;/code&gt; 枚举排列判断是否能建立映射即可。&lt;/p&gt;
&lt;p&gt;D 简单网格 dp，注意边界条件。&lt;/p&gt;
&lt;h4 id=&#34;abc232e---rook-path&#34;&gt;ABC232E - Rook Path&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(H \times W\)&lt;/span&gt; 的网格，你初始在 &lt;span class=&#34;math inline&#34;&gt;\((x_1, y_1)\)&lt;/span&gt;，要求做 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 次操作后位置变为 &lt;span class=&#34;math inline&#34;&gt;\((x_2, y_2)\)&lt;/span&gt;。每次操作形如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移动横坐标，从 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 移动到 &lt;span class=&#34;math inline&#34;&gt;\((x&amp;#39;, y)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(1\le x&amp;#39;\le H\land x&amp;#39;\neq x\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;移动纵坐标，从 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 移动到 &lt;span class=&#34;math inline&#34;&gt;\((x, y&amp;#39;)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(1\le y&amp;#39;\le W\land y&amp;#39;\neq y\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（就是车的移动方式）问有多少种可能的操作方案，两种操作方案不同当且仅当中间某一步经过的点不同。答案对 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 取模。&lt;/p&gt;
&lt;p&gt;根据套路，这个东西的横向移动和纵向移动是可以分开来考虑的。即，我们可以考虑横向上走 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 步的方案，再乘上纵向上走 &lt;span class=&#34;math inline&#34;&gt;\(K - m\)&lt;/span&gt; 步的方案，再乘上组合系数 &lt;span class=&#34;math inline&#34;&gt;\(\dbinom K m\)&lt;/span&gt;。考虑计算在一个方向上走 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 步的方案数。&lt;/p&gt;
&lt;p&gt;可以 DP，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{0/1, i}\)&lt;/span&gt; 表示横向移动（纵向的类似）回到出发点与否，走 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 步的方案数，其中初始边界是 &lt;span class=&#34;math inline&#34;&gt;\(f_{1,0} = 1\)&lt;/span&gt;，即走 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 步，终点在原点的方案数为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。转移如下： &lt;span class=&#34;math display&#34;&gt;\[
\begin{cases}
f_{1, i} = (H - 1)f_{1, i - 1}\\
f_{0, i} = f_{1, i - 1} + (H - 2)f_{0, i - 1}
\end{cases}
\]&lt;/span&gt; 转移的意义还是很显然的。于是我们 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 求出 dp 数组，这题就做完了，&lt;a href=&#34;https://atcoder.jp/contests/abc232/submissions/28029224&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc232f---simple-operations-on-sequence&#34;&gt;ABC232F - Simple Operations on Sequence&lt;/h4&gt;
&lt;p&gt;给定两个长度为 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(2\le N\le 18\)&lt;/span&gt;）：&lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(B_i\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(1\le A_i, B_i\le 10^8\)&lt;/span&gt;）。可以进行如下两种操作，问最小的使得 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; 的操作代价：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 加一/减一，代价为 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(1\le X\le 10^8\)&lt;/span&gt;）&lt;/li&gt;
&lt;li&gt;交换 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 中的相邻元素，代价为 &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(1\le Y\le 10^{16}\)&lt;/span&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;毫无疑问，两个操作是相互独立的，可以分开考虑。如果我们先交换，出一个 &lt;span class=&#34;math inline&#34;&gt;\(P_1, P_2,\cdots,P_N\)&lt;/span&gt; 的排列，然后再统计第一个的答案。令 &lt;span class=&#34;math inline&#34;&gt;\(\operatorname{inv}(P)\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 的逆序对数，则总代价为： &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i = 1}^N|A_{P_i} - B_i|\cdot X + \operatorname{inv}(P)\cdot Y
\]&lt;/span&gt; 把逆序对的这个关于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的贡献拆开，则我们可以得到 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i = 1}^N(|A_{P_i} - B_i|\cdot X + |\{p:p\in\{1,2,\cdots, N\} \backslash \{P_1, \cdots, P_{i - 1}\}, p &amp;lt; P_i\}|\cdot Y)
\]&lt;/span&gt; 然后会发现一个很关键的地方：后面那个东西只和 &lt;span class=&#34;math inline&#34;&gt;\(\{P_1, \cdots, P_i\}\)&lt;/span&gt; 这个集合有关，而这个集合很小，所以不妨考虑将其状压起来，令 &lt;span class=&#34;math inline&#34;&gt;\(f(x, S)\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(|p:p\in\{1, \cdots, N\}\backslash S, p &amp;lt; x|\)&lt;/span&gt;。然后式子改写为： &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i = 1}^N(|A_{P_i} - B_i|\cdot X + f(P_i, \{P_1, \cdots, P_{i - 1}\})\cdot Y)
\]&lt;/span&gt; 于是发现，这个东西可以状压 dp，具体地，设 &lt;span class=&#34;math inline&#34;&gt;\(dp_S\)&lt;/span&gt; 表示排列的前 &lt;span class=&#34;math inline&#34;&gt;\(|S|\)&lt;/span&gt; 项是 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内的元素，则转移应该是很好转移的。这题就做完了，&lt;a href=&#34;https://atcoder.jp/contests/abc232/submissions/28032712&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc232g---modulo-shortest-path&#34;&gt;ABC232G - Modulo Shortest Path&lt;/h4&gt;
&lt;p&gt;给定一张 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点的有向完全图，其中，&lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的有向边边权为 &lt;span class=&#34;math inline&#34;&gt;\((A_i + B_j)\bmod M\)&lt;/span&gt;。问 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 的最短路。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(2\le N\le 2\times 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(2\le M\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先如果我们直接连边跑 Dij，那么必然会寄，边数是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 级别的，要想办法少下来。&lt;/p&gt;
&lt;p&gt;考虑一个技巧，建一张新图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建 &lt;span class=&#34;math inline&#34;&gt;\([0, M)\)&lt;/span&gt; 的虚点 &lt;span class=&#34;math inline&#34;&gt;\(\overline{0},\overline 1,\cdots,\overline{M - 1}\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;然后 &lt;span class=&#34;math inline&#34;&gt;\(\forall k\in[0, M - 1)\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\(\overline k\to \overline{k + 1}\)&lt;/span&gt;，边权为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\forall i\in [1, N]\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\(i\to \overline{-A_i\bmod M}\)&lt;/span&gt;，边权为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\forall i\in [1, N]\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\(\overline{B_i}\)&lt;/span&gt;，边权为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样一来，从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 走到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 就相当于，从 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 走到 &lt;span class=&#34;math inline&#34;&gt;\(\overline{-A_i\bmod M}\)&lt;/span&gt;，然后一步步走到 &lt;span class=&#34;math inline&#34;&gt;\(\overline{B_j}\)&lt;/span&gt;，再走到 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;。发现中间的路程刚好就是 &lt;span class=&#34;math inline&#34;&gt;\((A_i + B_j)\bmod M\)&lt;/span&gt;，于是问题就得到了转化，我们求新图上 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 的最短路即可。&lt;/p&gt;
&lt;p&gt;可是，&lt;span class=&#34;math inline&#34;&gt;\(O(n + m)\)&lt;/span&gt; 似乎也必死无疑。&lt;/p&gt;
&lt;p&gt;然而我们可以发现，环上的很多点是没有用的，我们可以将其缩起来，会和原来的点连接的虚点只有 &lt;span class=&#34;math inline&#34;&gt;\(2n\)&lt;/span&gt; 个，这样子点数和边数就都控制在了 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 级别，直接跑 Dij 便可通过，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;，&lt;a href=&#34;https://atcoder.jp/contests/abc232/submissions/28035096&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc232h---kings-tour&#34;&gt;ABC232H - King’s Tour&lt;/h4&gt;
&lt;p&gt;不知道组题人怎么想的。。。这个题居然放在 H。&lt;/p&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(H\times W\)&lt;/span&gt; 棋盘，一个国王初始在 &lt;span class=&#34;math inline&#34;&gt;\((1, 1)\)&lt;/span&gt;。国王每步可以走到与其八连通的格子，请构造一个方案使得国王不重复地走完了每个格子，且终点为 &lt;span class=&#34;math inline&#34;&gt;\((a, b)\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(2\le H, W\le 100\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((a, b)\neq (1, 1)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们考虑减治构造。考虑如下几种情况：&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(H = 2\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(W = 2\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;如果 &lt;span class=&#34;math inline&#34;&gt;\(H = 2\)&lt;/span&gt;，那么就可以像下面这样构造方案（图源 AtCoder 官方题解）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.atcoder.jp/ghi/45d400563f38eb01ffea2e66239b9664.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;即，轨迹为：&lt;span class=&#34;math inline&#34;&gt;\((1, 1)\to (2, 1)\to\cdots\to(1, b)\to (1, b + 1)\to \cdots \to(1, W)\to (2, W)\to \cdots\to (2, b)\)&lt;/span&gt;。如果 &lt;span class=&#34;math inline&#34;&gt;\(W= 2\)&lt;/span&gt;，那么将行列调换之后是一样的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(H &amp;gt; 2\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(W &amp;gt; 2\)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;考虑下面这个方案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.atcoder.jp/ghi/6a11b9fe7eebca4ddd44a12826580c99.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;绿色圈出来的点集为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，分类讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\((a, b)\notin S\)&lt;/span&gt;，则我们可以走完 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内的点，然后垂直翻转一下坐标系，就变成了一个一模一样的子问题，递归处理即可。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\((a, b)\in S\)&lt;/span&gt;，则我们交换行列之后，就变成了 &lt;span class=&#34;math inline&#34;&gt;\((a,b)\notin S\)&lt;/span&gt; 的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后就可以递归地去解决这道题了。这种代码写的很巧妙：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; pii = pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; &lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;pii&amp;gt; solve(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; h, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; w, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; b) {&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    vector&amp;lt;pii&amp;gt; ret;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (h == &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, b - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) ret.push_back(pii(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, i)), ret.push_back(pii(&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;, i));&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ret.push_back(pii(&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt; - a, b));&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, b + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, w) ret.push_back(pii(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, i));&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        DEC(i, w, b + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) ret.push_back(pii(&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;, i));&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ret.push_back(pii(a, b));&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    } &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((h &amp;gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; w == &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) || b == &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; || (a == h &amp;amp;&amp;amp; b == &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)) {&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ret = solve(w, h, b, a);&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;p : ret) myswap(p.first, p.second);&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    } &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, h) ret.push_back(pii(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; res = solve(h, w - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, h + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; - a, b - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;p : res) p.first = h + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; - p.first, ++p.second;&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ret.insert(ret.end(), res.begin(), res.end());&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt; &lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; h, w, a, b; read(h, w, a, b);&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; ans = solve(h, w, a, b);&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; p : ans) print(p.first, p.second);&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;abc233&#34;&gt;ABC233&lt;/h3&gt;
&lt;h4 id=&#34;abc233f---swap-and-sort&#34;&gt;ABC233F - Swap and Sort&lt;/h4&gt;
&lt;p&gt;简要题意：给定排列 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(n\le 1000\)&lt;/span&gt;。同时给定 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 组关系 &lt;span class=&#34;math inline&#34;&gt;\((a_i, b_i)\)&lt;/span&gt;，每次可以交换 &lt;span class=&#34;math inline&#34;&gt;\(P_{a_i}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(P_{b_i}\)&lt;/span&gt;。构造一个最多 &lt;span class=&#34;math inline&#34;&gt;\(5\times 10^5\)&lt;/span&gt; 步的方案使得 &lt;span class=&#34;math inline&#34;&gt;\(P\)&lt;/span&gt; 为升序。&lt;/p&gt;
&lt;p&gt;整个问题可以抽象成一张图。然后可以发现，当且仅当数字 &lt;span class=&#34;math inline&#34;&gt;\(p_i\)&lt;/span&gt; 和点 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 在一个连通分量内时整个问题有解，这个问题可以写一个并查集之类的东西判断一下。&lt;/p&gt;
&lt;p&gt;然后构造方案。由于不要求最优性，所以我们可以直接考虑建出一个生成树，然后从点度为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的点开始逐个复位并删点。操作次数最多为 &lt;span class=&#34;math inline&#34;&gt;\(999 + 998 + \cdots + 1 = 499500\)&lt;/span&gt;。&lt;a href=&#34;https://atcoder.jp/contests/abc233/submissions/28192989&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc233g---strongest-takahashi&#34;&gt;ABC233G - Strongest Takahashi&lt;/h4&gt;
&lt;p&gt;简要题意：给定一张 &lt;span class=&#34;math inline&#34;&gt;\(N\times N\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(1\le N\le 50\)&lt;/span&gt;）网格，里面若干个格子有障碍。每次可以选择一个 &lt;span class=&#34;math inline&#34;&gt;\(D\times D\)&lt;/span&gt; 的区域然后消耗 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt; 点体力将其中的障碍消去。问将所有障碍消去的最小体力消耗。&lt;/p&gt;
&lt;p&gt;这种高维度的 dp 一直是我的弱点。。。考虑一个 &lt;span class=&#34;math inline&#34;&gt;\(A\times B\)&lt;/span&gt; 的矩形区域（子问题），我们显然需要 &lt;span class=&#34;math inline&#34;&gt;\(C = \max(A,B)\)&lt;/span&gt; 的体力来覆盖整个矩形。然而可能存在更少的体力消耗就能覆盖。具体地，当存在一个空行/空列时，我们就可以考虑将子矩形划开，变成两个独立子问题，看一下有没有更优解。&lt;/p&gt;
&lt;p&gt;所以设一个 &lt;span class=&#34;math inline&#34;&gt;\(f_{l,u,r,d}\)&lt;/span&gt; 来进行 dp（使用记搜转移）即可，转移复杂度似乎是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^5)\)&lt;/span&gt; 的，&lt;a href=&#34;https://atcoder.jp/contests/abc233/submissions/28194586&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc233ex---manhattan-christmas-tree&#34;&gt;ABC233Ex - Manhattan Christmas Tree&lt;/h4&gt;
&lt;p&gt;简要题意：给定平面内 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点，&lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; 次询问到 &lt;span class=&#34;math inline&#34;&gt;\((a, b)\)&lt;/span&gt; 第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 近的点到 &lt;span class=&#34;math inline&#34;&gt;\((a, b)\)&lt;/span&gt; 的距离，这里的距离指曼哈顿距离。&lt;span class=&#34;math inline&#34;&gt;\(5\times 10^5\)&lt;/span&gt;，7s。&lt;/p&gt;
&lt;p&gt;首先我们发现曼哈顿距离很不好处理第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 近之类的问题，因为既要考虑两个维度又有绝对值。所以考虑将每个点 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\((x + y, x - y)\)&lt;/span&gt;，这样原图的曼哈顿距离就可以被转化为切比雪夫距离。&lt;/p&gt;
&lt;p&gt;于是我们对于每个询问就可以二分一下第 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 近的距离，查询有多少个点到 &lt;span class=&#34;math inline&#34;&gt;\((a,b)\)&lt;/span&gt; 的切比雪夫距离 &lt;span class=&#34;math inline&#34;&gt;\(\le d\)&lt;/span&gt;，这个查询其实就是一个二维数点（查询矩形和），可以通过写一个主席树来实现。复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O((n + Q)\log^2X)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 为点的值域。主席树写着有点心烦，要注意细节，&lt;a href=&#34;https://atcoder.jp/contests/abc233/submissions/28193992&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;abc234&#34;&gt;ABC234&lt;/h3&gt;
&lt;p&gt;A，B 略。&lt;/p&gt;
&lt;p&gt;C 考虑将 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 二进制表示下的每个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 换成 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;D 维护一个小根堆在线维护前 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 大元素即可。&lt;/p&gt;
&lt;p&gt;E 发现首项只可能是 &lt;span class=&#34;math inline&#34;&gt;\(a_1\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(a_1 + 1\)&lt;/span&gt;，随后枚举公差判断是否可行即可，细节略多。&lt;/p&gt;
&lt;h4 id=&#34;abc234f---reordering&#34;&gt;ABC234F - Reordering&lt;/h4&gt;
&lt;p&gt;题意：给定一个字符串 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，问选出里面的部分字母并重排后能得到多少种不同字符串。&lt;span class=&#34;math inline&#34;&gt;\(|S|\le 5000\)&lt;/span&gt;，模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑能构成的字符串只与字符集合有关。我们不妨从 &lt;span class=&#34;math inline&#34;&gt;\(\texttt a\)&lt;/span&gt; 开始，一个个的加字符。设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, j}\)&lt;/span&gt; 表示前 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 种字符中，填满了 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个格子的方案数。转移的时候考虑第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个字符我们填 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个进去，就相当于是 &lt;span class=&#34;math inline&#34;&gt;\(j - k + 1\)&lt;/span&gt; 个不同的桶里面放 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个相同球，可以有空桶，所以转移如下： &lt;span class=&#34;math display&#34;&gt;\[
f_{i,j} = \sum_{k = 0}^{\min(j, g(i))}\binom k jf_{i- 1, j - k}
\]&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(g(i)\)&lt;/span&gt; 为第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 种字符在原串中的出现次数。&lt;/p&gt;
&lt;p&gt;那么 &lt;span class=&#34;math inline&#34;&gt;\(\sum f_{26, i}\)&lt;/span&gt; 就是答案。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;5005&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; s[maxn];&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint f[&lt;span class=&#34;dv&#34;&gt;26&lt;/span&gt;][maxn], fac[maxn], ifac[maxn];&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; buc[&lt;span class=&#34;dv&#34;&gt;27&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint binom(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; m) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; fac[n] * ifac[m] * ifac[n - m];}&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(s + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n = strlen(s + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) ++buc[s[i] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    fac[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) fac[i] = i * fac[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ifac[n] = qPow(fac[n], mod - &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    DEC(i, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) ifac[i] = (i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) * ifac[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(j, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, buc[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]) f[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][j] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;25&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(j, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            FOR(k, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, min(buc[i], j)) {&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                f[i][j] += binom(j, k) * f[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j - k];&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    modint ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) ans += f[&lt;span class=&#34;dv&#34;&gt;25&lt;/span&gt;][j];&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans);&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc234g---divide-a-sequence&#34;&gt;ABC234G - Divide a Sequence&lt;/h4&gt;
&lt;p&gt;给定长为 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 的数列 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，有 &lt;span class=&#34;math inline&#34;&gt;\(2^{N - 1}\)&lt;/span&gt; 种方法将其划分为若干个非空序列 &lt;span class=&#34;math inline&#34;&gt;\(B_1,\cdots, B_k\)&lt;/span&gt;，求出对于每种划分方式，下面这个式子的和，对 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 取模，&lt;span class=&#34;math inline&#34;&gt;\(N\le 3\times 10^5\)&lt;/span&gt;。 &lt;span class=&#34;math display&#34;&gt;\[
\prod_{i = 1}^k(\max\{B_i\} - \min\{B_i\})
\]&lt;/span&gt; 考虑一个 dp：&lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(A_1, \cdots, A_i\)&lt;/span&gt; 的答案，边界为 &lt;span class=&#34;math inline&#34;&gt;\(f_0 = 1\)&lt;/span&gt;。则我们可以知道： &lt;span class=&#34;math display&#34;&gt;\[
f_i = \sum_{j = 0}^{i - 1}f_j(\max_{k = j + 1}^i\{A_i\} - \min_{k = j + 1}^i\{A_i\})
\]&lt;/span&gt; 这个式子看似是 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; 的，拆开来： &lt;span class=&#34;math display&#34;&gt;\[
f_i = \sum_{j = 0}^{i - 1}f_j\max_{k = j + 1}^i\{A_i\} - \sum_{j = 0}^{i - 1}f_j\min_{k = j + 1}^i\{A_i\}
\]&lt;/span&gt; 然后我们维护一下 &lt;span class=&#34;math inline&#34;&gt;\(\max_{k = j + 1}^i\{A_k\}\)&lt;/span&gt;，以及对应的 dp 值之和，使用单调栈就可以完成这题了。答案即为 &lt;span class=&#34;math inline&#34;&gt;\(f_n\)&lt;/span&gt;，实现细节见代码。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;3e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint f[maxn];&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a[maxn], n;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; node {&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    modint v;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} st1[maxn], st2[maxn];&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; top1, top2;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n);&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) read(a[i]);&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    modint maxsum = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, minsum = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        modint sumv = f[i];&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (top1 &amp;amp;&amp;amp; st1[top1].a &amp;lt; a[i]) {&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            maxsum -= st1[top1].a * st1[top1].v;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            sumv += st1[top1].v;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            --top1;&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        maxsum += sumv * a[i];&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ++top1, st1[top1] = {a[i], sumv};&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        sumv = f[i];&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (top2 &amp;amp;&amp;amp; st2[top2].a &amp;gt; a[i]) {&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            minsum -= st2[top2].a * st2[top2].v;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            sumv += st2[top2].v;&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            --top2;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        minsum += sumv * a[i];&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ++top2, st2[top2] = {a[i], sumv};&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        f[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] = maxsum - minsum;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(f[n + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc234ex---enumerate-pairs&#34;&gt;ABC234Ex - Enumerate Pairs&lt;/h4&gt;
&lt;p&gt;给定二维平面上的 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个点 &lt;span class=&#34;math inline&#34;&gt;\((x_i, y_i)\)&lt;/span&gt; 和一个正整数 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;。请列出所有欧几里得距离小于等于 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 的点对。&lt;span class=&#34;math inline&#34;&gt;\(1\le N\le 2\times 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le K\le 1.5\times 10^9\)&lt;/span&gt;。保证最多 &lt;span class=&#34;math inline&#34;&gt;\(4\times 10^5\)&lt;/span&gt; 对点对将被枚举。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下题解参考了 AtCoder 官方题解&lt;/strong&gt;，&lt;a href=&#34;https://atcoder.jp/contests/abc234/editorial/3235&#34;&gt;传送门&lt;/a&gt;。神仙结论题，先给出结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于每个点 &lt;span class=&#34;math inline&#34;&gt;\((x_i, y_i)\)&lt;/span&gt;，将其分配到集合 &lt;span class=&#34;math inline&#34;&gt;\((\lfloor x_i/K\rfloor, \lfloor y_i/K\rfloor)\)&lt;/span&gt; 中。&lt;/li&gt;
&lt;li&gt;然后对于任意一个点，若其被分配到了 &lt;span class=&#34;math inline&#34;&gt;\((X, Y)\)&lt;/span&gt; 集合中，则能与其配对的点一定在 &lt;span class=&#34;math inline&#34;&gt;\((X + m, Y + l)\)&lt;/span&gt; 集合中，其中 &lt;span class=&#34;math inline&#34;&gt;\(-1\le m,l\le 1\)&lt;/span&gt;。直接枚举即可得到答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后，其时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(N + M)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 为输出的答案个数（忽略了使用数据结构产生的 &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt;）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; ll = &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; pii = pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; pll = pair&amp;lt;ll, ll&amp;gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;2e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; ll big = &lt;span class=&#34;dv&#34;&gt;2000000000&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n; ll K;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;pll p[maxn];&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;map&amp;lt;ll, vector&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; mp;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;ll&amp;gt; delta = {-big - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -big, -big + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, big - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, big, big + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, K);&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        read(p[i].first, p[i].second);&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ll id = (p[i].first / K) * big + (p[i].second / K);&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        mp[id].push_back(i);&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    vector&amp;lt;pii&amp;gt; ans;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ll id = (p[i].first / K) * big + (p[i].second / K);&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;d : delta) {&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            ll curid = id + d;&lt;/span&gt;
&lt;span id=&#34;cb7-23&#34;&gt;&lt;a href=&#34;#cb7-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;j : mp[curid]) {&lt;/span&gt;
&lt;span id=&#34;cb7-24&#34;&gt;&lt;a href=&#34;#cb7-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (j &amp;gt;= i) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-25&#34;&gt;&lt;a href=&#34;#cb7-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                ll dis = (p[i].first - p[j].first) * (p[i].first - p[j].first) + (p[i].second - p[j].second) * (p[i].second - p[j].second);&lt;/span&gt;
&lt;span id=&#34;cb7-26&#34;&gt;&lt;a href=&#34;#cb7-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (dis &amp;lt;= K * K) ans.push_back(pii(j, i));&lt;/span&gt;
&lt;span id=&#34;cb7-27&#34;&gt;&lt;a href=&#34;#cb7-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb7-28&#34;&gt;&lt;a href=&#34;#cb7-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb7-29&#34;&gt;&lt;a href=&#34;#cb7-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb7-30&#34;&gt;&lt;a href=&#34;#cb7-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    sort(ans.begin(), ans.end());&lt;/span&gt;
&lt;span id=&#34;cb7-31&#34;&gt;&lt;a href=&#34;#cb7-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans.size());&lt;/span&gt;
&lt;span id=&#34;cb7-32&#34;&gt;&lt;a href=&#34;#cb7-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;p : ans) print(p.first, p.second);&lt;/span&gt;
&lt;span id=&#34;cb7-33&#34;&gt;&lt;a href=&#34;#cb7-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb7-34&#34;&gt;&lt;a href=&#34;#cb7-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述做法得解的正确性较为显然，这里不说明。下面对时间复杂度给出证明。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&#34;math inline&#34;&gt;\(B_{X, Y}\)&lt;/span&gt; 为集合 &lt;span class=&#34;math inline&#34;&gt;\((X,Y)\)&lt;/span&gt; 中的点的数量，&lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 为“含 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个点的集合内最少的距离小于等于 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 的点对数”。&lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 的上界显然为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;，下面证明其下界为 &lt;span class=&#34;math inline&#34;&gt;\(\Omega(n^2)\)&lt;/span&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个边长小于 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{K}{\sqrt 2}\)&lt;/span&gt; 的子正方形区域中，每一对点对的距离都小于 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;。而一个 &lt;span class=&#34;math inline&#34;&gt;\(K\times K\)&lt;/span&gt; 的正方形区域能由 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt; 个小的边长为 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{K}{\sqrt 2}\)&lt;/span&gt; 的小正方形覆盖。考虑往大区域中放 &lt;span class=&#34;math inline&#34;&gt;\(4n\)&lt;/span&gt; 个点，则至少一个小区域包含至少 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点。该小区域有 &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{n(n - 1)}{2}\)&lt;/span&gt; 个点对，所以 &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; 的下界为 &lt;span class=&#34;math inline&#34;&gt;\(\Omega(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而 &lt;span class=&#34;math inline&#34;&gt;\(\sum_{X,Y}f(B_{X,Y}) \le M\)&lt;/span&gt;，故 &lt;span class=&#34;math inline&#34;&gt;\(\sum_{X,Y}B^2_{X,Y}\)&lt;/span&gt; 的上界为 &lt;span class=&#34;math inline&#34;&gt;\(O(N + M)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后我们的算法里面，要枚举的点对数为 &lt;span class=&#34;math inline&#34;&gt;\(\sum_{X,Y}\sum_{m = -1}^1\sum_{l = -1}^1B_{X,Y}B_{X+m,Y+l}\)&lt;/span&gt;。因为 &lt;span class=&#34;math inline&#34;&gt;\(\sum_{X,Y}B^2_{X,Y}\)&lt;/span&gt; 的上界为 &lt;span class=&#34;math inline&#34;&gt;\(O(N + M)\)&lt;/span&gt;，然后，根据均值不等式，&lt;span class=&#34;math inline&#34;&gt;\(B_{X,Y}B_{X + m,Y+l}\le \dfrac12(B_{X,Y}^2 + B_{X + m, Y + l}^2)\)&lt;/span&gt;，所以整体的上界也是 &lt;span class=&#34;math inline&#34;&gt;\(O(N + M)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;证毕。&lt;/p&gt;
&lt;h3 id=&#34;abc235&#34;&gt;ABC235&lt;/h3&gt;
&lt;p&gt;A, B, C 略。&lt;/p&gt;
&lt;p&gt;D 考虑一个 BFS，每次变换看作一次转移，由于有效状态最多 &lt;span class=&#34;math inline&#34;&gt;\(10^7\)&lt;/span&gt; 个，所以是正确的。&lt;/p&gt;
&lt;h4 id=&#34;abc235f---variety-of-digits&#34;&gt;ABC235F - Variety of Digits&lt;/h4&gt;
&lt;p&gt;给 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个数位 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt;，问 &lt;span class=&#34;math inline&#34;&gt;\([1, n]\)&lt;/span&gt; 中十进制下包含了全部 &lt;span class=&#34;math inline&#34;&gt;\(c_1,\cdots, c_m\)&lt;/span&gt; 数位的整数的和（前导 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 不算），答案对 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 取模。&lt;span class=&#34;math inline&#34;&gt;\(1\le n\le 10^{10^4}\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le m\le 10\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(0\le c_1&amp;lt;\cdots&amp;lt;c_m\le 9\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;数位 DP。考虑到我们可以将数位集合压起来，所以设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, S}\)&lt;/span&gt; 表示从低到高第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 位，从高到低已经选的数位集合为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的数字个数和数字和（注意这两个东西需要同时维护）。&lt;/p&gt;
&lt;p&gt;那么转移应该是比较好想的，注意前导 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 不应计算在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 内。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;1e4&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; s[maxn];&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m, c[&lt;span class=&#34;dv&#34;&gt;11&lt;/span&gt;], S0, a[maxn];&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;pair&amp;lt;modint, modint&amp;gt; f[maxn][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint pow10[maxn];&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; vis[maxn][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;pair&amp;lt;modint, modint&amp;gt; dfs(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; pos, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; S, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; lim, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; zero) {&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (pos == -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((S &amp;amp; S0) == S0) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; {&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; {&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!lim &amp;amp;&amp;amp; !zero &amp;amp;&amp;amp; vis[pos][S]) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; f[pos][S];&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; up = lim ? a[pos] : &lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    pair&amp;lt;modint, modint&amp;gt; ret = {&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, up) {&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        pair&amp;lt;modint, modint&amp;gt; tmp;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (zero &amp;amp;&amp;amp; !i) tmp = dfs(pos - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, S, lim &amp;amp;&amp;amp; i == up, zero);&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; tmp = dfs(pos - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, S | (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i), lim &amp;amp;&amp;amp; i == up, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ret.first += tmp.first;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ret.second += tmp.second + tmp.first * pow10[pos] * i;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!lim &amp;amp;&amp;amp; !zero) vis[pos][S] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, f[pos][S] = ret;&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(s + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), n = strlen(s + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb8-29&#34;&gt;&lt;a href=&#34;#cb8-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    pow10[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb8-30&#34;&gt;&lt;a href=&#34;#cb8-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) a[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] = s[n - i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, pow10[i] = &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; * pow10[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb8-31&#34;&gt;&lt;a href=&#34;#cb8-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(m);&lt;/span&gt;
&lt;span id=&#34;cb8-32&#34;&gt;&lt;a href=&#34;#cb8-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) read(c[i]), S0 |= (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; c[i]);&lt;/span&gt;
&lt;span id=&#34;cb8-33&#34;&gt;&lt;a href=&#34;#cb8-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(dfs(n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;).second);&lt;/span&gt;
&lt;span id=&#34;cb8-34&#34;&gt;&lt;a href=&#34;#cb8-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb8-35&#34;&gt;&lt;a href=&#34;#cb8-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc235g---gardens&#34;&gt;ABC235G - Gardens&lt;/h4&gt;
&lt;p&gt;三种颜色的球分别有 &lt;span class=&#34;math inline&#34;&gt;\(A, B, C\)&lt;/span&gt; 个，同种颜色的球不区分，现将其放入 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个有标号的箱子内，要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个箱子至少有 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 个球。&lt;/li&gt;
&lt;li&gt;每个箱子内至多有 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 个同种球。&lt;/li&gt;
&lt;li&gt;不必放完所有的球。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求方案数模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le N\le 5\times 10^6\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(0\le A,B,C\le N\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;朴素的 DP 容易想到，&lt;span class=&#34;math inline&#34;&gt;\(O(NABC) = O(N^4)\)&lt;/span&gt;，铁定过不去。不妨反着考虑问题，发现“为空”比“不为空”要好想得多，考虑对于一个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，计算“至少有 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个箱子为空”的方案数，不难发现其就为 &lt;span class=&#34;math display&#34;&gt;\[
\binom{N}{i}\left(\sum_{a=0}^{\min\{N-  i, A\}}\binom{N - i}{a}\right)\left(\sum_{b=0}^{\min\{N-  i, B\}}\binom{N - i}{b}\right)\left(\sum_{c=0}^{\min\{N-  i, C\}}\binom{N - i}{c}\right)
\]&lt;/span&gt; 解释：首先选 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个一定为空的箱子，然后分别枚举三种颜色的球放的个数并放入 &lt;span class=&#34;math inline&#34;&gt;\(N - i\)&lt;/span&gt; 个可能不为空的箱子。&lt;/p&gt;
&lt;p&gt;答案为“恰好有 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 个箱子为空”，二项式反演一下（中间推导过程省略，就是一个简单容斥）得到答案为 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=0}^N(-1)^i\binom{N}{i}\left(\sum_{a=0}^{\min\{N-  i, A\}}\binom{N - i}{a}\right)\left(\sum_{b=0}^{\min\{N-  i, B\}}\binom{N - i}{b}\right)\left(\sum_{c=0}^{\min\{N-  i, C\}}\binom{N - i}{c}\right)
\]&lt;/span&gt; 化的好看点就是 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=0}^N(-1)^{N - i}\binom{N}{i}\left(\sum_{a=0}^{\min\{i, A\}}\binom{i}{a}\right)\left(\sum_{b=0}^{\min\{i, B\}}\binom{i}{b}\right)\left(\sum_{c=0}^{\min\{i, C\}}\binom{i}{c}\right)
\]&lt;/span&gt; 然而直接计算还是需要 &lt;span class=&#34;math inline&#34;&gt;\(O(N^2)\)&lt;/span&gt;，继续优化计算过程。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(f_{M}(N) = \displaystyle\sum_{i=0}^{\min\{N, M\}}\binom N i\)&lt;/span&gt;，则答案可以改写为 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=0}^N(-1)^{N-i}\binom Ni f_{A}(i)f_{B}(i)f_C(i)
\]&lt;/span&gt; 如果我们知道了 &lt;span class=&#34;math inline&#34;&gt;\(f_M(N)\)&lt;/span&gt; 的值后能 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 推出 &lt;span class=&#34;math inline&#34;&gt;\(f_{M}(N + 1)\)&lt;/span&gt; 的值，整个问题就可以 &lt;span class=&#34;math inline&#34;&gt;\(O(N)\)&lt;/span&gt; 解决了。&lt;/p&gt;
&lt;p&gt;当 &lt;span class=&#34;math inline&#34;&gt;\(N+ 1\le M\)&lt;/span&gt; 的时候，&lt;span class=&#34;math inline&#34;&gt;\(\min\{N+1,M\} = N+1\)&lt;/span&gt;，所以根据二项式定理，&lt;span class=&#34;math inline&#34;&gt;\(f_{M}(N+1)=2f_M(N)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;下面的解法参考 &lt;a href=&#34;https://atcoder.jp/contests/abc235/editorial/3262&#34;&gt;AtCoder 官方题解&lt;/a&gt;，推荐去学习一下这个思想。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.atcoder.jp/ghi/d93c643497867d310c6255fb673d9682.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际上，&lt;span class=&#34;math inline&#34;&gt;\(f_M(N)\)&lt;/span&gt; 就可以看作从左下角出发，每一步往上/右走一格，走到橙色点的方案数（总步数都是 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;，我们枚举了横向走的步数 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 而已）。&lt;/p&gt;
&lt;p&gt;于是 &lt;span class=&#34;math inline&#34;&gt;\(f_M(N)\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(f_M(N + 1)\)&lt;/span&gt; 的关系就变成了求走到橙色点的方案数与走到蓝色点的方案数之间的关系。发现，我们在一个橙色点的时候总可以往上/右走一格到达蓝色点，除去最右下角那个点即可。所以 &lt;span class=&#34;math display&#34;&gt;\[
f_M(N+ 1) = 2f_M(N) - \binom{N}{M}
\]&lt;/span&gt; 发现对于上面的情况，只需定义 &lt;span class=&#34;math inline&#34;&gt;\(N&amp;lt;M\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(\dbinom NM\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，下面的公式也是完全适用的。&lt;span class=&#34;math inline&#34;&gt;\(f_M(0) = 0\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;于是这道题 &lt;span class=&#34;math inline&#34;&gt;\(O(N)\)&lt;/span&gt; 解决了。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;5e6&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint fac[maxn], ifac[maxn];&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, A, B, C;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint binom(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; m) {&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (n &amp;lt; m) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; fac[n] * ifac[m] * ifac[n - m];&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, A, B, C);&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    fac[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) fac[i] = fac[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] * i;&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ifac[n] = qPow(fac[n], mod - &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    DEC(i, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) ifac[i] = (i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) * ifac[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    modint ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, a = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, b = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, c = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        modint tmp = ((n - i) &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) ? -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; : &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        tmp *= binom(n, i);&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            a = &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * a - binom(i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, A);&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            b = &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * b - binom(i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, B);&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            c = &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * c - binom(i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, C);&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        tmp *= a * b * c;&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans += tmp;&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans);&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb9-30&#34;&gt;&lt;a href=&#34;#cb9-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc235ex---painting-weighted-graph&#34;&gt;ABC235Ex - Painting Weighted Graph&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 点 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 边带边权无向图，&lt;span class=&#34;math inline&#34;&gt;\(2\le N\le 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(0\le M\le 10^5\)&lt;/span&gt;。一开始，每个节点上涂黑色，可以进行如下操作至多 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 次：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;选择一个节点 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 和一个数 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，将所有的从 &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; 出发，不经过任何权值大于 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的边能到达的点涂为红色。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问可能的红色点集的数量，模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt;。图可能有重边和自环。&lt;/p&gt;
&lt;p&gt;咕，以后有空来补。&lt;/p&gt;
&lt;h3 id=&#34;abc237&#34;&gt;ABC237&lt;/h3&gt;
&lt;p&gt;A 可以投机取巧一下强制转为 &lt;code&gt;int&lt;/code&gt; 之后是否与原来相等。&lt;/p&gt;
&lt;p&gt;B 略，C 随便观察一下即可，略。D 可以实现一个 &lt;code&gt;deque&lt;/code&gt; 或者倒序考虑问题，略。&lt;/p&gt;
&lt;p&gt;E 建出图后发现是一个带有负权边的最短路模型，跑个 SPFA 可以过，略。&lt;/p&gt;
&lt;h4 id=&#34;abc237e---skiing&#34;&gt;ABC237E - Skiing&lt;/h4&gt;
&lt;p&gt;滑雪场有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个地点，有 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个坡，保证图连通。每个节点有高度 &lt;span class=&#34;math inline&#34;&gt;\(h_u\)&lt;/span&gt;。当从边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt; 通过时，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(h_u &amp;gt; h_v\)&lt;/span&gt;，则快乐指数增加 &lt;span class=&#34;math inline&#34;&gt;\(h_u - h_v\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;否则，快乐指数减小 &lt;span class=&#34;math inline&#34;&gt;\(2(h_v - h_u)\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 出发，初始快乐指数为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，问能达到的最大快乐指数。&lt;span class=&#34;math inline&#34;&gt;\(n, m\)&lt;/span&gt; 均为 &lt;span class=&#34;math inline&#34;&gt;\(2\times 10^5\)&lt;/span&gt; 级别。&lt;/p&gt;
&lt;p&gt;首先对边权取相反数建模成最短路模型，发现其有负权边，无法直接使用 Dijkstra，而数据范围又极有可能卡死 SPFA（事实证明 SPFA 能过）。&lt;/p&gt;
&lt;p&gt;考虑势能 Dijkstra，为每个点增加一个势能 &lt;span class=&#34;math inline&#34;&gt;\(h_u\)&lt;/span&gt;，然后对边 &lt;span class=&#34;math inline&#34;&gt;\(u\to v\)&lt;/span&gt; 的权值加上 &lt;span class=&#34;math inline&#34;&gt;\(h_u - h_v\)&lt;/span&gt;，使得所有边权非负，最后每个点的答案就为 &lt;span class=&#34;math inline&#34;&gt;\(d_u + h_u - h_1\)&lt;/span&gt;。但是求势能的过程仍然需要 SPFA，怎么办呢？&lt;/p&gt;
&lt;p&gt;注意到本题中的“高度”就是一个现成的势能，满足了势能之差只和相对高度有关这一性质，所以直接将其当作势能来做就可以了，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(m\log n)\)&lt;/span&gt;，&lt;a href=&#34;https://atcoder.jp/contests/abc237/submissions/29219115&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc237f---lis-3&#34;&gt;ABC237F - |LIS| = 3&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;，求满足以下条件的正整数序列的个数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长度为 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;，每个元素 &lt;span class=&#34;math inline&#34;&gt;\(\in[1, M]\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;其 LIS 的长度恰好为 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(3\le N\le 1000\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(3\le M\le 10\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑经典的 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; 的 LIS 的做法，发现 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 为“长度为 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的 LIS 的最小结尾数字”，而 DP 数组的长度即为 LIS 的长度，所以干脆考虑令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, a, b, c}\)&lt;/span&gt; 表示当前考虑到 &lt;span class=&#34;math inline&#34;&gt;\([1, i]\)&lt;/span&gt;，LIS 的 DP 数组为 &lt;span class=&#34;math inline&#34;&gt;\(a, b, c\)&lt;/span&gt; 的序列个数。不难发现这个状态是没有后效性的，转移就考虑当前填什么数，然后仿照 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt; LIS 的转移方式进行转移。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(NM^4)\)&lt;/span&gt;，可以通过。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint f[&lt;span class=&#34;dv&#34;&gt;1005&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, m);&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) FOR(k, j, m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) FOR(l, k, m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) FOR(t, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (t &amp;lt;= j) f[i][t][k][l] += f[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j][k][l];&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (t &amp;lt;= k) f[i][j][t][l] += f[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j][k][l];&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (t &amp;lt;= l) f[i][j][k][t] += f[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][j][k][l];&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    modint ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) FOR(j, i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) FOR(k, j + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) ans += f[n][i][j][k];&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans);&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc237g---range-sort-query&#34;&gt;ABC237G - Range Sort Query&lt;/h4&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 的排列，&lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 次操作，操作为选定一区间 &lt;span class=&#34;math inline&#34;&gt;\([l, r]\)&lt;/span&gt; 然后升序/降序排序，问元素 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 最后的下标在哪里。&lt;span class=&#34;math inline&#34;&gt;\(1\le N, Q\le 2\times 10^5\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这是一个经典问题（HEOI 排序）的变式。最强大的解法显然为线段树合并/分裂，但是在这里不需要。&lt;/p&gt;
&lt;p&gt;注意到，0-1 序列的区间排序很好使用线段树来完成，只需要实现区间染色和区间求和。所以我们考虑将其转为 0-1 序列。&lt;/p&gt;
&lt;p&gt;具体地，将 &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt; X\)&lt;/span&gt; 的元素变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，其他变为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，操作，得到一个结果。将 &lt;span class=&#34;math inline&#34;&gt;\(\le X\)&lt;/span&gt; 的元素变为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，其他变为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，操作，得到另一个结果，然后然后然后发现这两个序列唯一一个不一样的地方显然就是 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; 最后的位置。&lt;/p&gt;
&lt;p&gt;所以复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(N\log N)\)&lt;/span&gt;，视 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 同阶。&lt;a href=&#34;https://atcoder.jp/contests/abc237/submissions/29158241&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;abc237ex---hakata&#34;&gt;ABC237Ex - Hakata&lt;/h4&gt;
&lt;p&gt;给定长度 &lt;span class=&#34;math inline&#34;&gt;\(\le 200\)&lt;/span&gt; 的字符串 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，问最多能从里面选出多少个&lt;strong&gt;回文子段&lt;/strong&gt;，使得一个子段不是另一个子段的子段。子段指连续的。&lt;/p&gt;
&lt;p&gt;我们发现，不同回文子串的个数 &lt;span class=&#34;math inline&#34;&gt;\(\le |S|\)&lt;/span&gt;，然后子串间的包含关系是一种偏序关系，可以形成一个 DAG，而原问题问的就是其的最大反链。&lt;/p&gt;
&lt;p&gt;复习一下 &lt;a href=&#34;https://www.luogu.com.cn/problem/P4298&#34;&gt;P4298 [CTSC2008]祭祀&lt;/a&gt; 便知道最大反链 = 最小链覆盖（Dilworth 引理），而最小链覆盖可以通过拆点二分图匹配来求。&lt;/p&gt;
&lt;p&gt;放到本题里面，就对于每个不同回文子段（这部分顶天 &lt;span class=&#34;math inline&#34;&gt;\(O(|S|^3)\)&lt;/span&gt;），为其标号，然后对于 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的子串，连边 &lt;span class=&#34;math inline&#34;&gt;\(i_{\mathrm {left}}\to j_{\mathrm{right}}\)&lt;/span&gt;，然后跑二分图最大匹配，用回文串数量减去匹配即得到答案。时间复杂度就不分析了，&lt;span class=&#34;math inline&#34;&gt;\(400\)&lt;/span&gt; 个点的二分图匹配并不慢，&lt;a href=&#34;https://atcoder.jp/contests/abc237/submissions/29158769&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;abc244&#34;&gt;ABC244&lt;/h3&gt;
&lt;h4 id=&#34;abc244d---swap-hats&#34;&gt;ABC244D - Swap Hats&lt;/h4&gt;
&lt;p&gt;&lt;del&gt;大胆猜结论&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;发现若相同的位置有 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个或 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 个时为 Yes，否则为 No，下面给出简要说明。&lt;/p&gt;
&lt;p&gt;为 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个的时候就把两个反复横跳即可，为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 个的话可以构造方案在操作两次后转化为 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个一样的情况。&lt;/p&gt;
&lt;p&gt;否则相同的位置只可能有 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 个，做任意一次交换后都会变成上面两种情况，所以寄了。&lt;/p&gt;
&lt;h4 id=&#34;abc244f---shortest-good-path&#34;&gt;ABC244F - Shortest Good Path&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 点 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 边无向图，令长度为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 的路径 &lt;span class=&#34;math inline&#34;&gt;\(A_{1,\cdots, K}\)&lt;/span&gt; 对长度为 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 的 0-1 串 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 为合法的当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的出现次数模 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 后等于 &lt;span class=&#34;math inline&#34;&gt;\(S_i\)&lt;/span&gt;。对于 &lt;span class=&#34;math inline&#34;&gt;\(2^n\)&lt;/span&gt; 种不同的 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，求出最小的合法的路径的 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 之和。&lt;span class=&#34;math inline&#34;&gt;\(n\le 17\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;范围让我们想到状压 dp。&lt;/p&gt;
&lt;p&gt;对于这种图上有链的，就令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,S}\)&lt;/span&gt; 为以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾，点集为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的链的什么什么。然后注意到这个状态是没法转移的，因为接上一个在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 里面存在的点之后，&lt;span class=&#34;math inline&#34;&gt;\(S&amp;#39;\)&lt;/span&gt; 是小于 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的。&lt;/p&gt;
&lt;p&gt;那就考虑翻转一下状态和值，令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,k,S}\)&lt;/span&gt; 为以 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 结尾，长度为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，点集为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的链是否存在。然后转移就很好做到了，毛估估复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^32^n)\)&lt;/span&gt;，有点勉强但是实现的好的话可以通过。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;解释一下为什么长度上界是 &lt;span class=&#34;math inline&#34;&gt;\(4n\)&lt;/span&gt;，因为 G 题说了上界是 &lt;span class=&#34;math inline&#34;&gt;\(4n\)&lt;/span&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;18&lt;/span&gt;, maxS = (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;17&lt;/span&gt;) | &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m, G[maxn][maxn];&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; f[maxn][&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; * maxn][maxS];&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; vis[maxS];&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, m);&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, v; read(u, v);&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        G[u][v] = G[v][u] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(vis, &lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; vis);&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) f[i][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;; vis[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(k, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; * n) { &lt;span class=&#34;co&#34;&gt;// length&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            FOR(S, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (G[i][j]) {&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    f[i][k + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][S] |= f[j][k][S ^ (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))];&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (f[i][k + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][S]) &lt;span class=&#34;cf&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                chkmin(vis[S], f[i][k][S] ? k : (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;)&lt;span class=&#34;fl&#34;&gt;1e9&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) ans += vis[i];&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans);&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这还不是最优的，而且这个拿结论来推的想法很不优美。我们注意到，若将 dp 状态 &lt;span class=&#34;math inline&#34;&gt;\((i, S)\)&lt;/span&gt; 看作点，转移看作边，那么问题就变成了最短路。&lt;/p&gt;
&lt;p&gt;时间复杂度会少一个 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(O(n^22^n)\)&lt;/span&gt; 跑的还是很快的，而且少了 &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt; 倍常数。&lt;/p&gt;
&lt;h4 id=&#34;abc244g---construct-good-path&#34;&gt;ABC244G - Construct Good Path&lt;/h4&gt;
&lt;p&gt;全部继承 F 的定义，将范围改成 &lt;span class=&#34;math inline&#34;&gt;\(N\le 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(M\le 2\times 10^5\)&lt;/span&gt;，并给定 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 然后让你构造一个合法的 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;。要求长度不超过 &lt;span class=&#34;math inline&#34;&gt;\(4N\)&lt;/span&gt;，保证有解。&lt;/p&gt;
&lt;p&gt;首先将这个问题放到生成树上。然后就从根节点往下走。对于 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，若从他的子树出来后还是不对头，那就反复横跳一次。&lt;/p&gt;
&lt;p&gt;对于根节点特判一下即可。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;1e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; s[maxn];&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m, vis[maxn];&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; G[maxn], ans;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; dfs(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u) {&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ans.push_back(u), ++vis[u];&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; &amp;amp;v : G[u]) {&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (vis[v]) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        dfs(v);&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((vis[v] &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) != s[v] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            ans.push_back(u), ++vis[u], ans.push_back(v), ++vis[v];&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans.push_back(u), ++vis[u];&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-18&#34;&gt;&lt;a href=&#34;#cb12-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb12-19&#34;&gt;&lt;a href=&#34;#cb12-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, m);&lt;/span&gt;
&lt;span id=&#34;cb12-20&#34;&gt;&lt;a href=&#34;#cb12-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb12-21&#34;&gt;&lt;a href=&#34;#cb12-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, v; read(u, v);&lt;/span&gt;
&lt;span id=&#34;cb12-22&#34;&gt;&lt;a href=&#34;#cb12-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        G[u].push_back(v), G[v].push_back(u);&lt;/span&gt;
&lt;span id=&#34;cb12-23&#34;&gt;&lt;a href=&#34;#cb12-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb12-24&#34;&gt;&lt;a href=&#34;#cb12-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(s + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb12-25&#34;&gt;&lt;a href=&#34;#cb12-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dfs(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb12-26&#34;&gt;&lt;a href=&#34;#cb12-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((vis[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) != s[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) ans.pop_back();&lt;/span&gt;
&lt;span id=&#34;cb12-27&#34;&gt;&lt;a href=&#34;#cb12-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans.size());&lt;/span&gt;
&lt;span id=&#34;cb12-28&#34;&gt;&lt;a href=&#34;#cb12-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; &amp;amp;x : ans) print(x, &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb12-29&#34;&gt;&lt;a href=&#34;#cb12-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb12-30&#34;&gt;&lt;a href=&#34;#cb12-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc244ex---linear-maximization未写代码&#34;&gt;ABC244Ex - Linear Maximization（未写代码）&lt;/h4&gt;
&lt;p&gt;维护二维平面上的点集 &lt;span class=&#34;math inline&#34;&gt;\(S = \{(x, y)\}\)&lt;/span&gt;，初始为空。下面进行 &lt;span class=&#34;math inline&#34;&gt;\(Q\)&lt;/span&gt; 次操作，每次往 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 中加入点 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 并给定 &lt;span class=&#34;math inline&#34;&gt;\(a,b\)&lt;/span&gt; 并查询 &lt;span class=&#34;math inline&#34;&gt;\(\max_{(x,y)\in S}\{ax + by\}\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(Q\le 2\times 10^5\)&lt;/span&gt;，坐标绝对值 &lt;span class=&#34;math inline&#34;&gt;\(\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;解法 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;：考虑 &lt;span class=&#34;math inline&#34;&gt;\(ax + by = b(\frac ab\cdot x + y)\)&lt;/span&gt;，看出一次函数的形式之后无脑李超树即可。但是需要注意特判符号，&lt;span class=&#34;math inline&#34;&gt;\(b=0\)&lt;/span&gt; 等情况。而且浮点误差似乎有点心烦所以我没写。&lt;/p&gt;
&lt;p&gt;解法 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;：拿平衡树维护动态凸包，然后在凸包上三分查询。&lt;/p&gt;
&lt;p&gt;不想写代码了。&lt;/p&gt;
&lt;h3 id=&#34;abc246&#34;&gt;ABC246&lt;/h3&gt;
&lt;p&gt;A 直接随便做。&lt;/p&gt;
&lt;p&gt;B 输出 &lt;span class=&#34;math inline&#34;&gt;\(\cos(\theta)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\sin(\theta)\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;C 先按照物品大小贪一次心，然后再将剩下部分（&lt;span class=&#34;math inline&#34;&gt;\(a_i\bmod x\)&lt;/span&gt; 的部分）重新排序再做一次贪心。容易说明其正确性。&lt;/p&gt;
&lt;p&gt;D 发现 &lt;span class=&#34;math inline&#34;&gt;\((a+b)(a^2+b^2)\le 10^{18}\)&lt;/span&gt;，钦定 &lt;span class=&#34;math inline&#34;&gt;\(a\ge b\)&lt;/span&gt; 的话发现 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的上界只能为 &lt;span class=&#34;math inline&#34;&gt;\(10^6\)&lt;/span&gt;，所以枚举 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 然后二分 &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;h4 id=&#34;abc246e---bishop-2&#34;&gt;ABC246E - Bishop 2&lt;/h4&gt;
&lt;p&gt;场上调这题调到最后都寄了。。。&lt;/p&gt;
&lt;p&gt;发现整个就是一个 0-1 bfs 的模型，每次看成走一格，同向走相当于比边权为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，转向相当于边权为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;复杂度就是 bfs 的复杂度，容易说明其为 &lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;1505&lt;/span&gt;, fx[] = {&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;}, fy[] = {&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;queue&amp;lt;pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; mp[maxn][maxn];&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, sx, sy, tx, ty, f[maxn][maxn];&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; sx &amp;gt;&amp;gt; sy &amp;gt;&amp;gt; tx &amp;gt;&amp;gt; ty;&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) cin &amp;gt;&amp;gt; &amp;amp;mp[i][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[sx][sy] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, q.push({sx, sy});&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; check = [](&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; y) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; x &amp;gt;= &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; x &amp;lt;= n &amp;amp;&amp;amp; y &amp;gt;= &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt;= n &amp;amp;&amp;amp; mp[x][y] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;};&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb13-16&#34;&gt;&lt;a href=&#34;#cb13-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; now = q.front(); q.pop();&lt;/span&gt;
&lt;span id=&#34;cb13-17&#34;&gt;&lt;a href=&#34;#cb13-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(k, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb13-18&#34;&gt;&lt;a href=&#34;#cb13-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x = now.first, y = now.second;&lt;/span&gt;
&lt;span id=&#34;cb13-19&#34;&gt;&lt;a href=&#34;#cb13-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb13-20&#34;&gt;&lt;a href=&#34;#cb13-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                x += fx[k], y += fy[k];&lt;/span&gt;
&lt;span id=&#34;cb13-21&#34;&gt;&lt;a href=&#34;#cb13-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!check(x, y)) &lt;span class=&#34;cf&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb13-22&#34;&gt;&lt;a href=&#34;#cb13-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!f[x][y]) f[x][y] = f[now.first][now.second] + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, q.push({x, y});&lt;/span&gt;
&lt;span id=&#34;cb13-23&#34;&gt;&lt;a href=&#34;#cb13-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (f[x][y] &amp;lt;= f[now.first][now.second]) &lt;span class=&#34;cf&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb13-24&#34;&gt;&lt;a href=&#34;#cb13-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb13-25&#34;&gt;&lt;a href=&#34;#cb13-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb13-26&#34;&gt;&lt;a href=&#34;#cb13-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-27&#34;&gt;&lt;a href=&#34;#cb13-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cout &amp;lt;&amp;lt; f[tx][ty] - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;
&lt;span id=&#34;cb13-28&#34;&gt;&lt;a href=&#34;#cb13-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb13-29&#34;&gt;&lt;a href=&#34;#cb13-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;abc246f---typewriter&#34;&gt;ABC246F - typewriter&lt;/h4&gt;
&lt;p&gt;考虑对单个串我们怎么计数，不难发现是 &lt;span class=&#34;math inline&#34;&gt;\(\text{字母个数}^L\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;那么多个串来了，我们就需要去重。具体地，我们取两个串字母的交，然后扣掉这一部分的答案。&lt;/p&gt;
&lt;p&gt;那么扩展一下就是最基本的容斥，看到 &lt;span class=&#34;math inline&#34;&gt;\(n\le 18\)&lt;/span&gt; 就枚举所有串的子集，算其交的答案，贡献乘上容斥系数 &lt;span class=&#34;math inline&#34;&gt;\((-1)^{|S|}\)&lt;/span&gt;。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(2^nc)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 为某和字符集大小有关的常数（&lt;del&gt;懒得分析了&lt;/del&gt;）。&lt;/p&gt;
&lt;h4 id=&#34;abc246g---game-on-tree-3&#34;&gt;ABC246G - Game on Tree 3&lt;/h4&gt;
&lt;p&gt;点带权 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 根树，初始有一个指针在 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 点，每轮游戏中先青木选择一个非根点并将其权置零，然后高桥将指针移向其所在位置的任意儿子。高桥可以在任意时刻结束游戏（但当指针移到叶子节点后游戏强制结束）。分数为指针最后指向的点的权。青木想最小化分数，高桥想最大化分数，两人绝顶聪明，问最后的分数。&lt;/p&gt;
&lt;p&gt;直接做似乎不太可能，我们考虑二分答案，即“最优策略下，高桥能否至少拿到 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 分”。&lt;/p&gt;
&lt;p&gt;下面是一个转化：将 &lt;span class=&#34;math inline&#34;&gt;\(\ge c\)&lt;/span&gt; 的权看作 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(&amp;lt; c\)&lt;/span&gt; 的权看作 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，然后发现，只要高桥君走到了一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 点，那么他就赢了，否则输了。&lt;/p&gt;
&lt;p&gt;那么，显然，若高桥将指针移向一个点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 后，青木会选择在 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 子树内将一个 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。树形 dp，设 &lt;span class=&#34;math inline&#34;&gt;\(f_u\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 子树内高桥君能走到的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 点个数，则 &lt;span class=&#34;math inline&#34;&gt;\(f_u = \max(\sum f_v - 1, 0) + [a_u\ge c]\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(f_1 &amp;gt; 0\)&lt;/span&gt; 时合法。&lt;/p&gt;
&lt;h4 id=&#34;abc246ex---01-queries&#34;&gt;ABC246Ex - 01? Queries&lt;/h4&gt;
&lt;p&gt;给定长为 &lt;span class=&#34;math inline&#34;&gt;\(n\le 10^5\)&lt;/span&gt; 的包含 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;?&lt;/code&gt; 的串 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，以及 &lt;span class=&#34;math inline&#34;&gt;\(q\le 10^5\)&lt;/span&gt; 次操作 &lt;span class=&#34;math inline&#34;&gt;\((x_i, c_i)\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; 为下标，&lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 为字符集中的某字符。按照 &lt;span class=&#34;math inline&#34;&gt;\(1,\cdots, q\)&lt;/span&gt; 的顺序，每次将 &lt;span class=&#34;math inline&#34;&gt;\(S_{x_i}\leftarrow c_i\)&lt;/span&gt;，然后计算 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的 0-1 子串个数（&lt;code&gt;?&lt;/code&gt; 视为通配符），答案对 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 取模。&lt;/p&gt;
&lt;p&gt;先思考对于一个固定的 0-1 串如何计数。&lt;/p&gt;
&lt;p&gt;可以设计一个 dp 状态 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,0/1}\)&lt;/span&gt; 表示考虑 &lt;span class=&#34;math inline&#34;&gt;\([1, i]\)&lt;/span&gt;，结尾为 &lt;span class=&#34;math inline&#34;&gt;\(0/1\)&lt;/span&gt; 的子序列数量，则答案显然为 &lt;span class=&#34;math inline&#34;&gt;\(f_{n, 0} + f_{n,1}\)&lt;/span&gt;，现在考虑转移：发现可以对于 &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; 为 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;1&lt;/code&gt; 还是 &lt;code&gt;?&lt;/code&gt; 分类讨论： &lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f_{i,0} &amp;amp;=
\begin{cases}
f_{i - 1, 0} + (f_{i - 1, 1} + 1) &amp;amp; S_i = \texttt 0\lor S_i = \texttt{?}\\
f_{i - 1, 0} &amp;amp; S_i = \texttt 1\\
\end{cases}
\\
f_{i,1} &amp;amp;= 
\begin{cases}
f_{i - 1, 1} + (f_{i - 1, 0} + 1) &amp;amp; S_i = \texttt 1 \lor S_i = \texttt{?}\\
f_{i - 1, 1} &amp;amp; S_i = \texttt 0
\end{cases}
\end{aligned}
\]&lt;/span&gt; 那么我们会发现，dp 数组的转移是很有规律的，而且我们每次修改都是修改一个点处的转移方式，而且询问 &lt;span class=&#34;math inline&#34;&gt;\(f_{n,0} + f_{n, 1}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这让你想到什么！动态 dp。具体地，令向量 &lt;span class=&#34;math display&#34;&gt;\[
\boldsymbol F_i = \begin{bmatrix}
f_{i, 0}\\
f_{i, 1}\\
1
\end{bmatrix}
\]&lt;/span&gt; （最下面的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 是因为常数项需要转移）那么就可以写出三个转移矩阵： &lt;span class=&#34;math display&#34;&gt;\[
\boldsymbol A_{\texttt 0} = \begin{bmatrix}
1 &amp;amp; 1 &amp;amp; 1\\
0 &amp;amp; 1 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}, \boldsymbol A_{\texttt 1} = \begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0\\
1 &amp;amp; 1 &amp;amp; 1\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}, A_{\texttt{?}} = \begin{bmatrix}
1 &amp;amp; 1 &amp;amp; 1\\
1 &amp;amp; 1 &amp;amp; 1\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
\]&lt;/span&gt; 于是就有 &lt;span class=&#34;math display&#34;&gt;\[
\boldsymbol F_i = \boldsymbol A_{S_i}\times \boldsymbol F_{i - 1} = A_{S_i}A_{S_{i-1}}\cdots \boldsymbol F_0
\]&lt;/span&gt; 线段树维护矩阵连乘积，单点修改一下。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O((n + q)\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;abc247&#34;&gt;ABC247&lt;/h3&gt;
&lt;h4 id=&#34;abc247ex---rearranging-problem&#34;&gt;ABC247Ex - Rearranging Problem&lt;/h4&gt;
&lt;p&gt;题意：给定值域为 &lt;span class=&#34;math inline&#34;&gt;\([1, n]\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt;，进行 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次操作：每次选定任意 &lt;span class=&#34;math inline&#34;&gt;\(i\ne j\)&lt;/span&gt; 然后交换 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(c_j\)&lt;/span&gt;。显然这样会得到一个下标的新排列，问有多少种这样的排列使得最后的序列和原来的 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 相同。&lt;span class=&#34;math inline&#34;&gt;\(n\le 2\times 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(k\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;应该是比较经典但我不会的计数套路。发现其实最后相当于只在相同的 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 形成的连通块内部做交换，即排列的每个置换环内 &lt;span class=&#34;math inline&#34;&gt;\(c_i\)&lt;/span&gt; 要相同。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lemma 1：交换两个数，置换环的个数会 &lt;span class=&#34;math inline&#34;&gt;\(+1/-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个引理应该不难证明（随便画图分讨一下即可），而且貌似是个经典结论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lemma 2：一个排列能在交换 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次后得到当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(n - c\le k\land (n - c)\equiv k\pmod 2\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 为置换环个数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个引理可以用 Lemma 1 证明。注意到到一开始有 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个环，然后奇偶性讨论一下即可。&lt;/p&gt;
&lt;p&gt;所以我们现在要求的就是对于每个合法的 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 求出合法的置换个数。&lt;/p&gt;
&lt;p&gt;可以 dp，设 &lt;span class=&#34;math inline&#34;&gt;\(f_{i,j}\)&lt;/span&gt; 为考虑 &lt;span class=&#34;math inline&#34;&gt;\([1, i]\)&lt;/span&gt; 的排列，置换环个数为 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 的合法排列个数。转移的话考虑添加 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的时候其是形成了新环还是塞入了某个老环。 &lt;span class=&#34;math display&#34;&gt;\[
f_{i, j} = f_{i, j - 1} + f_{i - 1, j}\times |\{x\mid 1\le x&amp;lt; i, c_i = c_x\}|
\]&lt;/span&gt; 这个东西类似于第一类斯特林数的转移，所以可以分治 NTT，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log^2n)\)&lt;/span&gt;。&lt;del&gt;偷懒用了他给的 NTT。&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;atcoder/modint&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;atcoder/convolution&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; mint = atcoder::modint998244353;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; atcoder::convolution;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;2e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;vector&amp;lt;mint&amp;gt;&amp;gt; P;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; cnt[maxn], n, k;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x; cin &amp;gt;&amp;gt; x;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        P.push_back({cnt[x]++, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;});&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (P.size() &amp;gt;= &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;decltype&lt;/span&gt;(P) nxt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;; i &amp;lt; P.size() - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;; i += &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) nxt.push_back(convolution(P[i], P[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]));&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (P.size() &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) nxt.push_back(P.back());&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        nxt.swap(P);&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;f = P.front();&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    mint ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(c, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;)f.size() - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (n - c &amp;lt;= k &amp;amp;&amp;amp; ((n - c) &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) == (k &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) ans += f[c];&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cout &amp;lt;&amp;lt; ans.val() &amp;lt;&amp;lt; endl;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;arc&#34;&gt;ARC&lt;/h2&gt;
&lt;h3 id=&#34;arc-补题表&#34;&gt;ARC 补题表&lt;/h3&gt;
&lt;p&gt;近期目标：ARC 稳定做出 3 题，尽力补完 A-D。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Round&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Rank&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Perf&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Sol&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;E&lt;/th&gt;
&lt;th&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC116&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;vp&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;vp&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ARC117&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc117/standings?watching=YangTY&#34;&gt;597&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1736&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC118&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc118/standings?watching=YangTY&#34;&gt;1679&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;807&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ARC119&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc119/standings?watching=YangTY&#34;&gt;1141&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1180&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC120&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc120/standings?watching=YangTY&#34;&gt;785&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1345&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ARC123&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc123/standings?watching=YangTY&#34;&gt;608&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1756&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC124&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc124/standings?watching=YangTY&#34;&gt;1276&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1004&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ARC125&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc125/standings?watching=Cgfyufsygsm&#34;&gt;463&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1850&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC126&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc126/standings?watching=YangTY&#34;&gt;876&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1371&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ARC128&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc128/standings?watching=YangTY&#34;&gt;340&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1998&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC131&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc131/standings?watching=YangTY&#34;&gt;220&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2230&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ARC132&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc132/standings?watching=YangTY&#34;&gt;566&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1728&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC134&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc134/standings?watching=YangTY&#34;&gt;877&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;1538&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ARC137&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc137/standings?watching=YangTY&#34;&gt;281&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2148&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;3&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;ARC138&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc138/standings?watching=YangTY&#34;&gt;246&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;2242&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;4&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;🉑&lt;/td&gt;
&lt;td&gt;👀&lt;/td&gt;
&lt;td&gt;😅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一些新见到的-trick-1&#34;&gt;一些新见到的 trick&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ARC116B：将 &lt;span class=&#34;math inline&#34;&gt;\(\max\times \min\)&lt;/span&gt; 拆开贡献。&lt;/li&gt;
&lt;li&gt;ARC125D：子序列自动机 dp。&lt;/li&gt;
&lt;li&gt;ARC128C：线性规划的最值一定在边界取到。&lt;/li&gt;
&lt;li&gt;ARC134C：&lt;strong&gt;某种元素至少占一半&lt;/strong&gt;，考虑先强行配对，然后正常做。&lt;/li&gt;
&lt;li&gt;ARC137D：模 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 意义下的 Lucas → 高维前缀和。&lt;/li&gt;
&lt;li&gt;ARC137E：最小费用循环流的建图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arc116&#34;&gt;ARC116&lt;/h3&gt;
&lt;p&gt;VP。&lt;/p&gt;
&lt;h4 id=&#34;arc116a---odd-vs-even&#34;&gt;ARC116A - Odd vs Even&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(T\le 2\times 10^5\)&lt;/span&gt;）个正整数 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(1\le n\le 10^{18}\)&lt;/span&gt;），问 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的奇约数多还是偶约数多。（约数均为正约数）&lt;/p&gt;
&lt;p&gt;很明显，如果 &lt;span class=&#34;math inline&#34;&gt;\(n\bmod 2 = 1\)&lt;/span&gt;，则答案为奇约数多。&lt;/p&gt;
&lt;p&gt;否则考察约数们怎么来的。对于一个偶数 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 我们总能将其这样拆分：&lt;span class=&#34;math inline&#34;&gt;\(n = 2^k\times p\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 为奇数）。那么如果 &lt;span class=&#34;math inline&#34;&gt;\(k = 1\)&lt;/span&gt;，则不难发现奇偶约数一样多，否则肯定是偶约数多。&lt;/p&gt;
&lt;h4 id=&#34;arc116b---products-of-min-max&#34;&gt;ARC116B - Products of Min-Max&lt;/h4&gt;
&lt;p&gt;给定一含正整数的集合 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，求 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{S\subseteq A}\max_{a\in S}\lbrace a\rbrace\min_{a\in S}\lbrace a\rbrace\bmod{998244353}
\]&lt;/span&gt; 的值。&lt;/p&gt;
&lt;p&gt;比较妙的题。&lt;/p&gt;
&lt;p&gt;首先考虑把最大值和最小值拎出来考虑贡献：将其 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 从小到大排序。&lt;/p&gt;
&lt;p&gt;然后假设此时 &lt;span class=&#34;math inline&#34;&gt;\(i&amp;lt;j\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(a_i\le a_j\)&lt;/span&gt;，这一对元素贡献的子集个数为 &lt;span class=&#34;math inline&#34;&gt;\(2^{j - i - 1}\)&lt;/span&gt;。所以答案就为 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i = 1}^{n - 1}\sum_{j = i + 1}^na_ia_j\cdot2^{j - i} + \sum_{i = 1}^na_i^2
\]&lt;/span&gt; 化简下来可以得到 &lt;span class=&#34;math display&#34;&gt;\[
\sum_{i = 1}^{n - 1}\left(a_i\cdot 2^{-i}\sum_{j = i + 1}^na_j\cdot2^{j - 1}\right) + \sum_{i = 1}^na_i^2
\]&lt;/span&gt; 预处理 &lt;span class=&#34;math inline&#34;&gt;\(a_i2^{i - 1}\)&lt;/span&gt; 的后缀和就可以直接做了，复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(n\log n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;arc116c---multiple-sequences&#34;&gt;ARC116C - Multiple Sequences&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(1\le n,m\le 2\times 10^5\)&lt;/span&gt;），求满足下列条件的长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的整数序列 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 的个数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le A_i\le m\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(A_{i + 1}\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 的整数倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结果模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;很妙的计数题。&lt;/p&gt;
&lt;p&gt;考虑从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 枚举 &lt;span class=&#34;math inline&#34;&gt;\(A_n\)&lt;/span&gt; 的值。我们可以发现其就是把 &lt;span class=&#34;math inline&#34;&gt;\(A_n\)&lt;/span&gt; 每个质因子给安排在 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个不同的位置上，求方案数。但是此时需要对每个质因子分开考虑，假设 &lt;span class=&#34;math inline&#34;&gt;\(A_n = \prod p_i^{c_i}\)&lt;/span&gt;，则我们需要对每个质因子都用插板法然后再乘起来得到总方案，即 &lt;span class=&#34;math display&#34;&gt;\[
f(A_n) = \prod\binom{n + c_i - 1}{c_i}
\]&lt;/span&gt; 最后把所有的结果加起来即为答案。&lt;/p&gt;
&lt;h3 id=&#34;arc117&#34;&gt;ARC117&lt;/h3&gt;
&lt;p&gt;A + B + C + D&lt;/p&gt;
&lt;h4 id=&#34;arc117c---tricolor-pyramid&#34;&gt;ARC117C - Tricolor Pyramid&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc117/tasks/arc117_c&#34;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比较妙的题。首先把颜色分别看成 &lt;span class=&#34;math inline&#34;&gt;\(0,1,2\)&lt;/span&gt;，那么上一层的方块就由 &lt;span class=&#34;math inline&#34;&gt;\(-(a_1 + a_2) \bmod 3\)&lt;/span&gt; 可以得到。把所有的一直累加上去就是杨辉三角的形式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.atcoder.jp/arc117/6d089e1cdfb0ed3c0bf6daee87fc198e.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图源 AtCoder 官方题解。&lt;/p&gt;
&lt;p&gt;所以求二项式系数即可，使用 Lucas 定理。&lt;/p&gt;
&lt;h4 id=&#34;arc117d---miracle-tree&#34;&gt;ARC117D - Miracle Tree&lt;/h4&gt;
&lt;p&gt;给一棵树的每个顶点标号，满足 &lt;span class=&#34;math inline&#34;&gt;\(E_i \ge 1\)&lt;/span&gt;，且 &lt;span class=&#34;math inline&#34;&gt;\(|E_i - E_j|\le \operatorname{dist}(i, j)\)&lt;/span&gt;。寻找一种最大标号最小的方案并输出。&lt;/p&gt;
&lt;p&gt;相当好的思维题。&lt;/p&gt;
&lt;p&gt;首先考虑随便标一个图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.atcoder.jp/arc117/a4103a74b2e0196e17a1a389f8fad851.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图源 AtCoder 官方题解。&lt;/p&gt;
&lt;p&gt;不难发现我们标的号应该为：&lt;span class=&#34;math inline&#34;&gt;\(\lbrace1, 2, 3, 5, 8, 9\rbrace\)&lt;/span&gt; 是最优的。相当于就是遇到一个点，首先走一条子链，然后回溯回来的时候仍然需要统计回溯链长，然后加到下一条子链的贡献里面去（因为要 &lt;span class=&#34;math inline&#34;&gt;\(|E_i - E_j|\le \operatorname{dist}(i, j)\)&lt;/span&gt;）。我们自然希望的是尽可能回溯的少，所以做的时候从直径的一端开始走，然后遇到分叉就优先走非直径的边。&lt;/p&gt;
&lt;h3 id=&#34;arc118&#34;&gt;ARC118&lt;/h3&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;h4 id=&#34;arc118a---tax-included-price&#34;&gt;ARC118A - Tax Included Price&lt;/h4&gt;
&lt;p&gt;打表可做。&lt;/p&gt;
&lt;h4 id=&#34;arc118b---village-of-m-people&#34;&gt;ARC118B - Village of M People&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 以及 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，构造 &lt;span class=&#34;math inline&#34;&gt;\(B_i\)&lt;/span&gt;，使得 &lt;span class=&#34;math inline&#34;&gt;\(\sum B_i = M\)&lt;/span&gt; 且 &lt;span class=&#34;math display&#34;&gt;\[
\max_i\left|\frac{B_i}{M} - \frac{A_i}{N}\right|
\]&lt;/span&gt; 最小。&lt;/p&gt;
&lt;p&gt;“最大的最小”，二分答案即可。&lt;/p&gt;
&lt;p&gt;要让 &lt;span class=&#34;math inline&#34;&gt;\(\max_i\left|\frac{B_i}{M} - \frac{A_i}{N}\right|\)&lt;/span&gt; 最小，即为让 &lt;span class=&#34;math inline&#34;&gt;\(\max_i|B_iN - A_iM|\)&lt;/span&gt; 最小，设为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;然后我们可以得到 &lt;span class=&#34;math inline&#34;&gt;\(\forall i, \left\lceil \frac{MA_i-x}{N}\right\rceil\leq B_i\leq \left\lfloor\frac{MA_i+x}{N}\right\rfloor\)&lt;/span&gt;。这样子 &lt;span class=&#34;math inline&#34;&gt;\(B_i\)&lt;/span&gt; 的上界和下界就出来了，设为 &lt;span class=&#34;math inline&#34;&gt;\(L_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(R_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然后，如果 &lt;span class=&#34;math inline&#34;&gt;\(\sum L_i\le M\le \sum R_i\)&lt;/span&gt;，则答案一定是可以被构造出来的。这样子我们就可以完成对于一个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 的 check。&lt;/p&gt;
&lt;p&gt;如何构造这个答案呢？把所有的 &lt;span class=&#34;math inline&#34;&gt;\(B_i\)&lt;/span&gt; 设为 &lt;span class=&#34;math inline&#34;&gt;\(L_i\)&lt;/span&gt;，然后依次上调来补齐余量 &lt;span class=&#34;math inline&#34;&gt;\(M - \sum L_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这题就做完了。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define DEC&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;--i)&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define int &lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-8&#34;&gt;&lt;a href=&#34;#cb15-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;1e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb15-9&#34;&gt;&lt;a href=&#34;#cb15-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-10&#34;&gt;&lt;a href=&#34;#cb15-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; read()&lt;/span&gt;
&lt;span id=&#34;cb15-11&#34;&gt;&lt;a href=&#34;#cb15-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb15-12&#34;&gt;&lt;a href=&#34;#cb15-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, x = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb15-13&#34;&gt;&lt;a href=&#34;#cb15-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb15-14&#34;&gt;&lt;a href=&#34;#cb15-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb15-15&#34;&gt;&lt;a href=&#34;#cb15-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        x |= (c == &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb15-16&#34;&gt;&lt;a href=&#34;#cb15-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb15-17&#34;&gt;&lt;a href=&#34;#cb15-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        s = s * &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; + c - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb15-18&#34;&gt;&lt;a href=&#34;#cb15-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; x ? -s : s;&lt;/span&gt;
&lt;span id=&#34;cb15-19&#34;&gt;&lt;a href=&#34;#cb15-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb15-20&#34;&gt;&lt;a href=&#34;#cb15-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-21&#34;&gt;&lt;a href=&#34;#cb15-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k, a[maxn], n, m;&lt;/span&gt;
&lt;span id=&#34;cb15-22&#34;&gt;&lt;a href=&#34;#cb15-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; L[maxn], R[maxn], suml, sumr;&lt;/span&gt;
&lt;span id=&#34;cb15-23&#34;&gt;&lt;a href=&#34;#cb15-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-24&#34;&gt;&lt;a href=&#34;#cb15-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; max(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; b) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a &amp;gt; b ? a : b;}&lt;/span&gt;
&lt;span id=&#34;cb15-25&#34;&gt;&lt;a href=&#34;#cb15-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; min(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; b) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a &amp;lt; b ? a : b;}&lt;/span&gt;
&lt;span id=&#34;cb15-26&#34;&gt;&lt;a href=&#34;#cb15-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-27&#34;&gt;&lt;a href=&#34;#cb15-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; check(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&#34;cb15-28&#34;&gt;&lt;a href=&#34;#cb15-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb15-29&#34;&gt;&lt;a href=&#34;#cb15-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(L, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; L), memset(R, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; R);&lt;/span&gt;
&lt;span id=&#34;cb15-30&#34;&gt;&lt;a href=&#34;#cb15-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    suml = sumr = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb15-31&#34;&gt;&lt;a href=&#34;#cb15-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, k)&lt;/span&gt;
&lt;span id=&#34;cb15-32&#34;&gt;&lt;a href=&#34;#cb15-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb15-33&#34;&gt;&lt;a href=&#34;#cb15-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        L[i] = max(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (m * a[i] - x + n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) / n);&lt;/span&gt;
&lt;span id=&#34;cb15-34&#34;&gt;&lt;a href=&#34;#cb15-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        R[i] = (m * a[i] + x) / n;&lt;/span&gt;
&lt;span id=&#34;cb15-35&#34;&gt;&lt;a href=&#34;#cb15-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        suml += L[i], sumr += R[i];&lt;/span&gt;
&lt;span id=&#34;cb15-36&#34;&gt;&lt;a href=&#34;#cb15-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb15-37&#34;&gt;&lt;a href=&#34;#cb15-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; suml &amp;lt;= m &amp;amp;&amp;amp; m &amp;lt;= sumr;&lt;/span&gt;
&lt;span id=&#34;cb15-38&#34;&gt;&lt;a href=&#34;#cb15-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb15-39&#34;&gt;&lt;a href=&#34;#cb15-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-40&#34;&gt;&lt;a href=&#34;#cb15-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;signed&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb15-41&#34;&gt;&lt;a href=&#34;#cb15-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb15-42&#34;&gt;&lt;a href=&#34;#cb15-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    k = read(), n = read(), m = read();&lt;/span&gt;
&lt;span id=&#34;cb15-43&#34;&gt;&lt;a href=&#34;#cb15-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, k) a[i] = read();&lt;/span&gt;
&lt;span id=&#34;cb15-44&#34;&gt;&lt;a href=&#34;#cb15-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; l = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, r = n * m, x;&lt;/span&gt;
&lt;span id=&#34;cb15-45&#34;&gt;&lt;a href=&#34;#cb15-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (l &amp;lt;= r)&lt;/span&gt;
&lt;span id=&#34;cb15-46&#34;&gt;&lt;a href=&#34;#cb15-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb15-47&#34;&gt;&lt;a href=&#34;#cb15-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; mid = (l + r) &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb15-48&#34;&gt;&lt;a href=&#34;#cb15-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (check(mid)) x = mid, r = mid - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb15-49&#34;&gt;&lt;a href=&#34;#cb15-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; l = mid + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb15-50&#34;&gt;&lt;a href=&#34;#cb15-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb15-51&#34;&gt;&lt;a href=&#34;#cb15-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    check(x);&lt;/span&gt;
&lt;span id=&#34;cb15-52&#34;&gt;&lt;a href=&#34;#cb15-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; sumb = suml;&lt;/span&gt;
&lt;span id=&#34;cb15-53&#34;&gt;&lt;a href=&#34;#cb15-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, k)&lt;/span&gt;
&lt;span id=&#34;cb15-54&#34;&gt;&lt;a href=&#34;#cb15-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb15-55&#34;&gt;&lt;a href=&#34;#cb15-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x = min(R[i] - L[i], m - sumb);&lt;/span&gt;
&lt;span id=&#34;cb15-56&#34;&gt;&lt;a href=&#34;#cb15-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        sumb += x;&lt;/span&gt;
&lt;span id=&#34;cb15-57&#34;&gt;&lt;a href=&#34;#cb15-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &amp;quot;&lt;/span&gt;, x + L[i]);&lt;/span&gt;
&lt;span id=&#34;cb15-58&#34;&gt;&lt;a href=&#34;#cb15-58&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb15-59&#34;&gt;&lt;a href=&#34;#cb15-59&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb15-60&#34;&gt;&lt;a href=&#34;#cb15-60&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;arc118c---coprime-set&#34;&gt;ARC118C - Coprime Set&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(3\le N\le 2500\)&lt;/span&gt;），构造 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个正整数 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 使得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 互不相同且 &lt;span class=&#34;math inline&#34;&gt;\(A_i\in[1, 10000]\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\forall i \not= j, \gcd(A_i, A_j) &amp;gt; 1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\gcd_i\{A_i\} = 1\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个题需要一个引理：对于一系列已经满足条件的 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，将任意 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 的倍数加进去，新得到的集合也是满足条件的。&lt;/p&gt;
&lt;p&gt;正确性比较显然，不证。所以从 &lt;span class=&#34;math inline&#34;&gt;\(\{6, 10, 15\}\)&lt;/span&gt; 出发，就可以构造出所有的合法答案。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; vis[&lt;span class=&#34;dv&#34;&gt;10005&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    scanf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &amp;amp;n);&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;; i * &lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt; &amp;lt;= &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt;; ++i) vis[i * &lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;; i * &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &amp;lt;= &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt;; ++i) vis[i * &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;; i * &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt; &amp;lt;= &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt;; ++i) vis[i * &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; cnt = &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb16-13&#34;&gt;&lt;a href=&#34;#cb16-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;), vis[&lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;] = vis[&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;] = vis[&lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb16-14&#34;&gt;&lt;a href=&#34;#cb16-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;; i &amp;lt;= &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt; &amp;amp;&amp;amp; cnt &amp;lt;= n; ++i) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (vis[i]) printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; &amp;quot;&lt;/span&gt;, i), ++cnt;&lt;/span&gt;
&lt;span id=&#34;cb16-15&#34;&gt;&lt;a href=&#34;#cb16-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb16-16&#34;&gt;&lt;a href=&#34;#cb16-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;arc119&#34;&gt;ARC119&lt;/h3&gt;
&lt;p&gt;A + B&lt;/p&gt;
&lt;h4 id=&#34;arc119b---electric-board&#34;&gt;ARC119B - Electric Board&lt;/h4&gt;
&lt;p&gt;给定两个 01 串 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;，每次对 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的操作可以选取 &lt;span class=&#34;math inline&#34;&gt;\((l,r)\)&lt;/span&gt;，满足&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(S_l = 0\land S_{l+ 1} = S_{l + 2} = \cdots = S_{r} = 1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(S_l = S_{l + 1} = \cdots = S_{r - 1} = 1 \land S_r = 0\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后交换 &lt;span class=&#34;math inline&#34;&gt;\(S_l\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(S_r\)&lt;/span&gt;。问最少多少次操作之后可以将 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;我们不妨将每次操作看为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的移动操作，因为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 是连续动的，不好考虑。那么就只需要从左往右进行贪心，把 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的每个 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 依次往右移直到与 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 对应。记录下每个 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的位置然后直接贪心就可以了。&lt;/p&gt;
&lt;h4 id=&#34;arc119c---arc-wrecker-2&#34;&gt;ARC119C - ARC Wrecker 2&lt;/h4&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，对于区间 &lt;span class=&#34;math inline&#34;&gt;\([l,r]\)&lt;/span&gt;，每次可选择 &lt;span class=&#34;math inline&#34;&gt;\([l, r - 1]\)&lt;/span&gt; 间的一个整数 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，然后将 &lt;span class=&#34;math inline&#34;&gt;\(A_x\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(A_{x + 1}\)&lt;/span&gt; 同时加一或减一。问有多少个 &lt;span class=&#34;math inline&#34;&gt;\([l,r ]\)&lt;/span&gt; 可以在有限次操作之后变为全 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;比较妙的思路。&lt;/p&gt;
&lt;p&gt;每次操作相当于是给奇数下标的数和偶数下标的数同时加减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，所以为了最后得到全 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，一开始选的区间中奇下标和偶下标数的和必须相等。&lt;/p&gt;
&lt;p&gt;注意到这条性质之后记录一下前缀和，然后用 &lt;code&gt;map&lt;/code&gt; 随便记录以下就可以做了。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;ll ans, a[maxn], s[maxn];&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;bu&#34;&gt;std::&lt;/span&gt;map&amp;lt;ll, ll&amp;gt; m;&lt;/span&gt;
&lt;span id=&#34;cb17-6&#34;&gt;&lt;a href=&#34;#cb17-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-7&#34;&gt;&lt;a href=&#34;#cb17-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb17-8&#34;&gt;&lt;a href=&#34;#cb17-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb17-9&#34;&gt;&lt;a href=&#34;#cb17-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    n = read();&lt;/span&gt;
&lt;span id=&#34;cb17-10&#34;&gt;&lt;a href=&#34;#cb17-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) a[i] = read() * ((i &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) ? -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; : &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb17-11&#34;&gt;&lt;a href=&#34;#cb17-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) s[i] = a[i] + s[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], ++m[s[i]];&lt;/span&gt;
&lt;span id=&#34;cb17-12&#34;&gt;&lt;a href=&#34;#cb17-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ++m[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb17-13&#34;&gt;&lt;a href=&#34;#cb17-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;bu&#34;&gt;std::&lt;/span&gt;map&amp;lt;ll, ll&amp;gt;::iterator it = m.begin(); it != m.end(); ++it)&lt;/span&gt;
&lt;span id=&#34;cb17-14&#34;&gt;&lt;a href=&#34;#cb17-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans += (*it).second * ((*it).second - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;ll&lt;/span&gt;) / &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb17-15&#34;&gt;&lt;a href=&#34;#cb17-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%lld\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, ans);&lt;/span&gt;
&lt;span id=&#34;cb17-16&#34;&gt;&lt;a href=&#34;#cb17-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb17-17&#34;&gt;&lt;a href=&#34;#cb17-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案的上界是会爆 &lt;code&gt;int&lt;/code&gt;，要开 &lt;code&gt;long long&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;arc119d---grid-repainting-3&#34;&gt;ARC119D - Grid Repainting 3&lt;/h4&gt;
&lt;p&gt;给定一 &lt;span class=&#34;math inline&#34;&gt;\(H\)&lt;/span&gt; 行 &lt;span class=&#34;math inline&#34;&gt;\(W\)&lt;/span&gt; 列的方格，每个方格一开始涂了红色或者蓝色。进行如下操作：对于当前的每个红色格子，可以选择它并将其所在的一行或一列全部涂满白色。问最后最多多少个格子可以是白色并构造方案。&lt;/p&gt;
&lt;p&gt;对于这种方格并且操作是对于整行或整列的题，很容易想到构建一张二分图来解决问题。左部的点代表每行，右部的点代表每列，一个红格子代表一条边。&lt;/p&gt;
&lt;p&gt;然后我们分析这个涂色方案。涂掉一整行/列相当于废掉这一个点，同时把这个点相关的所有边全部废掉（即为废掉在这行/列上的红格子）。当然废掉这个点的条件是它能引出至少一条边（即必须有至少一个红格子在这行/列上面）。依据这个想法，我们肯定希望一个连通分量内，废掉的点（即涂掉的行/列）越多越好，考虑如何使它最多。&lt;/p&gt;
&lt;p&gt;注意到，一个连通分量删到最后一定会剩下一个点（至于为什么可以自己思考一下）。我们尝试构造一下方案：假设我们剩点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，那么就可以从 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; 构建这个连通分量的 dfs 生成树，然后从叶子节点往上删点，这样一定可以保证是合法而且除了 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，其他的点会被删干净。&lt;/p&gt;
&lt;p&gt;一张图是有很多个连通分量的，而我们需要对每个连通分量进行决策：留下哪个点最优。我们要涂白的格子最多，假设涂了 &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; 行 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; 列，则剩下的蓝格子为 &lt;span class=&#34;math inline&#34;&gt;\((h - r)(w - c)\)&lt;/span&gt; 个，我们需要将其最小化。不难发现我们可以直接枚举留下来的行点和列点的个数，然后找到最优解就直接决策每个连通分量剩下行还是列（反正哪一行哪一列不重要），这题就做完了。&lt;/p&gt;
&lt;p&gt;主要的流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;染色标记连通分量&lt;/li&gt;
&lt;li&gt;决策剩下多少列点和多少行点&lt;/li&gt;
&lt;li&gt;dfs 记录答案&lt;/li&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arc120&#34;&gt;ARC120&lt;/h3&gt;
&lt;p&gt;A + B&lt;/p&gt;
&lt;h4 id=&#34;arc120b---uniformly-distributed&#34;&gt;ARC120B - Uniformly Distributed&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(H \times W\)&lt;/span&gt; 的方格，其中一些涂了红色，一些涂了蓝色，一些什么都没涂。问对于剩余的格子，有多少种涂色的方案使得从 &lt;span class=&#34;math inline&#34;&gt;\((1,1)\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\((H,W)\)&lt;/span&gt; 上的所有路径经过的红格子数量都相等。&lt;/p&gt;
&lt;p&gt;不难发现，对于一个从右上到左下的副对角线，其要么全为红色，要么全为蓝色。大体的理由如下：（非严格证明）&lt;/p&gt;
&lt;p&gt;从 &lt;span class=&#34;math inline&#34;&gt;\((1,1)\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\((H,W)\)&lt;/span&gt; 一定是会经过 &lt;span class=&#34;math inline&#34;&gt;\(H + W - 1\)&lt;/span&gt; 条如上面这样的副对角线的，所以我们一定要保证无论怎么穿过一条副对角线，其经过的红格子数量都是相同的。&lt;/p&gt;
&lt;p&gt;所以直接做就行了，对于一条有红格子的副对角线，其对答案的贡献是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;；对于一条全空的副对角线，其对答案的贡献为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;（两种涂色方案）；对于既有蓝色又有红色的副对角线，其对答案的贡献为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。把这些贡献用乘法原理合并即可。&lt;/p&gt;
&lt;h4 id=&#34;arc120c---swaps-2&#34;&gt;ARC120C - Swaps 2&lt;/h4&gt;
&lt;p&gt;给定两个长度为 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;。问对 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 进行有限次如下操作后能否使 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一个正整数 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 使得 &lt;span class=&#34;math inline&#34;&gt;\(1\le i\lt N\)&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;交换 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(A_{i+ 1}\)&lt;/span&gt; 的值&lt;/li&gt;
&lt;li&gt;使 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 加一&lt;/li&gt;
&lt;li&gt;使 &lt;span class=&#34;math inline&#34;&gt;\(A_{i + 1}\)&lt;/span&gt; 减一&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果能，问最少操作步数。&lt;/p&gt;
&lt;p&gt;先考虑解的存在性。&lt;/p&gt;
&lt;p&gt;我们观察一个数移动的情况：显然是往右走就减小，往左走就增大。设 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 的新位置为 &lt;span class=&#34;math inline&#34;&gt;\(D_i\)&lt;/span&gt;，则必然有： &lt;span class=&#34;math display&#34;&gt;\[
B_{D_i} = A_i + i - D_i
\]&lt;/span&gt; 移项， &lt;span class=&#34;math display&#34;&gt;\[
B_{D_i} + D_i = A_i + i
\]&lt;/span&gt; 发现两边的形式很像，所以我们只需要建立两个新序列 &lt;span class=&#34;math inline&#34;&gt;\(\{A_i + i\}\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\{B_i + i\}\)&lt;/span&gt; 然后将其值排序判断其能不能一一对应就可以判断有没有解了。&lt;/p&gt;
&lt;p&gt;然后考虑解的最优性。&lt;/p&gt;
&lt;p&gt;刚才的排序中，若按照值为第一关键字排序，原下标为第二关键字排序，则我们不难证明，此时一一对应的结果是最优的。这样子 &lt;span class=&#34;math inline&#34;&gt;\(D_i\)&lt;/span&gt; 就找到了。&lt;/p&gt;
&lt;p&gt;然后我们把 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 移到 &lt;span class=&#34;math inline&#34;&gt;\(A_{D_i}\)&lt;/span&gt; 的过程很像冒泡排序，用线段树维护一下 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 中元素的下标就可以做了。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-2&#34;&gt;&lt;a href=&#34;#cb18-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-3&#34;&gt;&lt;a href=&#34;#cb18-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-4&#34;&gt;&lt;a href=&#34;#cb18-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb18-5&#34;&gt;&lt;a href=&#34;#cb18-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define DEC&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;--i)&lt;/span&gt;
&lt;span id=&#34;cb18-6&#34;&gt;&lt;a href=&#34;#cb18-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define int &lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-7&#34;&gt;&lt;a href=&#34;#cb18-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-8&#34;&gt;&lt;a href=&#34;#cb18-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;2e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-9&#34;&gt;&lt;a href=&#34;#cb18-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-10&#34;&gt;&lt;a href=&#34;#cb18-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; read()&lt;/span&gt;
&lt;span id=&#34;cb18-11&#34;&gt;&lt;a href=&#34;#cb18-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-12&#34;&gt;&lt;a href=&#34;#cb18-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, x = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-13&#34;&gt;&lt;a href=&#34;#cb18-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb18-14&#34;&gt;&lt;a href=&#34;#cb18-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb18-15&#34;&gt;&lt;a href=&#34;#cb18-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        x |= (c == &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb18-16&#34;&gt;&lt;a href=&#34;#cb18-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb18-17&#34;&gt;&lt;a href=&#34;#cb18-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        s = s * &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; + c - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb18-18&#34;&gt;&lt;a href=&#34;#cb18-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; x ? -s : s;&lt;/span&gt;
&lt;span id=&#34;cb18-19&#34;&gt;&lt;a href=&#34;#cb18-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb18-20&#34;&gt;&lt;a href=&#34;#cb18-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-21&#34;&gt;&lt;a href=&#34;#cb18-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; node&lt;/span&gt;
&lt;span id=&#34;cb18-22&#34;&gt;&lt;a href=&#34;#cb18-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-23&#34;&gt;&lt;a href=&#34;#cb18-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; val, id;&lt;/span&gt;
&lt;span id=&#34;cb18-24&#34;&gt;&lt;a href=&#34;#cb18-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; node &amp;amp;b)&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-25&#34;&gt;&lt;a href=&#34;#cb18-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb18-26&#34;&gt;&lt;a href=&#34;#cb18-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; val == b.val ? id &amp;lt; b.id : val &amp;lt; b.val;&lt;/span&gt;
&lt;span id=&#34;cb18-27&#34;&gt;&lt;a href=&#34;#cb18-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb18-28&#34;&gt;&lt;a href=&#34;#cb18-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} ai[maxn], bi[maxn];&lt;/span&gt;
&lt;span id=&#34;cb18-29&#34;&gt;&lt;a href=&#34;#cb18-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-30&#34;&gt;&lt;a href=&#34;#cb18-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a[maxn], b[maxn], n;&lt;/span&gt;
&lt;span id=&#34;cb18-31&#34;&gt;&lt;a href=&#34;#cb18-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-32&#34;&gt;&lt;a href=&#34;#cb18-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; myabs(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&#34;cb18-33&#34;&gt;&lt;a href=&#34;#cb18-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-34&#34;&gt;&lt;a href=&#34;#cb18-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; x &amp;gt;= &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; ? x : -x;&lt;/span&gt;
&lt;span id=&#34;cb18-35&#34;&gt;&lt;a href=&#34;#cb18-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb18-36&#34;&gt;&lt;a href=&#34;#cb18-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-37&#34;&gt;&lt;a href=&#34;#cb18-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; f[maxn &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], tag[maxn &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], d[maxn];&lt;/span&gt;
&lt;span id=&#34;cb18-38&#34;&gt;&lt;a href=&#34;#cb18-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-39&#34;&gt;&lt;a href=&#34;#cb18-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define L &lt;/span&gt;(k&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb18-40&#34;&gt;&lt;a href=&#34;#cb18-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define R &lt;/span&gt;(L&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;|&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb18-41&#34;&gt;&lt;a href=&#34;#cb18-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define M &lt;/span&gt;((i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;+&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;j)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb18-42&#34;&gt;&lt;a href=&#34;#cb18-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-43&#34;&gt;&lt;a href=&#34;#cb18-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; build(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt;
&lt;span id=&#34;cb18-44&#34;&gt;&lt;a href=&#34;#cb18-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-45&#34;&gt;&lt;a href=&#34;#cb18-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i == j)&lt;/span&gt;
&lt;span id=&#34;cb18-46&#34;&gt;&lt;a href=&#34;#cb18-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;(f[k] = i);&lt;/span&gt;
&lt;span id=&#34;cb18-47&#34;&gt;&lt;a href=&#34;#cb18-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    build(i, M, L);&lt;/span&gt;
&lt;span id=&#34;cb18-48&#34;&gt;&lt;a href=&#34;#cb18-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    build(M + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, j, R);&lt;/span&gt;
&lt;span id=&#34;cb18-49&#34;&gt;&lt;a href=&#34;#cb18-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[k] = f[L] + f[R];&lt;/span&gt;
&lt;span id=&#34;cb18-50&#34;&gt;&lt;a href=&#34;#cb18-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-51&#34;&gt;&lt;a href=&#34;#cb18-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb18-52&#34;&gt;&lt;a href=&#34;#cb18-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-53&#34;&gt;&lt;a href=&#34;#cb18-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; pushdown(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k)&lt;/span&gt;
&lt;span id=&#34;cb18-54&#34;&gt;&lt;a href=&#34;#cb18-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-55&#34;&gt;&lt;a href=&#34;#cb18-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    tag[L] += tag[k], tag[R] += tag[k];&lt;/span&gt;
&lt;span id=&#34;cb18-56&#34;&gt;&lt;a href=&#34;#cb18-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[L] += (M - i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) * tag[k];&lt;/span&gt;
&lt;span id=&#34;cb18-57&#34;&gt;&lt;a href=&#34;#cb18-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[R] += (j - M) * tag[k];&lt;/span&gt;
&lt;span id=&#34;cb18-58&#34;&gt;&lt;a href=&#34;#cb18-58&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    tag[k] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-59&#34;&gt;&lt;a href=&#34;#cb18-59&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-60&#34;&gt;&lt;a href=&#34;#cb18-60&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb18-61&#34;&gt;&lt;a href=&#34;#cb18-61&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-62&#34;&gt;&lt;a href=&#34;#cb18-62&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; modify(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; y, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; d)&lt;/span&gt;
&lt;span id=&#34;cb18-63&#34;&gt;&lt;a href=&#34;#cb18-63&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-64&#34;&gt;&lt;a href=&#34;#cb18-64&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x &amp;gt; y) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-65&#34;&gt;&lt;a href=&#34;#cb18-65&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i &amp;gt;= x &amp;amp;&amp;amp; j &amp;lt;= y)&lt;/span&gt;
&lt;span id=&#34;cb18-66&#34;&gt;&lt;a href=&#34;#cb18-66&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb18-67&#34;&gt;&lt;a href=&#34;#cb18-67&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        f[k] += d * (j - i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb18-68&#34;&gt;&lt;a href=&#34;#cb18-68&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        tag[k] += d;&lt;/span&gt;
&lt;span id=&#34;cb18-69&#34;&gt;&lt;a href=&#34;#cb18-69&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-70&#34;&gt;&lt;a href=&#34;#cb18-70&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb18-71&#34;&gt;&lt;a href=&#34;#cb18-71&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    pushdown(i, j, k);&lt;/span&gt;
&lt;span id=&#34;cb18-72&#34;&gt;&lt;a href=&#34;#cb18-72&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x &amp;lt;= M) modify(i, M, L, x, y, d);&lt;/span&gt;
&lt;span id=&#34;cb18-73&#34;&gt;&lt;a href=&#34;#cb18-73&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (y &amp;gt; M) modify(M + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, j, R, x, y, d);&lt;/span&gt;
&lt;span id=&#34;cb18-74&#34;&gt;&lt;a href=&#34;#cb18-74&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[k] = f[L] + f[R];&lt;/span&gt;
&lt;span id=&#34;cb18-75&#34;&gt;&lt;a href=&#34;#cb18-75&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-76&#34;&gt;&lt;a href=&#34;#cb18-76&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb18-77&#34;&gt;&lt;a href=&#34;#cb18-77&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-78&#34;&gt;&lt;a href=&#34;#cb18-78&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; query(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; j, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; k, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&#34;cb18-79&#34;&gt;&lt;a href=&#34;#cb18-79&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-80&#34;&gt;&lt;a href=&#34;#cb18-80&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i == j) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; f[k];&lt;/span&gt;
&lt;span id=&#34;cb18-81&#34;&gt;&lt;a href=&#34;#cb18-81&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    pushdown(i, j, k);&lt;/span&gt;
&lt;span id=&#34;cb18-82&#34;&gt;&lt;a href=&#34;#cb18-82&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x &amp;lt;= M) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; query(i, M, L, x);&lt;/span&gt;
&lt;span id=&#34;cb18-83&#34;&gt;&lt;a href=&#34;#cb18-83&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; query(M + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, j, R, x);&lt;/span&gt;
&lt;span id=&#34;cb18-84&#34;&gt;&lt;a href=&#34;#cb18-84&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb18-85&#34;&gt;&lt;a href=&#34;#cb18-85&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-86&#34;&gt;&lt;a href=&#34;#cb18-86&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;signed&lt;/span&gt; main()&lt;/span&gt;
&lt;span id=&#34;cb18-87&#34;&gt;&lt;a href=&#34;#cb18-87&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;{&lt;/span&gt;
&lt;span id=&#34;cb18-88&#34;&gt;&lt;a href=&#34;#cb18-88&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    n = read();&lt;/span&gt;
&lt;span id=&#34;cb18-89&#34;&gt;&lt;a href=&#34;#cb18-89&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) a[i] = read(), ai[i].val = a[i] + i, ai[i].id = i;&lt;/span&gt;
&lt;span id=&#34;cb18-90&#34;&gt;&lt;a href=&#34;#cb18-90&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) b[i] = read(), bi[i].val = b[i] + i, bi[i].id = i;&lt;/span&gt;
&lt;span id=&#34;cb18-91&#34;&gt;&lt;a href=&#34;#cb18-91&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;bu&#34;&gt;std::&lt;/span&gt;sort(ai + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, ai + n + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb18-92&#34;&gt;&lt;a href=&#34;#cb18-92&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;bu&#34;&gt;std::&lt;/span&gt;sort(bi + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, bi + n + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb18-93&#34;&gt;&lt;a href=&#34;#cb18-93&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n)&lt;/span&gt;
&lt;span id=&#34;cb18-94&#34;&gt;&lt;a href=&#34;#cb18-94&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (ai[i].val != bi[i].val) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;-1&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-95&#34;&gt;&lt;a href=&#34;#cb18-95&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; d[bi[i].id] = ai[i].id;&lt;/span&gt;
&lt;span id=&#34;cb18-96&#34;&gt;&lt;a href=&#34;#cb18-96&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    build(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb18-97&#34;&gt;&lt;a href=&#34;#cb18-97&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-98&#34;&gt;&lt;a href=&#34;#cb18-98&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n)&lt;/span&gt;
&lt;span id=&#34;cb18-99&#34;&gt;&lt;a href=&#34;#cb18-99&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    {&lt;/span&gt;
&lt;span id=&#34;cb18-100&#34;&gt;&lt;a href=&#34;#cb18-100&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans += abs(query(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, d[i]) - i);&lt;/span&gt;
&lt;span id=&#34;cb18-101&#34;&gt;&lt;a href=&#34;#cb18-101&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        modify(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, d[i], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb18-102&#34;&gt;&lt;a href=&#34;#cb18-102&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb18-103&#34;&gt;&lt;a href=&#34;#cb18-103&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%lld\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, ans);&lt;/span&gt;
&lt;span id=&#34;cb18-104&#34;&gt;&lt;a href=&#34;#cb18-104&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb18-105&#34;&gt;&lt;a href=&#34;#cb18-105&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;arc120d---bracket-score-2&#34;&gt;ARC120D - Bracket Score 2&lt;/h4&gt;
&lt;p&gt;给定一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(2N\)&lt;/span&gt; 的整数序列 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，依照其构造一个长度为 &lt;span class=&#34;math inline&#34;&gt;\(2N\)&lt;/span&gt; 的合法括号序列，使得其分数最大，分数的计算方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于每一对匹配的括号 &lt;span class=&#34;math inline&#34;&gt;\(S_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(S_j\)&lt;/span&gt;，其贡献为 &lt;span class=&#34;math inline&#34;&gt;\(|A_j - A_i|\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;将每一对匹配的括号的分数加起来得到总分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;眼前一亮的构造。&lt;/p&gt;
&lt;p&gt;不难发现，让大的尽量大，小的尽量小就可以使得总分最大。因此选出最大的 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，标记为黑色，剩余的标记为白色。然后根据一黑一白配对的原则直接构造括号序列即可。&lt;/p&gt;
&lt;h3 id=&#34;arc123&#34;&gt;ARC123&lt;/h3&gt;
&lt;p&gt;A + B + C&lt;/p&gt;
&lt;h4 id=&#34;arc123b---increasing-triples&#34;&gt;ARC123&lt;strong&gt;B - Increasing Triples&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 个 &lt;span class=&#34;math inline&#34;&gt;\(10^5\)&lt;/span&gt; 级别的序列，可以任意排列，问最多能有多少 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(A_i &amp;lt; B_i &amp;lt; C_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;用堆实现的贪心。&lt;/p&gt;
&lt;h4 id=&#34;arc123c---1-2-3---decomposition&#34;&gt;ARC123C - 1, 2, 3 - Decomposition&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;，需要求出最小的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 使得存在长度为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 的序列 &lt;span class=&#34;math inline&#34;&gt;\(\{A_i\}\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(\sum A_i = n\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 的每个数位都为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 或 &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; 之一。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; （&lt;span class=&#34;math inline&#34;&gt;\(1000\)&lt;/span&gt;）组数据，&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^{18}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑数位 dp。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; solve() {&lt;/span&gt;
&lt;span id=&#34;cb19-2&#34;&gt;&lt;a href=&#34;#cb19-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;at&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; f[&lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;25&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;25&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb19-3&#34;&gt;&lt;a href=&#34;#cb19-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(f, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; f);&lt;/span&gt;
&lt;span id=&#34;cb19-4&#34;&gt;&lt;a href=&#34;#cb19-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][a[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb19-5&#34;&gt;&lt;a href=&#34;#cb19-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n = strlen(a + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb19-6&#34;&gt;&lt;a href=&#34;#cb19-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb19-7&#34;&gt;&lt;a href=&#34;#cb19-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb19-8&#34;&gt;&lt;a href=&#34;#cb19-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            FOR(k, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb19-9&#34;&gt;&lt;a href=&#34;#cb19-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (f[i][j][k]) {&lt;/span&gt;
&lt;span id=&#34;cb19-10&#34;&gt;&lt;a href=&#34;#cb19-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    FOR(l, max((j + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) / &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, k), min(j, a[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb19-11&#34;&gt;&lt;a href=&#34;#cb19-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        f[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][a[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;][l] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb19-12&#34;&gt;&lt;a href=&#34;#cb19-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    FOR(l, max((j + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) / &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, k), min(j - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, a[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb19-13&#34;&gt;&lt;a href=&#34;#cb19-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                        f[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][a[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;][l] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb19-14&#34;&gt;&lt;a href=&#34;#cb19-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb19-15&#34;&gt;&lt;a href=&#34;#cb19-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb19-16&#34;&gt;&lt;a href=&#34;#cb19-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb19-17&#34;&gt;&lt;a href=&#34;#cb19-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb19-18&#34;&gt;&lt;a href=&#34;#cb19-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;fl&#34;&gt;1e9&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb19-19&#34;&gt;&lt;a href=&#34;#cb19-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb19-20&#34;&gt;&lt;a href=&#34;#cb19-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(j, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb19-21&#34;&gt;&lt;a href=&#34;#cb19-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (f[n][i][j])&lt;/span&gt;
&lt;span id=&#34;cb19-22&#34;&gt;&lt;a href=&#34;#cb19-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                ans = min(ans, max((i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) / &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;, j));&lt;/span&gt;
&lt;span id=&#34;cb19-23&#34;&gt;&lt;a href=&#34;#cb19-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;
&lt;span id=&#34;cb19-24&#34;&gt;&lt;a href=&#34;#cb19-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;arc124&#34;&gt;ARC124&lt;/h3&gt;
&lt;p&gt;状态很差 A + B&lt;/p&gt;
&lt;h3 id=&#34;arc125&#34;&gt;ARC125&lt;/h3&gt;
&lt;p&gt;A + B + C&lt;/p&gt;
&lt;h4 id=&#34;arc125a---dial-up&#34;&gt;ARC125A - Dial Up&lt;/h4&gt;
&lt;p&gt;直接贪心即可，细节略多。&lt;/p&gt;
&lt;h4 id=&#34;arc125b---squares&#34;&gt;ARC125B - Squares&lt;/h4&gt;
&lt;p&gt;求有序数对 &lt;span class=&#34;math inline&#34;&gt;\((x, y)\)&lt;/span&gt; 其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le x, y\le n\)&lt;/span&gt;（&lt;span class=&#34;math inline&#34;&gt;\(n\le 10^{12}\)&lt;/span&gt;）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x^2 - y\)&lt;/span&gt; 为完全平方数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;的数量模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;p&gt;考虑令 &lt;span class=&#34;math inline&#34;&gt;\(x^2 - y = z^2\)&lt;/span&gt;，然后平方差怼过去就是 &lt;span class=&#34;math inline&#34;&gt;\((x + z)(x - z) = y\)&lt;/span&gt;。令 &lt;span class=&#34;math inline&#34;&gt;\(x + z = p\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(x - z = q\)&lt;/span&gt;。则问题化为求 &lt;span class=&#34;math inline&#34;&gt;\((p, q)\)&lt;/span&gt; 的数量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(p\ge q\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(x = \dfrac{p + q}{2}\)&lt;/span&gt; 为整数；&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le x = \dfrac{p + q}{2}\le n\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(1 \le y = pq\le n\)&lt;/span&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n)\)&lt;/span&gt; 枚举 &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt;，然后 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 要满足 &lt;span class=&#34;math inline&#34;&gt;\(q\le p\le n\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(p\equiv q\pmod 2\)&lt;/span&gt;。这个东西可以 &lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 算。于是总复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(\sqrt n)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;arc125c---lis-to-original-sequence&#34;&gt;ARC125C - LIS to Original Sequence&lt;/h4&gt;
&lt;p&gt;构造题。&lt;/p&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个单调增整数 &lt;span class=&#34;math inline&#34;&gt;\(\{a_1, \cdots, a_k\}\)&lt;/span&gt;，构造字典序最小的排列 &lt;span class=&#34;math inline&#34;&gt;\(\{p_1, \cdots, p_n\}\)&lt;/span&gt; 使得 &lt;span class=&#34;math inline&#34;&gt;\(\{a_i\}\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(\{p_i\}\)&lt;/span&gt; 的 LIS 之一。&lt;/p&gt;
&lt;p&gt;考虑子问题。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(k = 1\)&lt;/span&gt; 时，答案显然为 &lt;span class=&#34;math inline&#34;&gt;\(\{n, n - 1, n - 2, \cdots, 1\}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(k \ge 2\)&lt;/span&gt; 时，考虑到 LIS 的性质，&lt;span class=&#34;math inline&#34;&gt;\(p_1 = a_1\)&lt;/span&gt;，然后如果 &lt;span class=&#34;math inline&#34;&gt;\(p_1\not= 1\)&lt;/span&gt;，为了使得字典序最小且不破坏最长 LIS 的性质，&lt;span class=&#34;math inline&#34;&gt;\(p_2 = 1\)&lt;/span&gt;。然后就可以依次类推下去推导。&lt;/p&gt;
&lt;p&gt;结论是，对于 &lt;span class=&#34;math inline&#34;&gt;\(1\le i\le k - 1\)&lt;/span&gt;，可以在 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(a_{i + 1}\)&lt;/span&gt; 中插入至多一个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(x &amp;lt; a_i\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(x &amp;lt; a_{i + 1}\)&lt;/span&gt;。最后的所有元素降序排列即可。&lt;/p&gt;
&lt;h4 id=&#34;arc125d---unique-subsequence&#34;&gt;ARC125D - Unique Subsequence&lt;/h4&gt;
&lt;p&gt;给定 &lt;span class=&#34;math inline&#34;&gt;\(\{a_1, \cdots, a_n\}\)&lt;/span&gt;，问出现次数为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的子序列的数量。&lt;/p&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\(a_0 = 0\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(a_{n + 1} = n + 1\)&lt;/span&gt;，然后设计一个 dp 状态 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\(\{a_0, \cdots, a_i\}\)&lt;/span&gt; 且 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 强制选的答案，则最终答案为所有数字最后出现位置的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 之和。&lt;/p&gt;
&lt;p&gt;注意到我们一定不能让 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 上一个出现的位置 &lt;span class=&#34;math inline&#34;&gt;\(lst_i\)&lt;/span&gt; 前的 &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(f_i\)&lt;/span&gt; 产生贡献，否则选取子序列的方式就不唯一了。然后一定要保证是最后一个出现的数产生贡献，所以用一个 BIT 维护就行了。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb20-1&#34;&gt;&lt;a href=&#34;#cb20-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb20-2&#34;&gt;&lt;a href=&#34;#cb20-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n);&lt;/span&gt;
&lt;span id=&#34;cb20-3&#34;&gt;&lt;a href=&#34;#cb20-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) read(a[i]);&lt;/span&gt;
&lt;span id=&#34;cb20-4&#34;&gt;&lt;a href=&#34;#cb20-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb20-5&#34;&gt;&lt;a href=&#34;#cb20-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        last[i] = now[a[i]];&lt;/span&gt;
&lt;span id=&#34;cb20-6&#34;&gt;&lt;a href=&#34;#cb20-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        now[a[i]] = i;&lt;/span&gt;
&lt;span id=&#34;cb20-7&#34;&gt;&lt;a href=&#34;#cb20-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb20-8&#34;&gt;&lt;a href=&#34;#cb20-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    add(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb20-9&#34;&gt;&lt;a href=&#34;#cb20-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb20-10&#34;&gt;&lt;a href=&#34;#cb20-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        f[i] = sum(i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) - sum(last[i] - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb20-11&#34;&gt;&lt;a href=&#34;#cb20-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        add(last[i], -f[last[i]]);&lt;/span&gt;
&lt;span id=&#34;cb20-12&#34;&gt;&lt;a href=&#34;#cb20-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        add(i, f[i]);&lt;/span&gt;
&lt;span id=&#34;cb20-13&#34;&gt;&lt;a href=&#34;#cb20-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb20-14&#34;&gt;&lt;a href=&#34;#cb20-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    modint ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb20-15&#34;&gt;&lt;a href=&#34;#cb20-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n)&lt;/span&gt;
&lt;span id=&#34;cb20-16&#34;&gt;&lt;a href=&#34;#cb20-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (now[i])&lt;/span&gt;
&lt;span id=&#34;cb20-17&#34;&gt;&lt;a href=&#34;#cb20-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            ans += f[now[i]];&lt;/span&gt;
&lt;span id=&#34;cb20-18&#34;&gt;&lt;a href=&#34;#cb20-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans);&lt;/span&gt;
&lt;span id=&#34;cb20-19&#34;&gt;&lt;a href=&#34;#cb20-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb20-20&#34;&gt;&lt;a href=&#34;#cb20-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;arc126&#34;&gt;ARC126&lt;/h3&gt;
&lt;p&gt;状态差。A + B。&lt;/p&gt;
&lt;h4 id=&#34;arc126c---maximize-gcd&#34;&gt;ARC126C - Maximize GCD&lt;/h4&gt;
&lt;p&gt;给定一个正整数序列 &lt;span class=&#34;math inline&#34;&gt;\((A_1, \cdots, A_n)\)&lt;/span&gt;，每次操作可以选择一个 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 然后 &lt;span class=&#34;math inline&#34;&gt;\(A_i\gets A_i + 1\)&lt;/span&gt;，问最多 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次操作之后能达到的最大的 &lt;span class=&#34;math inline&#34;&gt;\(\gcd_i\{A_i\}\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(1\le A_i, n\le 3\times 10^5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le k\le 10^{18}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑从 &lt;span class=&#34;math inline&#34;&gt;\([1, A_{\max}]\)&lt;/span&gt; 先枚举这个 &lt;span class=&#34;math inline&#34;&gt;\(\gcd\{A_i\}\)&lt;/span&gt;，那么我们要做的就是计算对于每个 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 要进行多少次操作。&lt;/p&gt;
&lt;p&gt;不妨设当前这个 &lt;span class=&#34;math inline&#34;&gt;\(\gcd\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，则我们枚举 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，对于 &lt;span class=&#34;math inline&#34;&gt;\((k - 1)x &amp;lt; A_i \le kx\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt;，这个代价是很好算的，随便前缀和优化一下就可以了。所以对于一个 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;，计算其操作次数的时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(A_{\max} / x)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果到了最后每个数都变成 &lt;span class=&#34;math inline&#34;&gt;\(A_{\max}\)&lt;/span&gt; 了，还有剩余的操作次数，则考虑继续往上走 &lt;span class=&#34;math inline&#34;&gt;\(\lfloor k / n\rfloor\)&lt;/span&gt; 个。总时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(n + A_{\max}\ln A_{\max})\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;arc128&#34;&gt;ARC128&lt;/h3&gt;
&lt;p&gt;A + B + C，rk 340。&lt;/p&gt;
&lt;h4 id=&#34;arc128c---max-dot&#34;&gt;ARC128C - Max Dot&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\text{maximize } \sum_{i = 1}^nA_ix_i\\
\text{s.t. } \begin{cases}
0\le x_1\le x_2\\
0\le x_2\le x_3\\
\cdots\\
0\le x_n\le m\\
x_1 + x_2 + \cdots x_n = S
\end{cases}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;考虑线性规划的解一定在可行域的端点处取到。所以前几个取 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;，后几个取 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;，中间几个取平均数。枚举前后缀端点即可。&lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;arc131&#34;&gt;ARC131&lt;/h3&gt;
&lt;p&gt;A + B + C + E，rk220。&lt;/p&gt;
&lt;h4 id=&#34;arc131b---grid-repainting-4&#34;&gt;ARC131B - Grid Repainting 4&lt;/h4&gt;
&lt;p&gt;由四色定理知直接构造即可。&lt;/p&gt;
&lt;h4 id=&#34;arc131c---zero-xor&#34;&gt;ARC131C - Zero XOR&lt;/h4&gt;
&lt;p&gt;牛逼题。给定一数集，两人博弈，一步可以删除一个数字。删到剩下数集的异或和为 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 时获胜。两人都最优方案，问先手是否必胜。&lt;/p&gt;
&lt;p&gt;结论：所有数字异或和 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 若 &lt;span class=&#34;math inline&#34;&gt;\(\in S\)&lt;/span&gt;，则先手必胜，否则若 &lt;span class=&#34;math inline&#34;&gt;\(n \equiv 1\pmod 2\)&lt;/span&gt;，先手必胜，否则后手必胜。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x\in S\)&lt;/span&gt; 的情况非常好理解，先手只需要取出 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 即可。&lt;/p&gt;
&lt;p&gt;否则，游戏将在两人取完所有数字之后结束。最后一个取的人将为赢家。&lt;/p&gt;
&lt;h4 id=&#34;arc131e---christmas-wreath&#34;&gt;ARC131E - Christmas Wreath&lt;/h4&gt;
&lt;p&gt;题意：给完全图的边染色 &lt;span class=&#34;math inline&#34;&gt;\((R,B,W)\)&lt;/span&gt;，要求三种颜色出现的频率相等，且任意一个三元环不能出现三边颜色不一样，求构造方案或输出无解。&lt;/p&gt;
&lt;p&gt;考虑邻接矩阵，发现每一行颜色相同就能满足第二个条件。&lt;/p&gt;
&lt;p&gt;第一个条件就随便构造即可。&lt;/p&gt;
&lt;h3 id=&#34;arc132&#34;&gt;ARC132&lt;/h3&gt;
&lt;h4 id=&#34;arc132a---permutation-grid&#34;&gt;ARC132A - Permutation Grid&lt;/h4&gt;
&lt;p&gt;比较妙的思路。考虑初始构造出一个状态然后根据排列变换。结论为 &lt;span class=&#34;math inline&#34;&gt;\(R_x +C_y\ge n\)&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;arc132b---shift-and-reverse&#34;&gt;ARC132B - Shift and Reverse&lt;/h4&gt;
&lt;p&gt;可以注意到翻转操作至多进行两次。&lt;/p&gt;
&lt;p&gt;直接分类讨论然后做做就行了。&lt;/p&gt;
&lt;h4 id=&#34;arc132c---almost-sorted&#34;&gt;ARC132C - Almost Sorted&lt;/h4&gt;
&lt;p&gt;比较好的状压题。&lt;/p&gt;
&lt;p&gt;给定一个序列 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(a_i\in\{-1, 1, 2, 3,\cdots, n\}\)&lt;/span&gt;，和一个整数 &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;。问满足如下条件的排列 &lt;span class=&#34;math inline&#34;&gt;\(p_i\)&lt;/span&gt; 的个数模 &lt;span class=&#34;math inline&#34;&gt;\(998244353\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(p_1,\cdots,p_n\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\([1,n]\)&lt;/span&gt; 排列。&lt;/li&gt;
&lt;li&gt;若 &lt;span class=&#34;math inline&#34;&gt;\(a_i\ne -1\)&lt;/span&gt;，则 &lt;span class=&#34;math inline&#34;&gt;\(p_i = a_i\)&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\forall i\)&lt;/span&gt;，满足 &lt;span class=&#34;math inline&#34;&gt;\(|p_i - i|\le d\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le d\le 5\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(d &amp;lt; n\le 500\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先我们注意到，&lt;span class=&#34;math inline&#34;&gt;\(p_i\in[i - d, i + d]\)&lt;/span&gt;，值域区间长度最大为 &lt;span class=&#34;math inline&#34;&gt;\(11\)&lt;/span&gt;，所以可以考虑状压起来。我们令 &lt;span class=&#34;math inline&#34;&gt;\(f_{i, S}\)&lt;/span&gt; 表示 &lt;span class=&#34;math inline&#34;&gt;\([i - d, i + d]\)&lt;/span&gt; 的值域区间的占用情况为 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 的方案数。&lt;/p&gt;
&lt;p&gt;然后我们就可以进行转移了，每次就枚举第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 格填的数，细节比较多，参见如下代码。时间复杂度为 &lt;span class=&#34;math inline&#34;&gt;\(O(4^ddn)\)&lt;/span&gt;，可以通过本题。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;505&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a[maxn], n, d, vis[maxn];&lt;/span&gt;
&lt;span id=&#34;cb21-3&#34;&gt;&lt;a href=&#34;#cb21-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;modint f[maxn][&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb21-4&#34;&gt;&lt;a href=&#34;#cb21-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-5&#34;&gt;&lt;a href=&#34;#cb21-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; getfirst() {&lt;/span&gt;
&lt;span id=&#34;cb21-6&#34;&gt;&lt;a href=&#34;#cb21-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb21-7&#34;&gt;&lt;a href=&#34;#cb21-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, d) {&lt;/span&gt;
&lt;span id=&#34;cb21-8&#34;&gt;&lt;a href=&#34;#cb21-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans |= (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (i + d)) * vis[i];&lt;/span&gt;
&lt;span id=&#34;cb21-9&#34;&gt;&lt;a href=&#34;#cb21-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb21-10&#34;&gt;&lt;a href=&#34;#cb21-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;
&lt;span id=&#34;cb21-11&#34;&gt;&lt;a href=&#34;#cb21-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb21-12&#34;&gt;&lt;a href=&#34;#cb21-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-13&#34;&gt;&lt;a href=&#34;#cb21-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb21-14&#34;&gt;&lt;a href=&#34;#cb21-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, d);&lt;/span&gt;
&lt;span id=&#34;cb21-15&#34;&gt;&lt;a href=&#34;#cb21-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) read(a[i]);&lt;/span&gt;
&lt;span id=&#34;cb21-16&#34;&gt;&lt;a href=&#34;#cb21-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (a[i] == j) vis[j] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb21-17&#34;&gt;&lt;a href=&#34;#cb21-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    f[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][getfirst()] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb21-18&#34;&gt;&lt;a href=&#34;#cb21-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb21-19&#34;&gt;&lt;a href=&#34;#cb21-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(S, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * d + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb21-20&#34;&gt;&lt;a href=&#34;#cb21-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now = (S &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) | (vis[i + d] &amp;lt;&amp;lt; (&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * d));&lt;/span&gt;
&lt;span id=&#34;cb21-21&#34;&gt;&lt;a href=&#34;#cb21-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (~a[i]) f[i][now] += f[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][S];&lt;/span&gt;
&lt;span id=&#34;cb21-22&#34;&gt;&lt;a href=&#34;#cb21-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; FOR(j, -d, d) {&lt;/span&gt;
&lt;span id=&#34;cb21-23&#34;&gt;&lt;a href=&#34;#cb21-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i + j &amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; || i + j &amp;gt; n || now &amp;amp; (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (j + d))) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb21-24&#34;&gt;&lt;a href=&#34;#cb21-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                f[i][now | (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (j + d))] += f[i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][S];&lt;/span&gt;
&lt;span id=&#34;cb21-25&#34;&gt;&lt;a href=&#34;#cb21-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb21-26&#34;&gt;&lt;a href=&#34;#cb21-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb21-27&#34;&gt;&lt;a href=&#34;#cb21-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb21-28&#34;&gt;&lt;a href=&#34;#cb21-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(f[n][(&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (d + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;
&lt;span id=&#34;cb21-29&#34;&gt;&lt;a href=&#34;#cb21-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb21-30&#34;&gt;&lt;a href=&#34;#cb21-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;arc132d---between-two-binary-strings&#34;&gt;ARC132D - Between Two Binary Strings&lt;/h4&gt;
&lt;p&gt;设 &lt;span class=&#34;math inline&#34;&gt;\(S_{n,m}\)&lt;/span&gt; 为所有的长度为 &lt;span class=&#34;math inline&#34;&gt;\(n+ m\)&lt;/span&gt;，且包含恰好 &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个 &lt;code&gt;0&lt;/code&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 个 &lt;code&gt;1&lt;/code&gt; 的字符串的集合。定义一个字符串的美丽程度为相邻两位相同的个数，定义 &lt;span class=&#34;math inline&#34;&gt;\(S_1\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(S_2\)&lt;/span&gt; 的编辑距离 &lt;span class=&#34;math inline&#34;&gt;\(d_{S_1, S_2}\)&lt;/span&gt; 为将 &lt;span class=&#34;math inline&#34;&gt;\(S_1\)&lt;/span&gt; 变成 &lt;span class=&#34;math inline&#34;&gt;\(S_2\)&lt;/span&gt; 的操作次数，其中每次操作能交换相邻的两个字符，且 &lt;span class=&#34;math inline&#34;&gt;\(S_1, S_2\in S_{n,m}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;定义 &lt;span class=&#34;math inline&#34;&gt;\(S_2\)&lt;/span&gt; 在 &lt;span class=&#34;math inline&#34;&gt;\(S_1\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(S_3\)&lt;/span&gt; 间当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(d_{S_1, S_3} = d_{S_1, S_2} + d_{S_2, S_3}\)&lt;/span&gt;。给定 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;，问在 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 间的字符串的最大美丽程度。&lt;/p&gt;
&lt;p&gt;这题是一道比较妙的结论题：当确定第一个字母时，整个字符串可以贪心的进行构造，只需保证&lt;strong&gt;前 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 个里面 &lt;code&gt;1&lt;/code&gt; 的个数处于 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 的中间&lt;/strong&gt;。然后我们又要最大化美丽值，依此构造即可。&lt;/p&gt;
&lt;p&gt;证明：考虑一个字符串就是二维平面上一条从 &lt;span class=&#34;math inline&#34;&gt;\((0, 0)\)&lt;/span&gt; 走到 &lt;span class=&#34;math inline&#34;&gt;\((n, m)\)&lt;/span&gt; 的路径。某一位是 &lt;code&gt;1&lt;/code&gt; 表示向上走一格，某一位是 &lt;code&gt;0&lt;/code&gt; 表示向右走一格。同时，一个字符串的美丽值就是长度减一再减拐点个数。&lt;/p&gt;
&lt;p&gt;而我们发现，交换两个相邻的 &lt;code&gt;01&lt;/code&gt; 相当于是将一个拐点翻折，故在平面上处于 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 中间的路径都是可行的。那么我们其实就是，能不拐就不拐。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;3e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; s[maxn], t[maxn];&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m;&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, m);&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(s + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), read(t + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, len = n + m;&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(init, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s0 = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, t0 = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, x0 = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (init != s[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; init != t[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; cnt = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now = init;&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, len) {&lt;/span&gt;
&lt;span id=&#34;cb22-15&#34;&gt;&lt;a href=&#34;#cb22-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            s0 += (s[i] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;), t0 += (t[i] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb22-16&#34;&gt;&lt;a href=&#34;#cb22-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (now == &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb22-17&#34;&gt;&lt;a href=&#34;#cb22-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x0 + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;= max(s0, t0)) ++cnt;&lt;/span&gt;
&lt;span id=&#34;cb22-18&#34;&gt;&lt;a href=&#34;#cb22-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; now = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb22-19&#34;&gt;&lt;a href=&#34;#cb22-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            } &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb22-20&#34;&gt;&lt;a href=&#34;#cb22-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x0 &amp;gt;= min(s0, t0)) ++cnt;&lt;/span&gt;
&lt;span id=&#34;cb22-21&#34;&gt;&lt;a href=&#34;#cb22-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; now = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb22-22&#34;&gt;&lt;a href=&#34;#cb22-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb22-23&#34;&gt;&lt;a href=&#34;#cb22-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (now == &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) ++x0;&lt;/span&gt;
&lt;span id=&#34;cb22-24&#34;&gt;&lt;a href=&#34;#cb22-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb22-25&#34;&gt;&lt;a href=&#34;#cb22-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        chkmax(ans, cnt - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb22-26&#34;&gt;&lt;a href=&#34;#cb22-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb22-27&#34;&gt;&lt;a href=&#34;#cb22-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans);&lt;/span&gt;
&lt;span id=&#34;cb22-28&#34;&gt;&lt;a href=&#34;#cb22-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb22-29&#34;&gt;&lt;a href=&#34;#cb22-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;arc134&#34;&gt;ARC134&lt;/h3&gt;
&lt;h4 id=&#34;arc134c---the-majority&#34;&gt;ARC134C - The Majority&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 个有标号盒子，初始全为空。有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 种颜色的球，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 种颜色有 &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; 个球，同种颜色的球不区分。现要将所有球放入盒子里，要求每个盒子里面，颜色 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的球的个数要占到一半以上（严格）。问方案数。&lt;/p&gt;
&lt;p&gt;比较巧妙的计数套路（雾），即我们考虑将 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 颜色的球和其他的球一一配对，即将 &lt;span class=&#34;math inline&#34;&gt;\(a_1:=a_1 - \sum_{i = 2}^na_i\)&lt;/span&gt;，然后将 &lt;span class=&#34;math inline&#34;&gt;\([2, n]\)&lt;/span&gt; 颜色的球放入 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 个盒子里（可以有空盒），求出方案数，然后再乘上将 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 颜色的球放入 &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; 个盒子的方案数（不允许有空盒），即 &lt;span class=&#34;math display&#34;&gt;\[
\binom{a_1 - \sum_{i = 2}^na_i}{K + 1}\prod_{i=2}^n\binom{a_i + K + 1}{K+1}
\]&lt;/span&gt; 正确性显然，思想较为重要，marked。&lt;/p&gt;
&lt;h4 id=&#34;arc134d---concatenate-subsequences&#34;&gt;ARC134D - Concatenate Subsequences&lt;/h4&gt;
&lt;p&gt;给定长度为 &lt;span class=&#34;math inline&#34;&gt;\(2N\)&lt;/span&gt; 的正整数序列 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;。现要构造 &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; 的一个子序列，方案为：从 &lt;span class=&#34;math inline&#34;&gt;\(1, 2, \cdots, N\)&lt;/span&gt; 中取出一个子序列 &lt;span class=&#34;math inline&#34;&gt;\(x_1, \cdots, x_k\)&lt;/span&gt;，然后取出 &lt;span class=&#34;math inline&#34;&gt;\(a_{x_1}, a_{x_2},\cdots, a_{x_k}, a_{x_1 + N}, a_{x_2 +N},\cdots, a_{x_k + N}\)&lt;/span&gt;。要求构造出来的这个序列字典序最小，输出这个序列。&lt;/p&gt;
&lt;p&gt;字典序问题一般考虑贪心。我们令 &lt;span class=&#34;math inline&#34;&gt;\(A = a_1, a_2, \cdots, a_N\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(B = a_{N+ 1},\cdots, a_{2N}\)&lt;/span&gt;，取 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; 中的最小值为 &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;则如果存在一个 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 使得 &lt;span class=&#34;math inline&#34;&gt;\(A_i = X\land B_i\le A_i\)&lt;/span&gt;，则把只最小的 &lt;span class=&#34;math inline&#34;&gt;\(B_i\)&lt;/span&gt; 取走就一定是最优的。&lt;/p&gt;
&lt;p&gt;下面我们假设对于所有的 &lt;span class=&#34;math inline&#34;&gt;\(A_i = X\)&lt;/span&gt; 都有 &lt;span class=&#34;math inline&#34;&gt;\(A_i&amp;lt;B_i\)&lt;/span&gt;，可以证明把他们全部取走是最优的，而后就需要考虑取剩下的元素了。令所有 &lt;span class=&#34;math inline&#34;&gt;\(A_i = X\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 升序构成序列 &lt;span class=&#34;math inline&#34;&gt;\(y_1,\cdots, y_k\)&lt;/span&gt;。接下来考虑的就是满足 &lt;span class=&#34;math inline&#34;&gt;\(y_k&amp;lt;j\le N\land A_j\le B_{y_1}\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;可以发现，将其按照 &lt;span class=&#34;math inline&#34;&gt;\((A_j, j)\)&lt;/span&gt; 升序排序之后，我们会优先取走所有的 &lt;span class=&#34;math inline&#34;&gt;\(A_j &amp;lt; B_{y_1}\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;，最后就是考虑 &lt;span class=&#34;math inline&#34;&gt;\(A_j = B_{y_1}\)&lt;/span&gt; 的情况，这时候就需要考虑第一个 &lt;span class=&#34;math inline&#34;&gt;\(B_{y_m}\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(B_{y_m}\ne B_{y_1}\)&lt;/span&gt;，即如果加进去能使得字典序更小，那就加，否则就不要加。&lt;/p&gt;
&lt;p&gt;于是这题就做完了，细节有点烦，&lt;a href=&#34;https://atcoder.jp/contests/arc134/submissions/29161132&#34;&gt;评测记录&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;arc137&#34;&gt;ARC137&lt;/h3&gt;
&lt;p&gt;A + B + D，rk281。&lt;/p&gt;
&lt;h4 id=&#34;arc137a---coprime-pair&#34;&gt;ARC137A - Coprime Pair&lt;/h4&gt;
&lt;p&gt;题意：给定 &lt;span class=&#34;math inline&#34;&gt;\(1\le L &amp;lt; R\le 10^{18}\)&lt;/span&gt;，求一对 &lt;span class=&#34;math inline&#34;&gt;\((x,y)\)&lt;/span&gt; 满足 &lt;span class=&#34;math inline&#34;&gt;\(L\le x\le y\le R\)&lt;/span&gt; 使得 &lt;span class=&#34;math inline&#34;&gt;\(\gcd(x,y) = 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;由于在题目约束下，素数间隔至多为 &lt;span class=&#34;math inline&#34;&gt;\(K= 1500\)&lt;/span&gt; 左右，所以直接从 &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; 右边和 &lt;span class=&#34;math inline&#34;&gt;\(R\)&lt;/span&gt; 左边暴力找答案即可。时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(K^2\log R)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;然而这个东西似乎有更紧的界，但是 atcoder 官方题解我看不懂。&lt;/p&gt;
&lt;h4 id=&#34;arc137b---count-1s&#34;&gt;ARC137B - Count 1’s&lt;/h4&gt;
&lt;p&gt;题意：给定一个 0-1 串，可以将一个子段翻转一次，问最后能达到多少种不同的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;首先可以观察到最后达到的 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的个数肯定是连续的一段。&lt;/p&gt;
&lt;p&gt;所以考虑求出 &lt;em&gt;&lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 的个数减 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的个数&lt;/em&gt; 的最大值和最小值。发现 &lt;span class=&#34;math inline&#34;&gt;\(\max + \min + 1\)&lt;/span&gt; 即为答案。&lt;/p&gt;
&lt;h4 id=&#34;arc137c---distinct-numbers&#34;&gt;ARC137C - Distinct Numbers&lt;/h4&gt;
&lt;p&gt;题意：给定 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 个元素的数集 &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;，保证元素两两不同。先手后手博弈，轮到每人操作时，将最大的数取出，换成一个更小的非负整数再塞回去，需保证元素两两不同的性质不被破坏。第一个没办法进行操作的玩家输。问赢家。&lt;/p&gt;
&lt;p&gt;结论题（？）。分类讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_n - a_{n-1}&amp;gt;1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑 &lt;span class=&#34;math inline&#34;&gt;\(a_1, a_2,\cdots, a_{n-1}, a_{n-1} +1\)&lt;/span&gt; 的局面。&lt;/p&gt;
&lt;p&gt;若其为必胜态，那么其可以转移到一个必败态，原序列也可以直接转移到那个必败态。&lt;/p&gt;
&lt;p&gt;若其为必败态，那么原序列可以直接转移到他。&lt;/p&gt;
&lt;p&gt;所以 Alice 必胜。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(a_n - a_{n-1} = 1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;发现双方都要尽可能维持这个状态，否则就变成对手必胜。&lt;/p&gt;
&lt;p&gt;每次操作的时候 &lt;span class=&#34;math inline&#34;&gt;\(a_{n} - a_{n-1}\)&lt;/span&gt; 都是 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;。每次操作后会发现原来的次大值变成了新的最大值。判断 &lt;span class=&#34;math inline&#34;&gt;\(a_n - n\)&lt;/span&gt; 的奇偶性即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb23-1&#34;&gt;&lt;a href=&#34;#cb23-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;3e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb23-2&#34;&gt;&lt;a href=&#34;#cb23-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a[maxn], n;&lt;/span&gt;
&lt;span id=&#34;cb23-3&#34;&gt;&lt;a href=&#34;#cb23-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-4&#34;&gt;&lt;a href=&#34;#cb23-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb23-5&#34;&gt;&lt;a href=&#34;#cb23-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n);&lt;/span&gt;
&lt;span id=&#34;cb23-6&#34;&gt;&lt;a href=&#34;#cb23-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) read(a[i]);&lt;/span&gt;
&lt;span id=&#34;cb23-7&#34;&gt;&lt;a href=&#34;#cb23-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (a[n] - a[n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] &amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) print(&lt;span class=&#34;st&#34;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb23-8&#34;&gt;&lt;a href=&#34;#cb23-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((n + a[n] + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) print(&lt;span class=&#34;st&#34;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb23-9&#34;&gt;&lt;a href=&#34;#cb23-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; print(&lt;span class=&#34;st&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb23-10&#34;&gt;&lt;a href=&#34;#cb23-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb23-11&#34;&gt;&lt;a href=&#34;#cb23-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;arc137d---prefix-xors&#34;&gt;ARC137D - Prefix XORs&lt;/h4&gt;
&lt;p&gt;题意：给定整数序列 &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(N\le 10^6\)&lt;/span&gt;，以及整数 &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt;。对每个 &lt;span class=&#34;math inline&#34;&gt;\(k=1,2,\cdots, m\)&lt;/span&gt;，求出经过下面操作 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 次之后 &lt;span class=&#34;math inline&#34;&gt;\(A_n\)&lt;/span&gt; 的值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于每个 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，令 &lt;span class=&#34;math inline&#34;&gt;\(B_i = \displaystyle\bigoplus_{i=1}^i A_i\)&lt;/span&gt;，其中 &lt;span class=&#34;math inline&#34;&gt;\(\oplus\)&lt;/span&gt; 代表异或。&lt;/li&gt;
&lt;li&gt;然后令 &lt;span class=&#34;math inline&#34;&gt;\(A = B\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么很显然，我们可以考虑对于一个固定的 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(A_n\)&lt;/span&gt; 贡献了多少次，下面假定 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 从 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 开始编号。&lt;/p&gt;
&lt;p&gt;然后你发现 &lt;span class=&#34;math inline&#34;&gt;\(A_i\)&lt;/span&gt; 对 &lt;span class=&#34;math inline&#34;&gt;\(A_n\)&lt;/span&gt; 会贡献 &lt;span class=&#34;math inline&#34;&gt;\(\dbinom{n - i + k - 1}{k - 1}\)&lt;/span&gt; 次。你会注意到我们只需要知道他的奇偶性，其为奇数就会产生贡献。&lt;/p&gt;
&lt;p&gt;考虑卢卡斯定理的 &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; 进制形式，发现当且仅当 &lt;span class=&#34;math inline&#34;&gt;\(n - i + k - 1\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(k - 1\)&lt;/span&gt; 在二进制表示下的超集时，Lucas 的式子里面才不会有 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 项，才会产生 &lt;span class=&#34;math inline&#34;&gt;\(\dbinom{n - i + k - 1}{k - 1}\)&lt;/span&gt; 的贡献。&lt;/p&gt;
&lt;p&gt;然后注意到，因为 &lt;span class=&#34;math inline&#34;&gt;\(n - i + k - 1\)&lt;/span&gt; 为 &lt;span class=&#34;math inline&#34;&gt;\(k - 1\)&lt;/span&gt; 的超集，所以 &lt;span class=&#34;math inline&#34;&gt;\(n - i\)&lt;/span&gt; 按位与上 &lt;span class=&#34;math inline&#34;&gt;\(k - 1\)&lt;/span&gt; 必然是 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。那么就考虑做一个高维前缀和，然后对每个 &lt;span class=&#34;math inline&#34;&gt;\(k - 1\)&lt;/span&gt; 查询的时候把 &lt;span class=&#34;math inline&#34;&gt;\(k - 1\)&lt;/span&gt; 取补集即可。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb24-1&#34;&gt;&lt;a href=&#34;#cb24-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;) | &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb24-2&#34;&gt;&lt;a href=&#34;#cb24-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a[maxn], n, m;&lt;/span&gt;
&lt;span id=&#34;cb24-3&#34;&gt;&lt;a href=&#34;#cb24-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-4&#34;&gt;&lt;a href=&#34;#cb24-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb24-5&#34;&gt;&lt;a href=&#34;#cb24-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(n, m);&lt;/span&gt;
&lt;span id=&#34;cb24-6&#34;&gt;&lt;a href=&#34;#cb24-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) read(a[i]);&lt;/span&gt;
&lt;span id=&#34;cb24-7&#34;&gt;&lt;a href=&#34;#cb24-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    reverse(a, a + n);&lt;/span&gt;
&lt;span id=&#34;cb24-8&#34;&gt;&lt;a href=&#34;#cb24-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(j, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;) FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (i &amp;amp; (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; j)) a[i] ^= a[i ^ (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; j)];&lt;/span&gt;
&lt;span id=&#34;cb24-9&#34;&gt;&lt;a href=&#34;#cb24-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(k, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) print(a[(k - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) ^ ((&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)], &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb24-10&#34;&gt;&lt;a href=&#34;#cb24-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb24-11&#34;&gt;&lt;a href=&#34;#cb24-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;arc137e---bakery&#34;&gt;ARC137E - Bakery&lt;/h4&gt;
&lt;p&gt;题意：规划面包店，天数为 &lt;span class=&#34;math inline&#34;&gt;\(1,2,\cdots, N\)&lt;/span&gt;。有 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 个面包师，编号从 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;，雇用 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 的开支是 &lt;span class=&#34;math inline&#34;&gt;\(C_i\)&lt;/span&gt;，然后其会在 &lt;span class=&#34;math inline&#34;&gt;\(L_i,\cdots, R_i\)&lt;/span&gt; 每天做一个面包。第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 天面包师一共做了 &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; 个面包的话，售出的就是 &lt;span class=&#34;math inline&#34;&gt;\(\min(A_i,x_i)\)&lt;/span&gt; 个面包。每个面包获利 &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt;，求最大利润（售出面包的获利减去雇佣面包师的开支）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(1\le N,M\le 2000\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le D,C_i\le 10^9\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;第一眼考虑建费用流，然而用面包来流似乎不好处理面包师的开支。&lt;/p&gt;
&lt;p&gt;那么只能拿面包师来流了，对于面包的贡献，就考虑在天数之间流。具体地：建立图，编号从 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(j\to(j - 1)\)&lt;/span&gt;，流量 &lt;span class=&#34;math inline&#34;&gt;\(A_j\)&lt;/span&gt;，费用 &lt;span class=&#34;math inline&#34;&gt;\(-D\)&lt;/span&gt;。这部分处理产生贡献的面包。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(j\to (j-1)\)&lt;/span&gt;，流量 &lt;span class=&#34;math inline&#34;&gt;\(M - A_j\)&lt;/span&gt;，费用 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;。这部分要让剩下产生不了贡献的流过去。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\((L_{i} - 1)\to R_i\)&lt;/span&gt;，流量 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，费用 &lt;span class=&#34;math inline&#34;&gt;\(C_i\)&lt;/span&gt;。这部分处理面包师的费用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上图的&lt;strong&gt;最小费用循环流&lt;/strong&gt;的费用就是答案。然而我们不会直球做费用循环流，所以考虑一下怎么转化。&lt;/p&gt;
&lt;p&gt;首先，选一个面包师相当于选了一个环，我们肯定是会选&lt;strong&gt;负环&lt;/strong&gt;（否则不如不选）。那么就对所有的负权边 &lt;span class=&#34;math inline&#34;&gt;\((u,v,w,c)\)&lt;/span&gt; 进行如下处理：加边 &lt;span class=&#34;math inline&#34;&gt;\((s, v, w, 0)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((u, t, w, 0)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((v, u, w, -c)\)&lt;/span&gt;，然后费用预先加上 &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;。剩下的正权和 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 权边照旧不变，然后跑一个&lt;strong&gt;流量为 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的最小费用流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这样做的正确性是：先假设负权边全部流满，然后若流了 &lt;span class=&#34;math inline&#34;&gt;\(s\to v\to u\to t\)&lt;/span&gt; 相当于退掉原来的流。剩下就是和正权边连环计算了。&lt;/p&gt;
&lt;p&gt;具体地，在本题里面，由于图结构的特殊性，&lt;span class=&#34;math inline&#34;&gt;\((s,v,w,0)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((u,t,w,0)\)&lt;/span&gt; 是没必要加的，因为对于一个点，其一定会同时连 &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;，最小费用最大流告诉我们会优先流满 &lt;span class=&#34;math inline&#34;&gt;\(s\to u\to t\)&lt;/span&gt;，对费用不产生影响。所以我们甚至可以丢掉超级源汇。&lt;/p&gt;
&lt;p&gt;综上，连边方式如下：对每个天连 &lt;span class=&#34;math inline&#34;&gt;\((j-1,j,A_j,D)\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\((j-1,j,M - A_j,0)\)&lt;/span&gt;，再对每个面包师连 &lt;span class=&#34;math inline&#34;&gt;\((L_i - 1, R_i, 1, C_i)\)&lt;/span&gt;，跑 &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; 到 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 的流量为 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 的最小费用流即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本题卡朴素的 EK + SPFA 费用流，正解是原始对偶算法，时间复杂度 &lt;span class=&#34;math inline&#34;&gt;\(O(N^2\log N)\)&lt;/span&gt;，视 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 与 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 同阶。如果你是和我一样的懒狗的话可以用一下 ACL 官方的费用流，用的就是原始对偶，很快。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb25-1&#34;&gt;&lt;a href=&#34;#cb25-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; ll = &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb25-2&#34;&gt;&lt;a href=&#34;#cb25-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;2005&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb25-3&#34;&gt;&lt;a href=&#34;#cb25-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; N, M, D;&lt;/span&gt;
&lt;span id=&#34;cb25-4&#34;&gt;&lt;a href=&#34;#cb25-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-5&#34;&gt;&lt;a href=&#34;#cb25-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb25-6&#34;&gt;&lt;a href=&#34;#cb25-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(N, M, D);&lt;/span&gt;
&lt;span id=&#34;cb25-7&#34;&gt;&lt;a href=&#34;#cb25-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    atcoder::mcf_graph&amp;lt;ll, ll&amp;gt; G(N + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb25-8&#34;&gt;&lt;a href=&#34;#cb25-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll ans = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb25-9&#34;&gt;&lt;a href=&#34;#cb25-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, N) {&lt;/span&gt;
&lt;span id=&#34;cb25-10&#34;&gt;&lt;a href=&#34;#cb25-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; a; read(a);&lt;/span&gt;
&lt;span id=&#34;cb25-11&#34;&gt;&lt;a href=&#34;#cb25-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        G.add_edge(i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, i, a, D), G.add_edge(i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, i, M - a, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb25-12&#34;&gt;&lt;a href=&#34;#cb25-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ans += &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;ll&lt;/span&gt; * D * a;&lt;/span&gt;
&lt;span id=&#34;cb25-13&#34;&gt;&lt;a href=&#34;#cb25-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb25-14&#34;&gt;&lt;a href=&#34;#cb25-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, M) {&lt;/span&gt;
&lt;span id=&#34;cb25-15&#34;&gt;&lt;a href=&#34;#cb25-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; l, r, c; read(l, r, c);&lt;/span&gt;
&lt;span id=&#34;cb25-16&#34;&gt;&lt;a href=&#34;#cb25-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        G.add_edge(l - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, r, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, c);&lt;/span&gt;
&lt;span id=&#34;cb25-17&#34;&gt;&lt;a href=&#34;#cb25-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb25-18&#34;&gt;&lt;a href=&#34;#cb25-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    print(ans - G.flow(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, N, M).second);&lt;/span&gt;
&lt;span id=&#34;cb25-19&#34;&gt;&lt;a href=&#34;#cb25-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; output(), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb25-20&#34;&gt;&lt;a href=&#34;#cb25-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;arc138&#34;&gt;ARC138&lt;/h3&gt;
&lt;h4 id=&#34;arc138c---rotate-and-play-game&#34;&gt;ARC138C - Rotate and Play Game&lt;/h4&gt;
&lt;p&gt;第一步通过观察大样例发现，Snuke 一定会取走最大的 &lt;span class=&#34;math inline&#34;&gt;\(n / 2\)&lt;/span&gt; 个元素。&lt;/p&gt;
&lt;p&gt;那么我们考虑对于一个静态的序列，Snuke 如何能够成功取走最大的 &lt;span class=&#34;math inline&#34;&gt;\(n/2\)&lt;/span&gt; 个元素。&lt;/p&gt;
&lt;p&gt;发现若视最大的（要取走的） &lt;span class=&#34;math inline&#34;&gt;\(n/2\)&lt;/span&gt; 个元素为 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;，剩余的为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的话，相当于对于每一个位置，前缀和都不能为负（虽然只是充分，但不必要）。证明：每一轮中，Snuke 取走最靠前的 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;（肯定要避免他被抢走），然后 Mr. Min 照常取一个 &lt;span class=&#34;math inline&#34;&gt;\(+1\)&lt;/span&gt;，于是乎原序列前缀和的性质肯定还是满足的。&lt;/p&gt;
&lt;p&gt;现在问题就变为如何求循环位移的偏移量。注意到根据括号序列的性质，其一定有解。&lt;/p&gt;
&lt;p&gt;那么就将这个序列复制一份，然后看 &lt;span class=&#34;math inline&#34;&gt;\([i, i + n - 1]\)&lt;/span&gt; 中的前缀和最小值是否 &lt;span class=&#34;math inline&#34;&gt;\(\ge S_i\)&lt;/span&gt; 即可。可以使用 ST 表或者滑动窗口一类的来做。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb26-1&#34;&gt;&lt;a href=&#34;#cb26-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-2&#34;&gt;&lt;a href=&#34;#cb26-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define il &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-3&#34;&gt;&lt;a href=&#34;#cb26-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb26-4&#34;&gt;&lt;a href=&#34;#cb26-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;
&lt;span id=&#34;cb26-5&#34;&gt;&lt;a href=&#34;#cb26-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-6&#34;&gt;&lt;a href=&#34;#cb26-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; ll = &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-7&#34;&gt;&lt;a href=&#34;#cb26-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;fl&#34;&gt;2e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-8&#34;&gt;&lt;a href=&#34;#cb26-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, st[&lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;][maxn &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], lg[maxn &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb26-9&#34;&gt;&lt;a href=&#34;#cb26-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-10&#34;&gt;&lt;a href=&#34;#cb26-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Node {&lt;/span&gt;
&lt;span id=&#34;cb26-11&#34;&gt;&lt;a href=&#34;#cb26-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll val; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; id;&lt;/span&gt;
&lt;span id=&#34;cb26-12&#34;&gt;&lt;a href=&#34;#cb26-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} a[maxn &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb26-13&#34;&gt;&lt;a href=&#34;#cb26-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-14&#34;&gt;&lt;a href=&#34;#cb26-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb26-15&#34;&gt;&lt;a href=&#34;#cb26-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cin &amp;gt;&amp;gt; n;&lt;/span&gt;
&lt;span id=&#34;cb26-16&#34;&gt;&lt;a href=&#34;#cb26-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) cin &amp;gt;&amp;gt; a[i].val, a[i].id = i;&lt;/span&gt;
&lt;span id=&#34;cb26-17&#34;&gt;&lt;a href=&#34;#cb26-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    sort(a + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, a + n + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, [](&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; Node &amp;amp;a, &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; Node &amp;amp;b) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a.val &amp;gt; b.val;});&lt;/span&gt;
&lt;span id=&#34;cb26-18&#34;&gt;&lt;a href=&#34;#cb26-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll sum = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, tmp = a[n &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].val;&lt;/span&gt;
&lt;span id=&#34;cb26-19&#34;&gt;&lt;a href=&#34;#cb26-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) sum += a[i].val, a[i].val = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-20&#34;&gt;&lt;a href=&#34;#cb26-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, (n &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) a[i].val = -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-21&#34;&gt;&lt;a href=&#34;#cb26-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    sort(a + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, a + n + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, [](&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; Node &amp;amp;a, &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; Node &amp;amp;b) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a.id &amp;lt; b.id;});&lt;/span&gt;
&lt;span id=&#34;cb26-22&#34;&gt;&lt;a href=&#34;#cb26-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) a[n + i] = a[i];&lt;/span&gt;
&lt;span id=&#34;cb26-23&#34;&gt;&lt;a href=&#34;#cb26-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    lg[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] = -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-24&#34;&gt;&lt;a href=&#34;#cb26-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) st[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][i] = st[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] + a[i].val, lg[i] = lg[i &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-25&#34;&gt;&lt;a href=&#34;#cb26-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;) FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, (n &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) - (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; j) + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) st[j][i] = max(st[j - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][i], st[j - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;][i + (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (j - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))]);&lt;/span&gt;
&lt;span id=&#34;cb26-26&#34;&gt;&lt;a href=&#34;#cb26-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s = &lt;span class=&#34;dv&#34;&gt;31&lt;/span&gt; - &lt;span class=&#34;fu&#34;&gt;__builtin_clz&lt;/span&gt;(n);&lt;/span&gt;
&lt;span id=&#34;cb26-27&#34;&gt;&lt;a href=&#34;#cb26-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (a[i].val == &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb26-28&#34;&gt;&lt;a href=&#34;#cb26-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; ret = max(st[s][i], st[s][i + n - (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; s)]);&lt;/span&gt;
&lt;span id=&#34;cb26-29&#34;&gt;&lt;a href=&#34;#cb26-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (ret &amp;lt;= st[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;][i]) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; cout &amp;lt;&amp;lt; i - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-30&#34;&gt;&lt;a href=&#34;#cb26-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb26-31&#34;&gt;&lt;a href=&#34;#cb26-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb26-32&#34;&gt;&lt;a href=&#34;#cb26-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意代码里面的 &lt;span class=&#34;math inline&#34;&gt;\(\pm 1\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\(\min/\max\)&lt;/span&gt; 性似乎和题解相反（反正是对称的，不管了）。&lt;/p&gt;
&lt;h4 id=&#34;arc138d---differ-by-k-bits&#34;&gt;ARC138D - Differ by K bits&lt;/h4&gt;
&lt;p&gt;撞了洛谷原题 &lt;a href=&#34;https://www.luogu.com.cn/problem/P7949&#34;&gt;P7949&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本题中，暴力的复杂度貌似是对的，具体原因不详。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb27-1&#34;&gt;&lt;a href=&#34;#cb27-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-2&#34;&gt;&lt;a href=&#34;#cb27-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb27-3&#34;&gt;&lt;a href=&#34;#cb27-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-4&#34;&gt;&lt;a href=&#34;#cb27-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;
&lt;span id=&#34;cb27-5&#34;&gt;&lt;a href=&#34;#cb27-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-6&#34;&gt;&lt;a href=&#34;#cb27-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; | &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb27-7&#34;&gt;&lt;a href=&#34;#cb27-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, k, vis[maxn];&lt;/span&gt;
&lt;span id=&#34;cb27-8&#34;&gt;&lt;a href=&#34;#cb27-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; a, b;&lt;/span&gt;
&lt;span id=&#34;cb27-9&#34;&gt;&lt;a href=&#34;#cb27-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-10&#34;&gt;&lt;a href=&#34;#cb27-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; dfs(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x) {&lt;/span&gt;
&lt;span id=&#34;cb27-11&#34;&gt;&lt;a href=&#34;#cb27-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    a.push_back(x); vis[x] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb27-12&#34;&gt;&lt;a href=&#34;#cb27-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (a.size() == (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n)) {&lt;/span&gt;
&lt;span id=&#34;cb27-13&#34;&gt;&lt;a href=&#34;#cb27-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;Yes&amp;quot;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb27-14&#34;&gt;&lt;a href=&#34;#cb27-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;x : a)&lt;/span&gt;
&lt;span id=&#34;cb27-15&#34;&gt;&lt;a href=&#34;#cb27-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&#34;st&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;; exit(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb27-16&#34;&gt;&lt;a href=&#34;#cb27-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb27-17&#34;&gt;&lt;a href=&#34;#cb27-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;c : b) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!vis[c ^ x]) dfs(c ^ x);&lt;/span&gt;
&lt;span id=&#34;cb27-18&#34;&gt;&lt;a href=&#34;#cb27-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb27-19&#34;&gt;&lt;a href=&#34;#cb27-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb27-20&#34;&gt;&lt;a href=&#34;#cb27-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-21&#34;&gt;&lt;a href=&#34;#cb27-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb27-22&#34;&gt;&lt;a href=&#34;#cb27-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;&lt;/span&gt;
&lt;span id=&#34;cb27-23&#34;&gt;&lt;a href=&#34;#cb27-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (k % &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;No&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb27-24&#34;&gt;&lt;a href=&#34;#cb27-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;__builtin_popcount&lt;/span&gt;(i) == k) b.push_back(i);&lt;/span&gt;
&lt;span id=&#34;cb27-25&#34;&gt;&lt;a href=&#34;#cb27-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    dfs(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb27-26&#34;&gt;&lt;a href=&#34;#cb27-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;No&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb27-27&#34;&gt;&lt;a href=&#34;#cb27-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;考虑正解：首先我们注意到，若 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 为偶数，其一定无解。因为不可能所有数的 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{popcount}\)&lt;/span&gt; 都是偶数。且 &lt;span class=&#34;math inline&#34;&gt;\(k = n\)&lt;/span&gt; 的情况也无解。&lt;/p&gt;
&lt;p&gt;而我们若是将 &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{popcount}(x) = k\)&lt;/span&gt; 的 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; 插入线性基 &lt;span class=&#34;math inline&#34;&gt;\(\mathfrak B\)&lt;/span&gt;，则可以将成功插入的数看作一组基底，而若 &lt;span class=&#34;math inline&#34;&gt;\(|\mathfrak B|&amp;lt;n\)&lt;/span&gt; 显然也无解。否则我们总能构造出答案：只需要满足构成相邻两个数的线性组合中，有一项不一样即可，具体这个可以用格雷码实现：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb28-1&#34;&gt;&lt;a href=&#34;#cb28-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-2&#34;&gt;&lt;a href=&#34;#cb28-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb28-3&#34;&gt;&lt;a href=&#34;#cb28-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define DEC&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;--i)&lt;/span&gt;
&lt;span id=&#34;cb28-4&#34;&gt;&lt;a href=&#34;#cb28-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-5&#34;&gt;&lt;a href=&#34;#cb28-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;
&lt;span id=&#34;cb28-6&#34;&gt;&lt;a href=&#34;#cb28-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-7&#34;&gt;&lt;a href=&#34;#cb28-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, k, a[&lt;span class=&#34;dv&#34;&gt;22&lt;/span&gt;], p[&lt;span class=&#34;dv&#34;&gt;22&lt;/span&gt;], cnt;&lt;/span&gt;
&lt;span id=&#34;cb28-8&#34;&gt;&lt;a href=&#34;#cb28-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-9&#34;&gt;&lt;a href=&#34;#cb28-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; insert(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x0) {&lt;/span&gt;
&lt;span id=&#34;cb28-10&#34;&gt;&lt;a href=&#34;#cb28-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x = x0;&lt;/span&gt;
&lt;span id=&#34;cb28-11&#34;&gt;&lt;a href=&#34;#cb28-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    DEC(j, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((x &amp;gt;&amp;gt; j) &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb28-12&#34;&gt;&lt;a href=&#34;#cb28-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!p[j]) {&lt;/span&gt;
&lt;span id=&#34;cb28-13&#34;&gt;&lt;a href=&#34;#cb28-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            p[j] = x, a[cnt++] = x0;&lt;/span&gt;
&lt;span id=&#34;cb28-14&#34;&gt;&lt;a href=&#34;#cb28-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb28-15&#34;&gt;&lt;a href=&#34;#cb28-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        } &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; x ^= p[j];&lt;/span&gt;
&lt;span id=&#34;cb28-16&#34;&gt;&lt;a href=&#34;#cb28-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb28-17&#34;&gt;&lt;a href=&#34;#cb28-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb28-18&#34;&gt;&lt;a href=&#34;#cb28-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb28-19&#34;&gt;&lt;a href=&#34;#cb28-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-20&#34;&gt;&lt;a href=&#34;#cb28-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb28-21&#34;&gt;&lt;a href=&#34;#cb28-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;&lt;/span&gt;
&lt;span id=&#34;cb28-22&#34;&gt;&lt;a href=&#34;#cb28-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;__builtin_popcount&lt;/span&gt;(i) == k) insert(i);&lt;/span&gt;
&lt;span id=&#34;cb28-23&#34;&gt;&lt;a href=&#34;#cb28-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (cnt &amp;lt; n) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; puts(&lt;span class=&#34;st&#34;&gt;&amp;quot;No&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb28-24&#34;&gt;&lt;a href=&#34;#cb28-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cout &amp;lt;&amp;lt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;
&lt;span id=&#34;cb28-25&#34;&gt;&lt;a href=&#34;#cb28-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, (&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n) - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb28-26&#34;&gt;&lt;a href=&#34;#cb28-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; g = i ^ (i &amp;gt;&amp;gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), now = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb28-27&#34;&gt;&lt;a href=&#34;#cb28-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(j, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((g &amp;gt;&amp;gt; j) &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) now ^= a[j];&lt;/span&gt;
&lt;span id=&#34;cb28-28&#34;&gt;&lt;a href=&#34;#cb28-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        cout &amp;lt;&amp;lt; now &amp;lt;&amp;lt; &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb28-29&#34;&gt;&lt;a href=&#34;#cb28-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb28-30&#34;&gt;&lt;a href=&#34;#cb28-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb28-31&#34;&gt;&lt;a href=&#34;#cb28-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>TopCoder12432 CurvyonRails</title>
        <link>https://oi.imyangty.com/sol-topcoder-12432/</link>
        <pubDate>Thu, 21 Jul 2022 16:16:01 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-topcoder-12432/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg59.webp" alt="Featured image of post TopCoder12432 CurvyonRails" /&gt;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;有一个 &lt;span class=&#34;math inline&#34;&gt;\(n\times m\)&lt;/span&gt; 的网格，每个格子是草原或者城镇。要在城镇修若干首尾相接的铁路把所有城镇串起来。&lt;/p&gt;
&lt;p&gt;有些城镇里有人，他们希望穿过所在城镇的铁路是弯的。问最多能满足多少人的需求。无解输出 &lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;不考虑弯曲的话，即要求每个点的度数为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt;，遇到棋盘考虑黑白染色，白点向相邻黑点连容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 向白点连容量为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的边，黑点向 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 连容量为 &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; 的边，满流即有解。&lt;/p&gt;
&lt;p&gt;然后考虑关键点的这个限制，发现如果一个关键点处，两个连接是相对的，那么就要贡献 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的代价。不妨将每个点拆成横点和竖点，&lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt; 向每个白点连容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边，横白向竖黑/竖白向横黑连容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边，每个黑点再向 &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; 连容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边，这样所有的格子上铁轨都是弯的了。&lt;/p&gt;
&lt;p&gt;但是可能无解，所以同一个格子拆的点里面连容量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 费用为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; 的边。然后跑最小费用最大流即可。&lt;/p&gt;
&lt;p&gt;其实很像 TJOI2013 循环格，都是将限制转化为容量，然后用费用流描述其代价。&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define il &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; CurvyonRails {&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;at&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;2005&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m, id1[&lt;span class=&#34;dv&#34;&gt;28&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;28&lt;/span&gt;], id2[&lt;span class=&#34;dv&#34;&gt;28&lt;/span&gt;][&lt;span class=&#34;dv&#34;&gt;28&lt;/span&gt;], tot;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; S, T, cnt, cnt2;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Edge {&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; to, nxt, w, c;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    } e[&lt;span class=&#34;dv&#34;&gt;50005&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; head[maxn], cnte;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    il &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; addEdge(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; w, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; c) {&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        e[++cnte] = {v, head[u], w, c}, head[u] = cnte;&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        e[++cnte] = {u, head[v], &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, -c}, head[v] = cnte;&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; dis[maxn], flow[maxn], maxFlow, minCost;&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; pre[maxn], inq[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; SPFA() {&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        memset(dis, &lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        memset(inq, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; inq);&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        queue&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        q.push(S), inq[S] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, dis[S] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, flow[S] = &lt;span class=&#34;fl&#34;&gt;1e9&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = q.front(); q.pop();&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            inq[u] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = head[u], v = e[i].to; i; v = e[i = e[i].nxt].to) {&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (e[i].w &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dis[v] &amp;gt; dis[u] + e[i].c) {&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    dis[v] = dis[u] + e[i].c;&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    flow[v] = min(flow[u], e[i].w);&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    pre[v] = i;&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!inq[v]) q.push(v), inq[v] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-43&#34;&gt;&lt;a href=&#34;#cb1-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-44&#34;&gt;&lt;a href=&#34;#cb1-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; dis[T] &amp;lt; &lt;span class=&#34;fl&#34;&gt;1e9&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-45&#34;&gt;&lt;a href=&#34;#cb1-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-46&#34;&gt;&lt;a href=&#34;#cb1-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-47&#34;&gt;&lt;a href=&#34;#cb1-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; update() {&lt;/span&gt;
&lt;span id=&#34;cb1-48&#34;&gt;&lt;a href=&#34;#cb1-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = T;&lt;/span&gt;
&lt;span id=&#34;cb1-49&#34;&gt;&lt;a href=&#34;#cb1-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (u != S) {&lt;/span&gt;
&lt;span id=&#34;cb1-50&#34;&gt;&lt;a href=&#34;#cb1-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = pre[u];&lt;/span&gt;
&lt;span id=&#34;cb1-51&#34;&gt;&lt;a href=&#34;#cb1-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            e[i].w -= flow[T], e[i ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].w += flow[T];&lt;/span&gt;
&lt;span id=&#34;cb1-52&#34;&gt;&lt;a href=&#34;#cb1-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            u = e[i ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].to;&lt;/span&gt;
&lt;span id=&#34;cb1-53&#34;&gt;&lt;a href=&#34;#cb1-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-54&#34;&gt;&lt;a href=&#34;#cb1-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        maxFlow += flow[T], minCost += flow[T] * dis[T];&lt;/span&gt;
&lt;span id=&#34;cb1-55&#34;&gt;&lt;a href=&#34;#cb1-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-56&#34;&gt;&lt;a href=&#34;#cb1-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-57&#34;&gt;&lt;a href=&#34;#cb1-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-58&#34;&gt;&lt;a href=&#34;#cb1-58&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb1-59&#34;&gt;&lt;a href=&#34;#cb1-59&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    CurvyonRails() {&lt;/span&gt;
&lt;span id=&#34;cb1-60&#34;&gt;&lt;a href=&#34;#cb1-60&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        maxFlow = minCost = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-61&#34;&gt;&lt;a href=&#34;#cb1-61&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        cnt = cnt2 = tot = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-62&#34;&gt;&lt;a href=&#34;#cb1-62&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        cnte = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-63&#34;&gt;&lt;a href=&#34;#cb1-63&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        memset(id1, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; id1);&lt;/span&gt;
&lt;span id=&#34;cb1-64&#34;&gt;&lt;a href=&#34;#cb1-64&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        memset(id2, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; id2);&lt;/span&gt;
&lt;span id=&#34;cb1-65&#34;&gt;&lt;a href=&#34;#cb1-65&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-66&#34;&gt;&lt;a href=&#34;#cb1-66&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; getmin(vector&amp;lt;string&amp;gt; field) {&lt;/span&gt;
&lt;span id=&#34;cb1-67&#34;&gt;&lt;a href=&#34;#cb1-67&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        n = field.size(), m = field[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;].size();&lt;/span&gt;
&lt;span id=&#34;cb1-68&#34;&gt;&lt;a href=&#34;#cb1-68&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        S = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, T = tot = &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-69&#34;&gt;&lt;a href=&#34;#cb1-69&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) FOR(j, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, m - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (field[i][j] != &lt;span class=&#34;ch&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb1-70&#34;&gt;&lt;a href=&#34;#cb1-70&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            id1[i][j] = ++tot;&lt;/span&gt;
&lt;span id=&#34;cb1-71&#34;&gt;&lt;a href=&#34;#cb1-71&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            id2[i][j] = ++tot;&lt;/span&gt;
&lt;span id=&#34;cb1-72&#34;&gt;&lt;a href=&#34;#cb1-72&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-73&#34;&gt;&lt;a href=&#34;#cb1-73&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, n - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) FOR(j, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, m - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (id1[i][j]) {&lt;/span&gt;
&lt;span id=&#34;cb1-74&#34;&gt;&lt;a href=&#34;#cb1-74&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((i + j) &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb1-75&#34;&gt;&lt;a href=&#34;#cb1-75&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                ++cnt2, ++cnt;&lt;/span&gt;
&lt;span id=&#34;cb1-76&#34;&gt;&lt;a href=&#34;#cb1-76&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                addEdge(id1[i][j], T, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-77&#34;&gt;&lt;a href=&#34;#cb1-77&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                addEdge(id2[i][j], T, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-78&#34;&gt;&lt;a href=&#34;#cb1-78&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            } &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb1-79&#34;&gt;&lt;a href=&#34;#cb1-79&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                --cnt2, ++cnt;&lt;/span&gt;
&lt;span id=&#34;cb1-80&#34;&gt;&lt;a href=&#34;#cb1-80&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                addEdge(S, id1[i][j], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-81&#34;&gt;&lt;a href=&#34;#cb1-81&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                addEdge(S, id2[i][j], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-82&#34;&gt;&lt;a href=&#34;#cb1-82&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                FOR(k, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;) {&lt;/span&gt;
&lt;span id=&#34;cb1-83&#34;&gt;&lt;a href=&#34;#cb1-83&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;at&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; fx[] = {&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb1-84&#34;&gt;&lt;a href=&#34;#cb1-84&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;at&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; fy[] = {&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;};&lt;/span&gt;
&lt;span id=&#34;cb1-85&#34;&gt;&lt;a href=&#34;#cb1-85&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x = i + fx[k], y = j + fy[k];&lt;/span&gt;
&lt;span id=&#34;cb1-86&#34;&gt;&lt;a href=&#34;#cb1-86&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; || x &amp;gt;= n || y &amp;lt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; || y &amp;gt;= m || field[x][y] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-87&#34;&gt;&lt;a href=&#34;#cb1-87&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (k &amp;amp; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) addEdge(id1[i][j], id2[x][y], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-88&#34;&gt;&lt;a href=&#34;#cb1-88&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt; addEdge(id2[i][j], id1[x][y], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-89&#34;&gt;&lt;a href=&#34;#cb1-89&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb1-90&#34;&gt;&lt;a href=&#34;#cb1-90&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-91&#34;&gt;&lt;a href=&#34;#cb1-91&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; cost = (field[i][j] == &lt;span class=&#34;ch&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-92&#34;&gt;&lt;a href=&#34;#cb1-92&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            addEdge(id1[i][j], id2[i][j], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, cost);&lt;/span&gt;
&lt;span id=&#34;cb1-93&#34;&gt;&lt;a href=&#34;#cb1-93&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            addEdge(id2[i][j], id1[i][j], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, cost);&lt;/span&gt;
&lt;span id=&#34;cb1-94&#34;&gt;&lt;a href=&#34;#cb1-94&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-95&#34;&gt;&lt;a href=&#34;#cb1-95&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (cnt2) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-96&#34;&gt;&lt;a href=&#34;#cb1-96&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (SPFA()) update();&lt;/span&gt;
&lt;span id=&#34;cb1-97&#34;&gt;&lt;a href=&#34;#cb1-97&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (maxFlow != cnt) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-98&#34;&gt;&lt;a href=&#34;#cb1-98&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; minCost;&lt;/span&gt;
&lt;span id=&#34;cb1-99&#34;&gt;&lt;a href=&#34;#cb1-99&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-100&#34;&gt;&lt;a href=&#34;#cb1-100&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>QOJ1825 [NAC2021 I] The King&#39;s Guards</title>
        <link>https://oi.imyangty.com/sol-qoj1825/</link>
        <pubDate>Fri, 08 Apr 2022 08:05:35 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-qoj1825/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg39.webp" alt="Featured image of post QOJ1825 [NAC2021 I] The King&#39;s Guards" /&gt;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个点，&lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; 条待修建的边 &lt;span class=&#34;math inline&#34;&gt;\((u_i, v_i, w_i)\)&lt;/span&gt;。&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 个守卫，每个守卫进驻一个村子，第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个能进驻的集合为 &lt;span class=&#34;math inline&#34;&gt;\(S_i\)&lt;/span&gt;。要求每个点都能&lt;strong&gt;恰好被一个守卫&lt;/strong&gt;通过若干条边到达。&lt;/p&gt;
&lt;p&gt;若存在修建边和放置守卫的方案，输出建边的最小代价，否则报告无解。&lt;span class=&#34;math inline&#34;&gt;\(1\le k\le n\le 300\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le w_i\le 100\)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;拟阵贪心属实有点神仙了，这里写写清新费用流做法。&lt;/p&gt;
&lt;p&gt;对于这种类型的题，可以想到答案一定会在最小生成森林上面产生，否则总可以删掉那条不在最小生成森林上的边来获取一个不更劣的结果。所以先求出其最小生成森林。&lt;/p&gt;
&lt;p&gt;那么问题就变成了树上的了。&lt;/p&gt;
&lt;p&gt;而注意到，我们分配守卫这个事情可以看作将守卫匹配给连通块。而一个连通块肯定是一棵树，那么不妨认为每个守卫可以干碎其对应连通块里面的某条边。那么就可以考虑费用流了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拆每个原图的点为入点和出点，连边 &lt;span class=&#34;math inline&#34;&gt;\((u_{\mathrm{in}},u_{\mathrm{out}}, 1, 0)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于每个生成森林中的边 &lt;span class=&#34;math inline&#34;&gt;\((\mathrm{fa}_u, u, w)\)&lt;/span&gt; 连边 &lt;span class=&#34;math inline&#34;&gt;\((u_{\mathrm{out}}, T, 1, w)\)&lt;/span&gt; 和 &lt;span class=&#34;math inline&#34;&gt;\((u_{\mathrm{out}},{\mathrm{fa}_u}_{\mathrm{in}}, 1, 0)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;特别的，对于每个生成森林的根，连边 &lt;span class=&#34;math inline&#34;&gt;\((u_{\mathrm{out}}, T, 1, +\inf)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于每个守卫 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\((S, i, 1, 0)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于守卫 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 守卫的点 &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt;，连边 &lt;span class=&#34;math inline&#34;&gt;\((i, u_{\mathrm{in}}, 1, 0)\)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即，一个守卫对应一个流，每棵生成树的根的守卫产生的贡献单独处理（即 &lt;span class=&#34;math inline&#34;&gt;\(\inf\)&lt;/span&gt; 边），剩下的守卫考虑干碎一条自己所在连通块连向祖先的边（即断边）。对上面这个图跑最大费用流即可。&lt;/p&gt;
&lt;p&gt;对于无解的情况，判断最大流是否为 &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; 以及 &lt;span class=&#34;math inline&#34;&gt;\(\inf\)&lt;/span&gt; 边是否满流即可。&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; ll = &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;long&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;1505&lt;/span&gt;, maxm = &lt;span class=&#34;fl&#34;&gt;3e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; S, T;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; MCMF {&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; head[maxn], cur[maxn], cnte = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Edge {&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; to, nxt, w;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        ll cost;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    } e[maxm];&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll dis[maxn], maxCost;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; pre[maxn], inq[maxn], flow[maxn], maxFlow;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; SPFA() {&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        memset(dis, &lt;span class=&#34;bn&#34;&gt;0x80&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        memset(inq, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; inq);&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        queue&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        q.push(S);&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        inq[S] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, dis[S] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, flow[S] = numeric_limits&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;::max();&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = q.front(); q.pop();&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            inq[u] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = head[u]; i; i = e[i].nxt) {&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; &amp;amp;v = e[i].to;&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (e[i].w &amp;amp;&amp;amp; dis[v] &amp;lt; dis[u] + e[i].cost) {&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    dis[v] = dis[u] + e[i].cost;&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    flow[v] = min(flow[u], e[i].w);&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    pre[v] = i;&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!inq[v]) q.push(v), inq[v] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; dis[T] &amp;gt; &lt;span class=&#34;kw&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;bn&#34;&gt;0x80808080&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; update() {&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = T;&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (u != S) {&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = pre[u];&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            e[i].w -= flow[T], e[i ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].w += flow[T];&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            u = e[i ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].to;&lt;/span&gt;
&lt;span id=&#34;cb1-43&#34;&gt;&lt;a href=&#34;#cb1-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-44&#34;&gt;&lt;a href=&#34;#cb1-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        maxCost += flow[T] * dis[T];&lt;/span&gt;
&lt;span id=&#34;cb1-45&#34;&gt;&lt;a href=&#34;#cb1-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        maxFlow += flow[T];&lt;/span&gt;
&lt;span id=&#34;cb1-46&#34;&gt;&lt;a href=&#34;#cb1-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-47&#34;&gt;&lt;a href=&#34;#cb1-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-48&#34;&gt;&lt;a href=&#34;#cb1-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb1-49&#34;&gt;&lt;a href=&#34;#cb1-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    il &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; addEdge(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; w, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; c) {&lt;/span&gt;
&lt;span id=&#34;cb1-50&#34;&gt;&lt;a href=&#34;#cb1-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        e[++cnte] = {v, head[u], w, c}, head[u] = cnte;&lt;/span&gt;
&lt;span id=&#34;cb1-51&#34;&gt;&lt;a href=&#34;#cb1-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        e[++cnte] = {u, head[v], &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, -c}, head[v] = cnte;&lt;/span&gt;
&lt;span id=&#34;cb1-52&#34;&gt;&lt;a href=&#34;#cb1-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-53&#34;&gt;&lt;a href=&#34;#cb1-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-54&#34;&gt;&lt;a href=&#34;#cb1-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-55&#34;&gt;&lt;a href=&#34;#cb1-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, ll&amp;gt; work() {&lt;/span&gt;
&lt;span id=&#34;cb1-56&#34;&gt;&lt;a href=&#34;#cb1-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (SPFA()) update();&lt;/span&gt;
&lt;span id=&#34;cb1-57&#34;&gt;&lt;a href=&#34;#cb1-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; {maxFlow, maxCost};&lt;/span&gt;
&lt;span id=&#34;cb1-58&#34;&gt;&lt;a href=&#34;#cb1-58&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-59&#34;&gt;&lt;a href=&#34;#cb1-59&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-60&#34;&gt;&lt;a href=&#34;#cb1-60&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} flow;&lt;/span&gt;
&lt;span id=&#34;cb1-61&#34;&gt;&lt;a href=&#34;#cb1-61&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-62&#34;&gt;&lt;a href=&#34;#cb1-62&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; UnionFind {&lt;/span&gt;
&lt;span id=&#34;cb1-63&#34;&gt;&lt;a href=&#34;#cb1-63&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb1-64&#34;&gt;&lt;a href=&#34;#cb1-64&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; fa[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-65&#34;&gt;&lt;a href=&#34;#cb1-65&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; find(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; u == fa[u] ? u : fa[u] = find(fa[u]);}&lt;/span&gt;
&lt;span id=&#34;cb1-66&#34;&gt;&lt;a href=&#34;#cb1-66&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb1-67&#34;&gt;&lt;a href=&#34;#cb1-67&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    il &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; query(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; find(u) == find(v);}&lt;/span&gt;
&lt;span id=&#34;cb1-68&#34;&gt;&lt;a href=&#34;#cb1-68&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    il &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; uni(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v) {&lt;/span&gt;
&lt;span id=&#34;cb1-69&#34;&gt;&lt;a href=&#34;#cb1-69&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        u = find(u), v = find(v);&lt;/span&gt;
&lt;span id=&#34;cb1-70&#34;&gt;&lt;a href=&#34;#cb1-70&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (u == v) &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-71&#34;&gt;&lt;a href=&#34;#cb1-71&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        fa[u] = v;&lt;/span&gt;
&lt;span id=&#34;cb1-72&#34;&gt;&lt;a href=&#34;#cb1-72&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-73&#34;&gt;&lt;a href=&#34;#cb1-73&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-74&#34;&gt;&lt;a href=&#34;#cb1-74&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    UnionFind() {&lt;/span&gt;
&lt;span id=&#34;cb1-75&#34;&gt;&lt;a href=&#34;#cb1-75&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, maxn - &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;) fa[i] = i;&lt;/span&gt;
&lt;span id=&#34;cb1-76&#34;&gt;&lt;a href=&#34;#cb1-76&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-77&#34;&gt;&lt;a href=&#34;#cb1-77&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-78&#34;&gt;&lt;a href=&#34;#cb1-78&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} ufs;&lt;/span&gt;
&lt;span id=&#34;cb1-79&#34;&gt;&lt;a href=&#34;#cb1-79&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-80&#34;&gt;&lt;a href=&#34;#cb1-80&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; Edge {&lt;/span&gt;
&lt;span id=&#34;cb1-81&#34;&gt;&lt;a href=&#34;#cb1-81&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, v, w;&lt;/span&gt;
&lt;span id=&#34;cb1-82&#34;&gt;&lt;a href=&#34;#cb1-82&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    il &lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; Edge &amp;amp;rhs) &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; w &amp;lt; rhs.w;}&lt;/span&gt;
&lt;span id=&#34;cb1-83&#34;&gt;&lt;a href=&#34;#cb1-83&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} e[maxm];&lt;/span&gt;
&lt;span id=&#34;cb1-84&#34;&gt;&lt;a href=&#34;#cb1-84&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-85&#34;&gt;&lt;a href=&#34;#cb1-85&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;vector&amp;lt;pair&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; tree[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-86&#34;&gt;&lt;a href=&#34;#cb1-86&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; fap[maxn], fa[maxn], n, m, k, vis[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-87&#34;&gt;&lt;a href=&#34;#cb1-87&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;ll totw;&lt;/span&gt;
&lt;span id=&#34;cb1-88&#34;&gt;&lt;a href=&#34;#cb1-88&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-89&#34;&gt;&lt;a href=&#34;#cb1-89&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; dfs(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; pre) {&lt;/span&gt;
&lt;span id=&#34;cb1-90&#34;&gt;&lt;a href=&#34;#cb1-90&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (pre == -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) fap[u] = &lt;span class=&#34;fl&#34;&gt;1e7&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-91&#34;&gt;&lt;a href=&#34;#cb1-91&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    vis[u] = &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;, fa[u] = pre;&lt;/span&gt;
&lt;span id=&#34;cb1-92&#34;&gt;&lt;a href=&#34;#cb1-92&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; &amp;amp;p : tree[u]) {&lt;/span&gt;
&lt;span id=&#34;cb1-93&#34;&gt;&lt;a href=&#34;#cb1-93&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; &amp;amp;v = p.first;&lt;/span&gt;
&lt;span id=&#34;cb1-94&#34;&gt;&lt;a href=&#34;#cb1-94&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (vis[v]) &lt;span class=&#34;cf&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-95&#34;&gt;&lt;a href=&#34;#cb1-95&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        fap[v] = p.second, dfs(v, u);&lt;/span&gt;
&lt;span id=&#34;cb1-96&#34;&gt;&lt;a href=&#34;#cb1-96&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-97&#34;&gt;&lt;a href=&#34;#cb1-97&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-98&#34;&gt;&lt;a href=&#34;#cb1-98&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-99&#34;&gt;&lt;a href=&#34;#cb1-99&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-100&#34;&gt;&lt;a href=&#34;#cb1-100&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb1-101&#34;&gt;&lt;a href=&#34;#cb1-101&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k;&lt;/span&gt;
&lt;span id=&#34;cb1-102&#34;&gt;&lt;a href=&#34;#cb1-102&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) cin &amp;gt;&amp;gt; e[i].u &amp;gt;&amp;gt; e[i].v &amp;gt;&amp;gt; e[i].w;&lt;/span&gt;
&lt;span id=&#34;cb1-103&#34;&gt;&lt;a href=&#34;#cb1-103&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    sort(e + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, e + m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-104&#34;&gt;&lt;a href=&#34;#cb1-104&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (ufs.uni(e[i].u, e[i].v)) {&lt;/span&gt;
&lt;span id=&#34;cb1-105&#34;&gt;&lt;a href=&#34;#cb1-105&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        totw += e[i].w;&lt;/span&gt;
&lt;span id=&#34;cb1-106&#34;&gt;&lt;a href=&#34;#cb1-106&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        tree[e[i].u].push_back({e[i].v, e[i].w});&lt;/span&gt;
&lt;span id=&#34;cb1-107&#34;&gt;&lt;a href=&#34;#cb1-107&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        tree[e[i].v].push_back({e[i].u, e[i].w});&lt;/span&gt;
&lt;span id=&#34;cb1-108&#34;&gt;&lt;a href=&#34;#cb1-108&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-109&#34;&gt;&lt;a href=&#34;#cb1-109&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-110&#34;&gt;&lt;a href=&#34;#cb1-110&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    S = &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * n + k + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, T = S + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-111&#34;&gt;&lt;a href=&#34;#cb1-111&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) flow.addEdge(i, n + i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-112&#34;&gt;&lt;a href=&#34;#cb1-112&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, k) {&lt;/span&gt;
&lt;span id=&#34;cb1-113&#34;&gt;&lt;a href=&#34;#cb1-113&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        flow.addEdge(S, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * n + i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-114&#34;&gt;&lt;a href=&#34;#cb1-114&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; s; cin &amp;gt;&amp;gt; s;&lt;/span&gt;
&lt;span id=&#34;cb1-115&#34;&gt;&lt;a href=&#34;#cb1-115&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (s--) {&lt;/span&gt;
&lt;span id=&#34;cb1-116&#34;&gt;&lt;a href=&#34;#cb1-116&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v; cin &amp;gt;&amp;gt; v;&lt;/span&gt;
&lt;span id=&#34;cb1-117&#34;&gt;&lt;a href=&#34;#cb1-117&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            flow.addEdge(&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; * n + i, v, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-118&#34;&gt;&lt;a href=&#34;#cb1-118&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-119&#34;&gt;&lt;a href=&#34;#cb1-119&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-120&#34;&gt;&lt;a href=&#34;#cb1-120&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-121&#34;&gt;&lt;a href=&#34;#cb1-121&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!vis[i]) dfs(i, -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;), totw += &lt;span class=&#34;fl&#34;&gt;1e7&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-122&#34;&gt;&lt;a href=&#34;#cb1-122&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-123&#34;&gt;&lt;a href=&#34;#cb1-123&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb1-124&#34;&gt;&lt;a href=&#34;#cb1-124&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        flow.addEdge(n + i, T, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, fap[i]);&lt;/span&gt;
&lt;span id=&#34;cb1-125&#34;&gt;&lt;a href=&#34;#cb1-125&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (~fa[i]) flow.addEdge(n + i, fa[i], &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-126&#34;&gt;&lt;a href=&#34;#cb1-126&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-127&#34;&gt;&lt;a href=&#34;#cb1-127&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-128&#34;&gt;&lt;a href=&#34;#cb1-128&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;auto&lt;/span&gt; ret = flow.work();&lt;/span&gt;
&lt;span id=&#34;cb1-129&#34;&gt;&lt;a href=&#34;#cb1-129&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    ll ans = totw - ret.second;&lt;/span&gt;
&lt;span id=&#34;cb1-130&#34;&gt;&lt;a href=&#34;#cb1-130&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    cout &amp;lt;&amp;lt; ((ans &amp;gt;= &lt;span class=&#34;fl&#34;&gt;1e7&lt;/span&gt; || ret.first &amp;lt; k) ? -&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; : ans);&lt;/span&gt;
&lt;span id=&#34;cb1-131&#34;&gt;&lt;a href=&#34;#cb1-131&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-132&#34;&gt;&lt;a href=&#34;#cb1-132&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-133&#34;&gt;&lt;a href=&#34;#cb1-133&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>P2053 [SCOI2007]修车</title>
        <link>https://oi.imyangty.com/sol-luogu-p2053/</link>
        <pubDate>Fri, 17 Sep 2021 17:33:09 +0800</pubDate>
        
        <guid>https://oi.imyangty.com/sol-luogu-p2053/</guid>
        <description>&lt;img src="https://yangty-pic.oss-cn-beijing.aliyuncs.com/bg38.webp" alt="Featured image of post P2053 [SCOI2007]修车" /&gt;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;同一时刻有 &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; 位车主带着他们的爱车来到了汽车维修中心。&lt;/p&gt;
&lt;p&gt;维修中心共有 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 位技术人员，不同的技术人员对不同的车进行维修所用的时间是不同的。&lt;/p&gt;
&lt;p&gt;现在需要安排这 &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; 位技术人员所维修的车及顺序，使得顾客平均等待的时间最小。&lt;/p&gt;
&lt;p&gt;说明：顾客的等待时间是指从他把车送至维修中心到维修完毕所用的时间。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(2\le M\le 9\)&lt;/span&gt;，&lt;span class=&#34;math inline&#34;&gt;\(1\le N\le 60\)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;直接考虑似乎不是很好搞，考虑费用的提前计算，一个车在第 &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; 个技术员倒数第 &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; 个被修会对总时长产生 &lt;span class=&#34;math inline&#34;&gt;\(i\times T_{i, j}\)&lt;/span&gt; 的贡献。&lt;/p&gt;
&lt;p&gt;所以，相当于就是一张二分图，左部为每辆车，右边为技术员倒数第几个修，连边，流量为 &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;，费用为对应的 &lt;span class=&#34;math inline&#34;&gt;\(i\times T_{i, j}\)&lt;/span&gt;，跑最小费用最大流即可。&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode cpp&#34;&gt;&lt;code class=&#34;sourceCode cpp&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define il &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;inline&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define FOR&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;lt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;++i)&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define DEC&lt;/span&gt;(i,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;a,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;b)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(a);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&amp;gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(b);&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;--i)&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;pp&#34;&gt;#define GO&lt;/span&gt;(u,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;x)&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;x[u],&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;v&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;e[i].to;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i;&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;i&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;e[i].nxt,&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;v&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;pp&#34;&gt; &lt;/span&gt;e[i].to)&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; fastIO {&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxc = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;23&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; ibuf[maxc], *__p1 = ibuf, *__p2 = ibuf;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;il &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; getchar() {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; __p1 == __p2 &amp;amp;&amp;amp; (__p2 = (__p1 = ibuf) + fread(ibuf, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, maxc, stdin), __p1 == __p2) ? EOF : *__p1++;}&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;kw&#34;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; read(T &amp;amp;n) {&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;; n = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;char&lt;/span&gt; c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        x |= (c == &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (isdigit(c))&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        n = n * &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; + c - &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, c = getchar();&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    n = x ? -n : n;&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} &lt;span class=&#34;co&#34;&gt;// namespace fastIO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; fastIO;&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;kw&#34;&gt;typename&lt;/span&gt; T&amp;gt; il T min(&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; T &amp;amp;a, &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; T &amp;amp;b) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a &amp;lt; b ? a : b;}&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;kw&#34;&gt;typename&lt;/span&gt; T&amp;gt; il T max(&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; T &amp;amp;a, &lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; T &amp;amp;b) {&lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; a &amp;gt; b ? a : b;}&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; INF = &lt;span class=&#34;fl&#34;&gt;1e9&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-31&#34;&gt;&lt;a href=&#34;#cb1-31&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; maxn = &lt;span class=&#34;dv&#34;&gt;10000&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;, maxm = &lt;span class=&#34;fl&#34;&gt;2e5&lt;/span&gt; + &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-32&#34;&gt;&lt;a href=&#34;#cb1-32&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-33&#34;&gt;&lt;a href=&#34;#cb1-33&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; edge {&lt;/span&gt;
&lt;span id=&#34;cb1-34&#34;&gt;&lt;a href=&#34;#cb1-34&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; to, nxt, w, c;&lt;/span&gt;
&lt;span id=&#34;cb1-35&#34;&gt;&lt;a href=&#34;#cb1-35&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} e[maxm &amp;lt;&amp;lt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&#34;cb1-36&#34;&gt;&lt;a href=&#34;#cb1-36&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-37&#34;&gt;&lt;a href=&#34;#cb1-37&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; head[maxn], cnt = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, s, t;&lt;/span&gt;
&lt;span id=&#34;cb1-38&#34;&gt;&lt;a href=&#34;#cb1-38&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-39&#34;&gt;&lt;a href=&#34;#cb1-39&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;il &lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; add(&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; v, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; w, &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; c) {&lt;/span&gt;
&lt;span id=&#34;cb1-40&#34;&gt;&lt;a href=&#34;#cb1-40&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    e[++cnt].to = v, e[cnt].w = w, e[cnt].c = c;&lt;/span&gt;
&lt;span id=&#34;cb1-41&#34;&gt;&lt;a href=&#34;#cb1-41&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    e[cnt].nxt = head[u], head[u] = cnt;&lt;/span&gt;
&lt;span id=&#34;cb1-42&#34;&gt;&lt;a href=&#34;#cb1-42&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    e[++cnt].to = u, e[cnt].w = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, e[cnt].c = -c;&lt;/span&gt;
&lt;span id=&#34;cb1-43&#34;&gt;&lt;a href=&#34;#cb1-43&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    e[cnt].nxt = head[v], head[v] = cnt;&lt;/span&gt;
&lt;span id=&#34;cb1-44&#34;&gt;&lt;a href=&#34;#cb1-44&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-45&#34;&gt;&lt;a href=&#34;#cb1-45&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-46&#34;&gt;&lt;a href=&#34;#cb1-46&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-47&#34;&gt;&lt;a href=&#34;#cb1-47&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;namespace&lt;/span&gt; MCMF {&lt;/span&gt;
&lt;span id=&#34;cb1-48&#34;&gt;&lt;a href=&#34;#cb1-48&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; dis[maxn], flow[maxn], maxflow, mincost;&lt;/span&gt;
&lt;span id=&#34;cb1-49&#34;&gt;&lt;a href=&#34;#cb1-49&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; pre[maxn], inq[maxn];&lt;/span&gt;
&lt;span id=&#34;cb1-50&#34;&gt;&lt;a href=&#34;#cb1-50&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-51&#34;&gt;&lt;a href=&#34;#cb1-51&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; SPFA() {&lt;/span&gt;
&lt;span id=&#34;cb1-52&#34;&gt;&lt;a href=&#34;#cb1-52&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(inq, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; inq);&lt;/span&gt;
&lt;span id=&#34;cb1-53&#34;&gt;&lt;a href=&#34;#cb1-53&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    memset(dis, &lt;span class=&#34;bn&#34;&gt;0x3f&lt;/span&gt;, &lt;span class=&#34;kw&#34;&gt;sizeof&lt;/span&gt; dis);&lt;/span&gt;
&lt;span id=&#34;cb1-54&#34;&gt;&lt;a href=&#34;#cb1-54&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;bu&#34;&gt;std::&lt;/span&gt;queue&amp;lt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt;&amp;gt; q;&lt;/span&gt;
&lt;span id=&#34;cb1-55&#34;&gt;&lt;a href=&#34;#cb1-55&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    q.push(s);&lt;/span&gt;
&lt;span id=&#34;cb1-56&#34;&gt;&lt;a href=&#34;#cb1-56&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    inq[s] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, dis[s] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-57&#34;&gt;&lt;a href=&#34;#cb1-57&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    flow[s] = INF;&lt;/span&gt;
&lt;span id=&#34;cb1-58&#34;&gt;&lt;a href=&#34;#cb1-58&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (!q.empty()) {&lt;/span&gt;
&lt;span id=&#34;cb1-59&#34;&gt;&lt;a href=&#34;#cb1-59&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; u = q.front(); q.pop();&lt;/span&gt;
&lt;span id=&#34;cb1-60&#34;&gt;&lt;a href=&#34;#cb1-60&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        inq[u] = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-61&#34;&gt;&lt;a href=&#34;#cb1-61&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        GO(u, head) {&lt;/span&gt;
&lt;span id=&#34;cb1-62&#34;&gt;&lt;a href=&#34;#cb1-62&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (e[i].w &amp;gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dis[u] + e[i].c &amp;lt; dis[v]) {&lt;/span&gt;
&lt;span id=&#34;cb1-63&#34;&gt;&lt;a href=&#34;#cb1-63&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                dis[v] = dis[u] + e[i].c;&lt;/span&gt;
&lt;span id=&#34;cb1-64&#34;&gt;&lt;a href=&#34;#cb1-64&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                flow[v] = min(flow[u], e[i].w);&lt;/span&gt;
&lt;span id=&#34;cb1-65&#34;&gt;&lt;a href=&#34;#cb1-65&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                pre[v] = i;&lt;/span&gt;
&lt;span id=&#34;cb1-66&#34;&gt;&lt;a href=&#34;#cb1-66&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (!inq[v]) {&lt;/span&gt;
&lt;span id=&#34;cb1-67&#34;&gt;&lt;a href=&#34;#cb1-67&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    inq[v] = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-68&#34;&gt;&lt;a href=&#34;#cb1-68&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                    q.push(v);&lt;/span&gt;
&lt;span id=&#34;cb1-69&#34;&gt;&lt;a href=&#34;#cb1-69&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb1-70&#34;&gt;&lt;a href=&#34;#cb1-70&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb1-71&#34;&gt;&lt;a href=&#34;#cb1-71&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-72&#34;&gt;&lt;a href=&#34;#cb1-72&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-73&#34;&gt;&lt;a href=&#34;#cb1-73&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; dis[t] &amp;lt; INF;&lt;/span&gt;
&lt;span id=&#34;cb1-74&#34;&gt;&lt;a href=&#34;#cb1-74&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-75&#34;&gt;&lt;a href=&#34;#cb1-75&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-76&#34;&gt;&lt;a href=&#34;#cb1-76&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; update() {&lt;/span&gt;
&lt;span id=&#34;cb1-77&#34;&gt;&lt;a href=&#34;#cb1-77&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; now = t;&lt;/span&gt;
&lt;span id=&#34;cb1-78&#34;&gt;&lt;a href=&#34;#cb1-78&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (now != s) {&lt;/span&gt;
&lt;span id=&#34;cb1-79&#34;&gt;&lt;a href=&#34;#cb1-79&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; i = pre[now];&lt;/span&gt;
&lt;span id=&#34;cb1-80&#34;&gt;&lt;a href=&#34;#cb1-80&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        e[i].w -= flow[t], e[i ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].w += flow[t];&lt;/span&gt;
&lt;span id=&#34;cb1-81&#34;&gt;&lt;a href=&#34;#cb1-81&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        now = e[i ^ &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;].to;&lt;/span&gt;
&lt;span id=&#34;cb1-82&#34;&gt;&lt;a href=&#34;#cb1-82&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-83&#34;&gt;&lt;a href=&#34;#cb1-83&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    maxflow += flow[t];&lt;/span&gt;
&lt;span id=&#34;cb1-84&#34;&gt;&lt;a href=&#34;#cb1-84&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    mincost += flow[t] * dis[t];&lt;/span&gt;
&lt;span id=&#34;cb1-85&#34;&gt;&lt;a href=&#34;#cb1-85&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-86&#34;&gt;&lt;a href=&#34;#cb1-86&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-87&#34;&gt;&lt;a href=&#34;#cb1-87&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-88&#34;&gt;&lt;a href=&#34;#cb1-88&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; MCMF() {&lt;/span&gt;
&lt;span id=&#34;cb1-89&#34;&gt;&lt;a href=&#34;#cb1-89&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (SPFA()) update();&lt;/span&gt;
&lt;span id=&#34;cb1-90&#34;&gt;&lt;a href=&#34;#cb1-90&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-91&#34;&gt;&lt;a href=&#34;#cb1-91&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb1-92&#34;&gt;&lt;a href=&#34;#cb1-92&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;} &lt;span class=&#34;co&#34;&gt;// namespace MCMF&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-93&#34;&gt;&lt;a href=&#34;#cb1-93&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-94&#34;&gt;&lt;a href=&#34;#cb1-94&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; n, m;&lt;/span&gt;
&lt;span id=&#34;cb1-95&#34;&gt;&lt;a href=&#34;#cb1-95&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-96&#34;&gt;&lt;a href=&#34;#cb1-96&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb1-97&#34;&gt;&lt;a href=&#34;#cb1-97&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    read(m), read(n);&lt;/span&gt;
&lt;span id=&#34;cb1-98&#34;&gt;&lt;a href=&#34;#cb1-98&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    s = n + n * m + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, t = s + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-99&#34;&gt;&lt;a href=&#34;#cb1-99&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    FOR(i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n) {&lt;/span&gt;
&lt;span id=&#34;cb1-100&#34;&gt;&lt;a href=&#34;#cb1-100&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        add(s, i, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-101&#34;&gt;&lt;a href=&#34;#cb1-101&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        FOR(j, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, m) {&lt;/span&gt;
&lt;span id=&#34;cb1-102&#34;&gt;&lt;a href=&#34;#cb1-102&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;int&lt;/span&gt; T; read(T);&lt;/span&gt;
&lt;span id=&#34;cb1-103&#34;&gt;&lt;a href=&#34;#cb1-103&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            FOR(k, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, n)&lt;/span&gt;
&lt;span id=&#34;cb1-104&#34;&gt;&lt;a href=&#34;#cb1-104&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;                add(i, n + (j - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) * n + k, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, k * T);&lt;/span&gt;
&lt;span id=&#34;cb1-105&#34;&gt;&lt;a href=&#34;#cb1-105&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;            add(n + (j - &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) * n + i, t, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&#34;cb1-106&#34;&gt;&lt;a href=&#34;#cb1-106&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb1-107&#34;&gt;&lt;a href=&#34;#cb1-107&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb1-108&#34;&gt;&lt;a href=&#34;#cb1-108&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    MCMF::MCMF();&lt;/span&gt;
&lt;span id=&#34;cb1-109&#34;&gt;&lt;a href=&#34;#cb1-109&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    printf(&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;%.2lf\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, (&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)MCMF::mincost / (&lt;span class=&#34;dt&#34;&gt;double&lt;/span&gt;)n);&lt;/span&gt;
&lt;span id=&#34;cb1-110&#34;&gt;&lt;a href=&#34;#cb1-110&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&#34;cb1-111&#34;&gt;&lt;a href=&#34;#cb1-111&#34; aria-hidden=&#34;true&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
